%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.0.0
%%For: (Private) ()
%%Title: (mobility.ai)
%%CreationDate: 1/20/2015 12:17 AM
%%Canvassize: 16383
%%BoundingBox: 4 -29 24 0
%%HiResBoundingBox: 4.20654 -28.0059 23.3828 -0.319824
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 14.3184 -14.5 14.3184 -14.5
%AI3_TileBox: -292.2974 -410.1748 319.7031 381.8252
%AI3_DocumentPreview: None
%AI5_ArtSize: 19.7686 28.3496
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -14 1 30.25 1687 915 18 0 0 9 112 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-292 -410
%AI7_GridSettings: 10 10 10 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 92 128 8
%%BeginData: 13139 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0BFFA8A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA8A8FD14FFA8A87D7D7DA87D7D7DA87D7D
%7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8
%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D
%7DA8A8FD10FFA27D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8FD0DFFA8FD057D
%A27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D
%7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7D
%A27D7D7DA27D7D7DA2FD057DFD0CFF7DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DFD0AFF7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D
%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D
%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D
%7D7DFD08FF7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7DA8
%FD06FFA87D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7D
%A27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D
%7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7DA8
%FD05FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%FD04FFA87D7D7DA87D7D7DA87D7D7DA87DA87DA8A8A87DA8A8A87DA8A8A8
%7DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8
%A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA27D7D7DA87D7D7DA87D7D
%7DFD04FF7DA87DA87DA87DA87DA87DA8FD40FFA8A87DA87DA87DA87DA87D
%7DA8FFFFA87D7DA27D7D7DA27D7D7DA8FD42FFA87E7D7D7DA27D7D7DA27D
%A8FFFFA87DA87DA87DA87DA87DA8FD44FFA8A87DA87DA87DA87DA87DFFFF
%A27D7DA87D7D7DA87D7DA8FD45FF7D7D7DA87D7D7DA87D7DA8FFA87DA87D
%A87DA87DA87DFD46FFA87DA87DA87DA87DA87DA8FF7DA27D7D7DA27D7D7D
%A8A8FD45FFA8FD047DA2FD047DA8FFA87DA87DA87DA87DA8A8FD47FF7DA8
%7DA87DA87DA87DA8FF7DA87D7D7DA87D7D7DA8FD46FFA8FD047DA8FD047D
%A8FFA87DA87DA87DA87DA87DFD47FF7DA87DA87DA87DA87DA8FF7D7D7DA2
%7D7D7DA27DA8A8FD45FFA87D7DA27D7D7DA27D7D7DFFA87DA87DA87DA87D
%A87DFD47FF7DA87DA87DA87DA87DA8FF7D7D7DA87D7D7DA87DA8A8FD45FF
%A87D7DA87D7D7DA87D7D7EFFA87DA87DA87DA87DA87EFD47FF7DA87DA87D
%A87DA87DA8FF7DA27D7D7DA27D7D7DA8FD46FFA8FD047DA2FD047DA8FFA8
%7DA87DA87DA87DA8A8FD47FF7DA87DA87DA87DA87DA8FF7DA87D7D7DA87D
%7D7DA8FD46FFA8FD047DA8FD047DA8FFA87DA87DA87DA87DA87DFD47FF7D
%A87DA87DA87DA87DA8FF7D7D7DA27D7D7DA27DA8A8FD45FFA87D7DA27D7D
%7DA27D7D7DFFA87DA87DA87DA87DA87DFD47FF7DA87DA87DA87DA87DA8FF
%7D7D7DA87D7D7DA87DA8A8FD45FFA87D7DA87D7D7DA87D7D7EFFA87DA87D
%A87DA87DA87EFD47FF7DA87DA87DA87DA87DA8FF7DA27D7D7DA27D7D7DA8
%FD46FFA8FD047DA2FD047DA8FFA87DA87DA87DA87DA8A8FD47FF7DA87DA8
%7DA87DA87DA8FF7DA87D7D7DA87D7D7DA8FD46FFA8FD047DA8FD047DA8FF
%A87DA87DA87DA87DA87DFD47FF7DA87DA87DA87DA87DA8FF7D7D7DA27D7D
%7DA27DA8A8FD45FFA87D7DA27D7D7DA27D7D7DFFA87DA87DA87DA87DA87D
%FD47FF7DA87DA87DA87DA87DA8FF7D7D7DA87D7D7DA87DA8A8FD45FFA87D
%7DA87D7D7DA87D7D7EFFA87DA87DA87DA87DA87EFD47FF7DA87DA87DA87D
%A87DA8FF7DA27D7D7DA27D7D7DA8FD46FFA8FD047DA2FD047DA8FFA87DA8
%7DA87DA87DA8A8FD47FF7DA87DA87DA87DA87DA8FF7DA87D7D7DA87D7D7D
%A8FD46FFA8FD047DA8FD047DA8FFA87DA87DA87DA87DA87DFD47FF7DA87D
%A87DA87DA87DA8FF7D7D7DA27D7D7DA27DA8A8FD45FFA87D7DA27D7D7DA2
%7D7D7DFFA87DA87DA87DA87DA87DFD47FF7DA87DA87DA87DA87DA8FF7D7D
%7DA87D7D7DA87DA8A8FD45FFA87D7DA87D7D7DA87D7D7EFFA87DA87DA87D
%A87DA87EFD47FF7DA87DA87DA87DA87DA8FF7DA27D7D7DA27D7D7DA8FD46
%FFA8FD047DA2FD047DA8FFA87DA87DA87DA87DA8A8FD47FF7DA87DA87DA8
%7DA87DA8FF7DA87D7D7DA87D7D7DA8FD46FFA8FD047DA8FD047DA8FFA87D
%A87DA87DA87DA87DFD47FF7DA87DA87DA87DA87DA8FF7D7D7DA27D7D7DA2
%7DA8A8FD45FFA87D7DA27D7D7DA27D7D7DFFA87DA87DA87DA87DA87DFD47
%FF7DA87DA87DA87DA87DA8FF7D7D7DA87D7D7DA87DA8A8FD45FFA87D7DA8
%7D7D7DA87D7D7EFFA87DA87DA87DA87DA87EFD47FF7DA87DA87DA87DA87D
%A8FF7DA27D7D7DA27D7D7DA8FD46FFA8FD047DA2FD047DA8FFA87DA87DA8
%7DA87DA8A8FD47FF7DA87DA87DA87DA87DA8FF7DA87D7D7DA87D7D7DA8FD
%46FFA8FD047DA8FD047DA8FFA87DA87DA87DA87DA87DFD47FF7DA87DA87D
%A87DA87DA8FF7D7D7DA27D7D7DA27DA8A8FD45FFA87D7DA27D7D7DA27D7D
%7DFFA87DA87DA87DA87DA87DFD47FF7DA87DA87DA87DA87DA8FF7D7D7DA8
%7D7D7DA87DA8A8FD45FFA87D7DA87D7D7DA87D7D7EFFA87DA87DA87DA87D
%A87EFD47FF7DA87DA87DA87DA87DA8FF7DA27D7D7DA27D7D7DA8FD46FFA8
%FD047DA2FD047DA8FFA87DA87DA87DA87DA8A8FD47FF7DA87DA87DA87DA8
%7DA8FF7DA87D7D7DA87D7D7DA8FD46FFA8FD047DA8FD047DA8FFA87DA87D
%A87DA87DA87DFD47FF7DA87DA87DA87DA87DA8FF7D7D7DA27D7D7DA27DA8
%A8FD45FFA87D7DA27D7D7DA27D7D7DFFA87DA87DA87DA87DA87DFD47FF7D
%A87DA87DA87DA87DA8FF7D7D7DA87D7D7DA87DA8A8FD45FFA87D7DA87D7D
%7DA87D7D7EFFA87DA87DA87DA87DA87EFD47FF7DA87DA87DA87DA87DA8FF
%7DA27D7D7DA27D7D7DA8FD46FFA8FD047DA2FD047DA8FFA87DA87DA87DA8
%7DA8A8FD47FF7DA87DA87DA87DA87DA8FF7DA87D7D7DA87D7D7DA8FD46FF
%A8FD047DA8FD047DA8FFA87DA87DA87DA87DA87DFD47FF7DA87DA87DA87D
%A87DA8FF7D7D7DA27D7D7DA27DA8A8FD45FFA87D7DA27D7D7DA27D7D7DFF
%A87DA87DA87DA87DA87DFD47FF7DA87DA87DA87DA87DA8FF7D7D7DA87D7D
%7DA87DA8A8FD45FFA87D7DA87D7D7DA87D7D7EFFA87DA87DA87DA87DA87E
%FD47FF7DA87DA87DA87DA87DA8FF7DA27D7D7DA27D7D7DA8FD46FFA8FD04
%7DA2FD047DA8FFA87DA87DA87DA87DA8A8FD47FF7DA87DA87DA87DA87DA8
%FF7DA87D7D7DA87D7D7DA8FD46FFA8FD047DA8FD047DA8FFA87DA87DA87D
%A87DA87DFD47FF7DA87DA87DA87DA87DA8FF7D7D7DA27D7D7DA27DA8A8FD
%45FFA87D7DA27D7D7DA27D7D7DFFA87DA87DA87DA87DA87DFD47FF7DA87D
%A87DA87DA87DA8FF7D7D7DA87D7D7DA87DA8A8FD45FFA87D7DA87D7D7DA8
%7D7D7EFFA87DA87DA87DA87DA87EFD47FF7DA87DA87DA87DA87DA8FF7DA2
%7D7D7DA27D7D7DA8FD46FFA8FD047DA2FD047DA8FFA87DA87DA87DA87DA8
%A8FD47FF7DA87DA87DA87DA87DA8FF7DA87D7D7DA87D7D7DA8FD46FFA8FD
%047DA8FD047DA8FFA87DA87DA87DA87DA87DFD47FF7DA87DA87DA87DA87D
%A8FF7D7D7DA27D7D7DA27DA8A8FD45FFA87D7DA27D7D7DA27D7D7DFFA87D
%A87DA87DA87DA87DFD47FF7DA87DA87DA87DA87DA8FF7D7D7DA87D7D7DA8
%7DA8A8FD45FFA87D7DA87D7D7DA87D7D7EFFA87DA87DA87DA87DA87DFD46
%FFA87DA87DA87DA87DA87DA8FF7DA27D7D7DA2FD047DA8FD45FFFD057DA2
%FD047DA8FFA87DA87DA87DA87DA87DA8FD44FFA8A87DA87DA87DA87DA87D
%A8FF7DA87D7D7DA87D7D7DA87DA9FD43FFA87DA87D7D7DA8FD047DA8FFA8
%7DA87DA87DA87DA87DA87DFD43FF7DA87DA87DA87DA87DA87DA8FF7D7D7D
%A27D7D7DA2FD057DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8A87D7E7D7D7DA27D7D7DA27D7D7DFFA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FF7D
%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D
%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D
%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7E
%FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA8FF7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D
%7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7D
%A27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA2FD
%047DA8FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA8FF7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D
%7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8
%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D
%7DA8FD047DA8FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8FFFFFFA8A87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA8FF7D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D
%7D7DA27D7D7DA27D7D7DA27D7D7DA2FD057DFD08FFA8FD057DA27D7D7DA2
%7D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D
%7DFFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA8A8FD0BFF7DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FF7D7D7DA8
%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D
%7DA87D7D7DFD0CFFA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D
%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7EFFA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FD0D
%FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA8FF7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D
%7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7D7EA8FD0DFFA8FD047DA27D7D
%7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA2FD047DA8
%FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87EFD0FFF7DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FF7DA87D7D7DA87D7D7D
%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8FD
%0EFFA8FD047DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7D
%A87D7D7DA8FD047DA8FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DFD0FFF7DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DFFFF
%A87D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D
%7DA27D7D7DA27D7DA8FD0DFFA87D7DA27D7D7DA27D7D7DA27D7D7DA27D7D
%7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7DA8FFFF7DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A8FD0DFFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DFFFFFFA87DA87D7D7DA87D7D7DA87D7D7DA8
%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DFD0CFFA87D7D7D
%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D
%7D7DA87DA8FFFFFFA87D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DFD0AFFA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FD
%05FF7D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA2
%7D7D7DA27D7D7DA27D7D7DA8FD06FFA8A87D7D7DA27D7D7DA27D7D7DA27D
%7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DFD05FFA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA8A8FFFD04A87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DFD07FFA87DA8
%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D
%7DA87D7D7DA8FD077DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8
%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87DA8FD08FFA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA8FD09FFA87D7DA27D7D7DA27D7D7DA27D
%7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7D
%A27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D
%7D7DA27D7D7DA27DA8A8FD0AFFA8A87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA8FD0DFFA8A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D
%7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8
%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8FD11FF7D7E7D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA8A8FD14FFA8A87DA27D7D7DA27D7D7DA27D7D7DA27D
%7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7D
%A27D7D7DA27D7D7DA27D7D7DA27D7D7DA27D7D7DA87DA8A8FD0AFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
7 Bn
%AI5_BeginGradient: (Fade to Black)
(Fade to Black) 0 2 Bd
[
0.743221
0.648188
0.629023
0.813504
0.113725
0.113725
0.105882
4 %_Br
[
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 2 50 100 %_BS
%_0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 2 50 100 Bs
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 2 25 0 %_BS
%_0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 2 25 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Green, Yellow, Orange)
(Green, Yellow, Orange) 0 7 Bd
[
<
02040607090A0B0D0E0F101213141617191A1C1D1E1F202122232425262728292A2B2C2D2D2E2F30
3132333334353637383839393A3B3B3C3D3D3E3F3F404041424243444445454647474849494A4B4C
4D4D4E4F505152545556575A5B5C5F61626467696B6C6F717375787A7C7D8082838587888A8C8E8F
909294959698999B9C9E9FA0A1A3A4A5A6A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9B9BBBBBCBD
BEBFC0C0C1C2C2C3C4C5C6C6C7C8C8C9C9CACACBCBCCCCCCCDCDCECECFCFCFCFD0D0D0D0D1D1D1D1
D2D2D2D2D3D3D3D3D4D4D4D4D4D4D4D4D5D4D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5
>
<
BEBEBDBDBCBCBBBBBBBBBABABABAB8B8B8B7B6B6B5B5B4B3B3B2B1B1B1AFAFAFAEADACACACAAA9A9
A8A6A6A5A5A3A3A2A09F9F9E9C9C9B9A98979796949392918F8E8D8D8A898886858483807F7F7E7B
7A79787675747371706F6F6C6C6B6968686765656464626161605F5E5E5E5D5C5C5C5A5A5A585858
5856565655545453535252515150504F4F4E4E4D4D4C4C4B4A4A4949474747474545454543434242
414040403E3E3E3D3C3C3C3A3A3A39383838373636363634343434323232303030302E2E2E2E2C2C
2C2C2A2A2A292828272725252523232323212121211F1F1F1F1D1D1D1D1C1C1C1C1A1A
>
1
<
0000000000010101010202020203030404040505060607070809090A0A0B0C0D0D0E0F1010121313
1416161718191A1B1D1E1F2021222324262728292B2C2D2E30313234353637393A3B3C3E3F404141
4243444546464748484949494949484848484747474644444443414140403E3E3D3D3B3B3A383837
3735343434323131302E2E2E2E2C2B2B2B29282827262525232322222020201F1E1D1D1D1B1B1B1B
19191919171717151515151313131311111111100F0F0F0E0E0E0D0C0C0C0B0B0B0B0A0A0A090909
0808080807070707070706060605050505040404040404040403030303020202020202
>
<
EAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3
C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B
9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776757473
7271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B
4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423
2221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100
>
<
5B5B5C5C5C5C5D5D5D5D5E5E5E5E5F5F5F5F60606060616161626262626363636364646464656565
656666666667676768686868696969696A6A6A6A6B6B6B6B6C6C6C6C6D6D6D6E6E6E6E6F6F6F6F70
707070717171717272727273737374747474757575757676767677777777787878787979797A7A7A
7A7B7B7B7B7C7C7C7C7D7D7D7D7E7E7E7E7F7F7F7F80808081818181828282828383838384848484
858585858686868787878788888888898989898A8A8A8A8B8B8B8B8C8C8C8D8D8D8D8E8E8E8E8F8F
8F8F909090909191919192929293939393949494949595959596969696979797979898
>
<
0C0C0C0D0D0D0D0D0E0E0E0E0E0F0F0F0F0F10101010101111111111121212121212131313131314
14141414151515151516161616161717171717181818181819191919191A1A1A1A1A1B1B1B1B1B1C
1C1C1C1C1D1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F2020202020212121212122222222222323232323
242424242425252525252626262626272727272728282828282929292929292A2A2A2A2A2B2B2B2B
2B2C2C2C2C2C2D2D2D2D2D2E2E2E2E2E2F2F2F2F2F30303030303131313131323232323233333333
33343434343434353535353536363636363737373737383838383839393939393A3A3A
>
4 %_Br
<
06060505060505040403050404040303050504040404050504040404030404040303030404030202
01030202020202030303020101010201010100000101000000000000000000000101010000000202
01010100000101010000000100000000000000000000000000000000000000000000000000000000
000002020202020203030302
>
<
17191B1C1D1F202223252628292B2D2E2F3132343638383A3C3D3E40414244454648494A4C4D4F50
5152545557585A5B5C5D5F60616364656668696A6B6D6E6F71727374767778797A7C7D7F80818283
858687888A8B8C8E8F9091929394959698999A9B9C9D9E9FA1A2A3A4A5A6A7A9AAABACAEAFB0B1B2
B3B4B5B6B6B8B9BABBBCBDBE
>
<
EAEAEAEBECECECECECECEDEDEDEDEDEDEEEEEEEEEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F1F1F1F2F2F2F2F2F2F2F2F3F3F3F3F3F3F4F4F4F3F3F3F4F4F4F5F5F4F5F5F5F6F6F6F7F7
F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9FAFAFAFAF9F9F9FAFAFAFAFBFAFBFCFCFC
FCFCFDFEFEFEFEFEFFFFFFFF
>
0.000031
<
FFFFFFFFFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9
F9F8F8F8F8F8F8F7F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F3F2F2
F2F2F2F2F2F1F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEEEEEDEDEDEDEDEDECECECEC
ECECEBEBEBEBEBEBEAEAEAEA
>
<
DEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7
B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F
8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867
666564636261605F5E5D5C5B
>
<
00000000000001010101010101010101010202020202020202020202030303030303030303030304
04040404040404040404050505050505050505050506060606060606060606070707070707070707
0707080808080808080808080809090909090909090909090A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B
0B0B0B0B0B0B0C0C0C0C0C0C
>
4 %_Br
<
D5D5D4D4D4D4D3D3D3D3D2D2D2D1D1D1D1D0D0D0D0CFCFCFCECECECDCDCDCCCCCBCBCBCACACAC9C8
C8C8C7C7C7C6C6C5C5C5C4C3C3C2C2C2C1C0C0C0BFBEBEBDBCBBBBBBBAB9B9B8B8B7B7B6B5B5B5B4
B3B3B2B1B1B0AFAFAEAEADACACABAAA9A9A8A7A7A6A5A5A4A3A3A2A1A0A09F9F9E9D9D9C9B9A9A99
98979796959594939291908F8E8D8C8B8A898888878685858483828180807F7E7D7C7B7A79787877
767574737271706F6E6D6C6B6A6968676564636261605F5E5D5C5B595857565554535251504F4E4D
4B4A4948464544434241403E3D3C3B3A39383635343331302E2D2C2A29282625232221201E1D1C1B
1A181716141312110F0E0D0B0A090706
>
<
1A1A181818181717171715151513131313121212121011110F0F0F0F0D0E0E0C0C0C0C0A0A0A0B09
09090808080806060707050505040404040203030301020200010101000000010000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000001010001020001010201
01020301020302030304030405050405060405060605060605050607060607080708090708090A09
090A0B0A0B0C0B0C0C0D0C0D0E0E0D0E0F0E0E0F100F101011101011101011121111121112121312
13131413141514141516151617171717
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFEFEFEFDFDFDFEFDFDFEFEFDFDFDFCFCFCFCFBFBFBFAFAFAFAF9F9F9F9F9F9F8F8F8F8F7F7
F7F7F7F6F6F6F6F6F5F5F5F5F5F4F4F4F4F4F4F4F3F3F3F3F3F2F2F2F1F1F1F1F1F0F0F0F0F0EFEF
EFEFEEEEEDEDEDECECECECEBEBEBEAEA
>
<
02020202020202020202010202010101010101010101010101010101000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
9898999999999A9A9A9A9B9B9B9C9C9C9C9D9D9D9D9E9E9E9F9F9F9FA0A0A0A1A1A1A1A2A2A2A2A3
A3A3A4A4A4A4A5A5A5A5A6A6A6A7A7A7A7A8A8A8A8A9A9A9AAAAAAAAABABABABACACACADADADADAE
AEAEAFAFAFAFB0B0B0B0B1B1B1B2B2B2B2B3B3B3B3B4B4B4B5B5B5B5B6B6B6B6B7B7B7B8B8B8B8B9
B9B9B9BABABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBEBFBFBFC0C0C0C0C1C1C1C1C2C2C2C3C3C3C3C4
C4C4C4C5C5C5C6C6C6C6C7C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCCCDCDCDCECECECECF
CFCFCFD0D0D0D1D1D1D1D2D2D2D2D3D3D3D4D4D4D4D5D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DA
DADADADBDBDBDCDCDCDCDDDDDDDDDEDE
>
<
3A3A3A39393939383838383737373737363636363535353535343434343333333332323232323131
313130303030302F2F2F2F2E2E2E2E2D2D2D2D2D2C2C2C2C2B2B2B2B2B2A2A2A2A29292929282828
282827272727262626262625252525242424242323232323222222222121212121202020201F1F1F
1F1E1E1E1E1E1D1D1D1D1C1C1C1C1C1B1B1B1B1A1A1A1A1919191919181818181717171717161616
1615151515141414141413131313121212121211111111101010100F0F0F0F0F0E0E0E0E0D0D0D0D
0D0C0C0C0C0B0B0B0B0A0A0A0A0A0909090908080808080707070706060606050505050504040404
03030303030202020201010101000000
>
4 %_Br
<
02040607090A0B0D0E0F101213141617191A1C1D1E1F202122232425262728292A2B2C2D2D2E2F30
3132333334353637383839393A3B3B3C3D3D3E3F3F404041424243444445454647474849494A4B4C
4D4D4E4F505152545556575A5B5C5F61626467696B6C6F717375787A7C7D8082838587888A8C8E8F
909294959698999B9C9E9FA0A1A3A4A5A6A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9B9BBBBBCBD
BEBFC0C0C1C2C2C3C4C5C6C6C7C8C8C9C9CACACBCBCCCCCCCDCDCECECFCFCFCFD0D0D0D0D1D1D1D1
D2D2D2D2D3D3D3D3D4D4D4D4D4D4D4D4D5D4D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5D5
>
<
BEBEBDBDBCBCBBBBBBBBBABABABAB8B8B8B7B6B6B5B5B4B3B3B2B1B1B1AFAFAFAEADACACACAAA9A9
A8A6A6A5A5A3A3A2A09F9F9E9C9C9B9A98979796949392918F8E8D8D8A898886858483807F7F7E7B
7A79787675747371706F6F6C6C6B6968686765656464626161605F5E5E5E5D5C5C5C5A5A5A585858
5856565655545453535252515150504F4F4E4E4D4D4C4C4B4A4A4949474747474545454543434242
414040403E3E3E3D3C3C3C3A3A3A39383838373636363634343434323232303030302E2E2E2E2C2C
2C2C2A2A2A292828272725252523232323212121211F1F1F1F1D1D1D1D1C1C1C1C1A1A
>
1
<
0000000000010101010202020203030404040505060607070809090A0A0B0C0D0D0E0F1010121313
1416161718191A1B1D1E1F2021222324262728292B2C2D2E30313234353637393A3B3C3E3F404141
4243444546464748484949494949484848484747474644444443414140403E3E3D3D3B3B3A383837
3735343434323131302E2E2E2E2C2B2B2B29282827262525232322222020201F1E1D1D1D1B1B1B1B
19191919171717151515151313131311111111100F0F0F0E0E0E0D0C0C0C0B0B0B0B0A0A0A090909
0808080807070707070706060605050505040404040404040403030303020202020202
>
<
EAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3
C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B
9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776757473
7271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B
4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423
2221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100
>
<
5B5B5C5C5C5C5D5D5D5D5E5E5E5E5F5F5F5F60606060616161626262626363636364646464656565
656666666667676768686868696969696A6A6A6A6B6B6B6B6C6C6C6C6D6D6D6E6E6E6E6F6F6F6F70
707070717171717272727273737374747474757575757676767677777777787878787979797A7A7A
7A7B7B7B7B7C7C7C7C7D7D7D7D7E7E7E7E7F7F7F7F80808081818181828282828383838384848484
858585858686868787878788888888898989898A8A8A8A8B8B8B8B8C8C8C8D8D8D8D8E8E8E8E8F8F
8F8F909090909191919192929293939393949494949595959596969696979797979898
>
<
0C0C0C0D0D0D0D0D0E0E0E0E0E0F0F0F0F0F10101010101111111111121212121212131313131314
14141414151515151516161616161717171717181818181819191919191A1A1A1A1A1B1B1B1B1B1C
1C1C1C1C1D1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F2020202020212121212122222222222323232323
242424242425252525252626262626272727272728282828282929292929292A2A2A2A2A2B2B2B2B
2B2C2C2C2C2C2D2D2D2D2D2E2E2E2E2E2F2F2F2F2F30303030303131313131323232323233333333
33343434343434353535353536363636363737373737383838383839393939393A3A3A
>
4 %_Br
<
06060505060505040403050404040303050504040404050504040404030404040303030404030202
01030202020202030303020101010201010100000101000000000000000000000101010000000202
01010100000101010000000100000000000000000000000000000000000000000000000000000000
000002020202020203030302
>
<
17191B1C1D1F202223252628292B2D2E2F3132343638383A3C3D3E40414244454648494A4C4D4F50
5152545557585A5B5C5D5F60616364656668696A6B6D6E6F71727374767778797A7C7D7F80818283
858687888A8B8C8E8F9091929394959698999A9B9C9D9E9FA1A2A3A4A5A6A7A9AAABACAEAFB0B1B2
B3B4B5B6B6B8B9BABBBCBDBE
>
<
EAEAEAEBECECECECECECEDEDEDEDEDEDEEEEEEEEEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F1F1F1F2F2F2F2F2F2F2F2F3F3F3F3F3F3F4F4F4F3F3F3F4F4F4F5F5F4F5F5F5F6F6F6F7F7
F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9FAFAFAFAF9F9F9FAFAFAFAFBFAFBFCFCFC
FCFCFDFEFEFEFEFEFFFFFFFF
>
0.000031
<
FFFFFFFFFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9
F9F8F8F8F8F8F8F7F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F3F2F2
F2F2F2F2F2F1F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEEEEEDEDEDEDEDEDECECECEC
ECECEBEBEBEBEBEBEAEAEAEA
>
<
DEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7
B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F
8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867
666564636261605F5E5D5C5B
>
<
00000000000001010101010101010101010202020202020202020202030303030303030303030304
04040404040404040404050505050505050505050506060606060606060606070707070707070707
0707080808080808080808080809090909090909090909090A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B
0B0B0B0B0B0B0C0C0C0C0C0C
>
4 %_Br
<
D5D5D4D4D4D4D3D3D3D3D2D2D2D1D1D1D1D0D0D0D0CFCFCFCFCECECECDCDCDCCCCCBCBCBCACACAC9
C9C8C8C8C7C7C7C6C6C5C5C5C4C4C3C3C2C2C2C1C1C0C0C0BFBEBEBDBDBCBBBBBBBAB9B9B9B8B8B7
B7B7B6B5B5B5B4B4B3B3B2B1B1B1B0AFAFAEAEAEADACACACABAAA9A9A9A8A7A7A7A6A5A5A5A4A3A3
A3A2A1A0A0A09F9F9E9E9D9D9D9C9B9A9A9A99999897979796959595949393929191908F8F8E8D8D
8C8B8B8A89898888888786868585858483838281818080807F7F7E7D7D7C7B7B7A7A797878787877
7676757574737372727171706F6F6E6E6D6D6C6B6B6A6A6969686867656564646363626261616060
5F5F5E5E5D5D5C5B5B5959585857575756565555545453535252515150504F4F4E4E4E4D4D4B4B4A
4A494949484846464545454444434342424241414040403E3E3D3D3D3C3C3B3B3B3A3A3A39393738
3836363635353534343333333131313030302E2E2F2D2D2D2C2C2C2A2A2A2A292929282828262626
2625252523232323222222212121211F1F20201E1E1E1E1D1D1D1D1C1C1C1C1B1B1B1B1A1A1A1A1A
181818181717171717161616161614141414141313131313131212121212111111111111110F0F0F
0F0F0F0E0E0E0E0E0E0E0C0D0D0D0D0D0D0D0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0909
09090909090909090909070707070707070707070707070707070707070706060606060606060606
060606060606060606060606060606060606
>
<
1A1A18181818171717171515151313131312121212101111110F0F0F0F0D0E0E0C0C0C0C0A0A0A0B
09090909080808080606070705050505040404040402030303010202020001010100000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001010100000102020200010101020201
01010202030101020203030203030303040203040405050503040405060606040505060606040505
06060606050505060607070806060606070708060707080809090907080809090A0A0A090909090A
0A0B0B090A0A0B0B0C0C0C0B0B0C0C0C0C0C0D0D0C0C0C0D0D0E0E0E0E0C0D0D0D0E0E0E0F0F0F0E
0E0E0E0E0F0F0F10100F0F0F10101010101011110F10101010101011111111101010101010111111
11121210111111111111111212121213131111121212121212121213131313121212121313131313
13131313141414141313131313131414141414151515151515151514141414141414141414151515
15151516161616161616171515151515151516161616161616161617171717171717171717171818
18171717171716161616171717171717171717171717171717171717171717171717171717171717
171717171717171717171717171717171717
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFEFEFEFEFEFEFDFDFDFDFDFEFDFDFDFDFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFBFBFB
FBFBFBFBFAFAFAFAFAF9FAFAF9F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7
F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4
F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1
F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEF
EFEFEFEFEEEEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECEC
ECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
>
<
02020202020202020202010102010101010101010101010101010101010000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000
>
<
000102030405060708090A0B0C0D0E0F10111213141516161718191A1B1C1D1E1F20212223242526
262728292A2B2C2D2E2F3030313233343536373838393A3B3C3D3E3F3F4041424344454546474849
4A4A4B4C4D4E4F4F5051525353545556575858595A5B5C5C5D5E5F5F606162636364656666676869
696A6B6C6C6D6E6F6F707172727374757576777778797A7A7B7C7C7D7E7F7F808181828383848585
8687878889898A8B8B8C8D8D8E8F8F9091919293939495959696979898999A9A9B9B9C9D9D9E9E9F
A0A0A1A1A2A3A3A4A4A5A5A6A7A7A8A8A9A9AAABABACACADADAEAEAFB0B0B1B1B2B2B3B3B4B4B5B5
B6B6B7B7B8B8B9BABABBBBBCBCBDBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C6C7C7C8C8C9
C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D2D3D3D4D4D4D5D5D6D6D6D7D7D7D8D8D9D9
D9DADADADBDBDBDCDCDDDDDDDEDEDEDFDFDFE0E0E0E1E1E1E2E2E2E3E3E3E3E4E4E4E5E5E5E6E6E6
E6E7E7E7E8E8E8E8E9E9E9EAEAEAEAEBEBEBEBECECECECEDEDEDEDEEEEEEEEEFEFEFEFF0F0F0F0F0
F1F1F1F1F2F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F5F6F6F6F6F6F7F7F7F7F7F7F7F8F8F8
F8F8F8F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFCFCFDFD
FDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
9898999999999A9A9A9A9B9B9B9C9C9C9C9D9D9D9D9E9E9E9E9F9F9F9FA0A0A0A1A1A1A1A2A2A2A2
A3A3A3A3A4A4A4A4A5A5A5A5A6A6A6A6A7A7A7A7A7A8A8A8A8A9A9A9A9AAAAAAAAABABABABACACAC
ACACADADADADAEAEAEAEAEAFAFAFAFB0B0B0B0B0B1B1B1B1B2B2B2B2B2B3B3B3B3B3B4B4B4B4B5B5
B5B5B5B6B6B6B6B6B7B7B7B7B7B8B8B8B8B8B9B9B9B9B9BABABABABABBBBBBBBBBBCBCBCBCBCBCBD
BDBDBDBDBEBEBEBEBEBEBFBFBFBFBFC0C0C0C0C0C0C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C4
C4C4C4C4C4C5C5C5C5C5C5C6C6C6C6C6C6C7C7C7C7C7C7C7C8C8C8C8C8C8C8C9C9C9C9C9C9CACACA
CACACACACBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCECECECECECECECECFCFCFCFCF
CFCFCFD0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2D2D2D2D3D3D3D3D3D3D3D3D3D3D4
D4D4D4D4D4D4D4D4D4D5D5D5D5D5D5D5D5D5D5D5D6D6D6D6D6D6D6D6D6D6D6D7D7D7D7D7D7D7D7D7
D7D7D7D8D8D8D8D8D8D8D8D8D8D8D8D8D8D9D9D9D9D9D9D9D9D9D9D9D9D9D9DADADADADADADADADA
DADADADADADADADADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDCDCDCDCDCDCDCDCDCDCDCDC
DCDCDCDCDCDCDCDCDCDCDCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDE
DEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDE
>
<
3A3A3A39393939383838383837373737363636363635353535343434343433333333333232323231
3131313130303030302F2F2F2F2F2E2E2E2E2E2D2D2D2D2D2C2C2C2C2C2B2B2B2B2B2A2A2A2A2A29
29292929292828282828272727272726262626262625252525252424242424242323232323232222
2222222221212121212020202020201F1F1F1F1F1F1F1E1E1E1E1E1E1D1D1D1D1D1D1C1C1C1C1C1C
1B1B1B1B1B1B1B1A1A1A1A1A1A1A1919191919191918181818181818171717171717171616161616
16161515151515151514141414141414141313131313131313121212121212121211111111111111
111110101010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0C0C
0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A09090909090909090909
09080808080808080808080808080707070707070707070707070706060606060606060606060606
06060505050505050505050505050505050504040404040404040404040404040404040403030303
03030303030303030303030303030303020202020202020202020202020202020202020202020202
02020201010101010101010101010101010101010101010101010101010101010101010101010101
01000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000
>
4 %_Br
[
0.834714 0.101381 1 0.007813 0 0.596078 0.227451 2 50 100 %_BS
%_0.834714 0.101381 1 0.007813 0 0.596078 0.227451 2 50 100 Bs
0.008301 0.746029 1 0.000031 0.917647 0.356863 0.047059 2 50 80.117 %_BS
%_0.008301 0.746029 1 0.000031 0.917647 0.356863 0.047059 2 50 80.117 Bs
0.022705 0.091249 0.917052 0.000031 1 0.870588 0 2 50 64 %_BS
%_0.022705 0.091249 0.917052 0.000031 1 0.870588 0 2 50 64 Bs
0.834714 0.101381 1 0.007813 0 0.596078 0.227451 2 50 47 %_BS
%_0.834714 0.101381 1 0.007813 0 0.596078 0.227451 2 50 47 Bs
0.008301 0.746029 1 0.000031 0.917647 0.356863 0.047059 2 50 30 %_BS
%_0.008301 0.746029 1 0.000031 0.917647 0.356863 0.047059 2 50 30 Bs
0.022705 0.091249 0.917052 0.000031 1 0.870588 0 2 50 15 %_BS
%_0.022705 0.091249 0.917052 0.000031 1 0.870588 0 2 50 15 Bs
0.834714 0.101381 1 0.007813 0 0.596078 0.227451 2 28 0 %_BS
%_0.834714 0.101381 1 0.007813 0 0.596078 0.227451 2 28 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Purple Radial)
(Purple Radial) 1 2 Bd
[
<
00000002020304040507070808090A0A0B0B0C0D0C0E0E0F10101111121213141416161717181919
1A1A1B1B1C1D1D1E1E1F1F2020222223252426252727282829292A2A2B2B2C2C2E2D2F2E30303131
33333434353536363737383839393A3A3B3B3C3C3D3D3E3E40404141414343454546464747474848
49494B4A4C4C4B4D4D4E4E4F4F4F50505151525252545455555556565858585A5A5B5B5B5C5C5C5D
5D5F5F5F606060616162626263636364646466666667676768686A696A6B6B6B6C6C6C6C6E6E6E6F
6F6F70707072727273737373757575767676787878787979797A7A7A7A7C7C7C7C7D7D7D7D7E7E7E
7E80808080818181818282828283838383858585858586868686878787878788888888888A8A8A8A
8A8B8B8B8B8B8C8D8D8D8D8D8D8F8F8E8E8F8F909090909090919191919191919393939393929293
94949494949494949495959595959596959597979797979797979797979698989898989898989898
989898989898989899999999999A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A
>
<
0000020304050608090A0C0D0F101112131416171817191A1B1C1D1E1F2122232526272928292A2C
2D2E2F303132343334353738393B3C3C3C3E3F40414342434446464847494A4B4C4E4D4E4F515254
535556575858595A5B5D5C5D5E605F6161636264656666676869696A6C6D6D6E7070707173737475
7676777878797A7B7B7C7E7D7F80808182828384848586868788888A898B8C8C8E8F8F9091919292
93949495959697979898999B9A9C9C9D9D9E9E9EA09FA1A1A2A2A3A3A4A5A5A6A6A7A7A9A8AAAAAB
ABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B5B6B6B8B7B9B9BABABABBBBBCBCBEBEBDBFBF
C0C0C0C1C1C2C2C2C3C3C4C4C4C6C6C6C7C7C8C8C8C9C9C9CACACACCCCCCCDCDCDCECECECFCFCFD0
D0D0D0D1D1D1D2D2D2D2D3D3D3D4D4D5D5D6D6D5D5D6D7D7D7D8D8D8D8D9D9D9D9D9DADADADADADB
DBDBDBDBDCDCDCDCDCDDDDDDDDDDDDDEDFDFDFDFDFDFE0E0E0E0E0E0E0E0E1E1E1E1E1E1E1E1E1E2
E2E2E2E2E2E2E2E3E3E3E3E3E3E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4E4
>
0.000031
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000
>
<
FFFEFEFDFDFCFBFBFAF9F9F8F8F7F6F6F5F5F4F3F3F2F2F1F0F0EFEFEEEEEDECECEBEBEAEAE9E8E8
E7E7E6E6E5E4E4E3E3E2E2E1E1E0E0DFDEDEDDDDDCDCDBDBDADAD9D9D8D8D7D7D6D6D5D5D4D4D3D3
D2D2D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C5C5C5C4C4C3C3C2C2C1C1C1C0C0
BFBFBEBEBDBDBDBCBCBBBBBABABAB9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0B0AF
AFAEAEAEADADADACACABABABAAAAAAA9A9A9A8A8A8A7A7A7A6A6A5A5A5A4A4A4A3A3A3A3A2A2A2A1
A1A1A0A0A09F9F9F9E9E9E9E9D9D9D9C9C9C9B9B9B9B9A9A9A999999999898989897979797969696
96959595959494949493939393929292929191919191909090908F8F8F8F8F8E8E8E8E8E8D8D8D8D
8D8C8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A898989898989888888888888888787878787878787
86868686868686868685858585858585858584848484848484848484848483838383838383838383
83838383838383838282828282828282828282828282828282828282828282
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDDDCDBDA
D9D8D7D6D5D4D3D3D2D1D0CFCECDCCCCCBCAC9C8C7C6C6C5C4C3C2C1C1C0BFBEBDBCBCBBBAB9B8B7
B7B6B5B4B3B3B2B1B0AFAFAEADACACABAAA9A9A8A7A6A6A5A4A3A3A2A1A0A09F9E9D9D9C9B9B9A99
989897969695949393929191908F8F8E8D8D8C8B8B8A898988878786868584848382828180807F7F
7E7D7D7C7C7B7A7A7979787777767675757473737272717170706F6F6E6D6D6C6C6B6B6A6A696968
68676766666565646463636262616160605F5F5E5E5E5D5D5C5C5B5B5A5A5A595958585757575656
555555545453535352525151515050504F4F4E4E4E4D4D4D4C4C4C4B4B4B4A4A4A49494948484847
47474746464645454545444444434343434242424241414141404040403F3F3F3F3F3E3E3E3E3E3D
3D3D3D3D3C3C3C3C3C3B3B3B3B3B3B3A3A3A3A3A3A3A393939393939393938383838383838383837
37373737373737373737373737363636363636363636363636363636363636
>
<
FFFEFEFDFDFCFCFBFAFAF9F9F8F8F7F7F6F5F5F4F4F3F3F2F2F1F1F0EFEFEEEEEDEDECECEBEBEAEA
E9E9E8E8E7E7E6E6E5E5E4E4E3E3E2E2E1E1E0E0DFDFDEDEDDDDDCDCDBDBDADAD9D9D8D8D7D7D7D6
D6D5D5D4D4D3D3D2D2D2D1D1D0D0CFCFCECECECDCDCCCCCBCBCBCACAC9C9C8C8C8C7C7C6C6C6C5C5
C4C4C3C3C3C2C2C1C1C1C0C0C0BFBFBEBEBEBDBDBCBCBCBBBBBBBABAB9B9B9B8B8B8B7B7B7B6B6B6
B5B5B5B4B4B3B3B3B2B2B2B1B1B1B0B0B0AFAFAFAFAEAEAEADADADACACACABABABABAAAAAAA9A9A9
A8A8A8A8A7A7A7A6A6A6A6A5A5A5A5A4A4A4A3A3A3A3A2A2A2A2A1A1A1A1A0A0A0A09F9F9F9F9E9E
9E9E9D9D9D9D9D9C9C9C9C9B9B9B9B9B9A9A9A9A9A99999999999898989898979797979797969696
96969595959595959494949494949493939393939393929292929292929191919191919191909090
9090909090908F8F8F8F8F8F8F8F8F8F8E8E8E8E8E8E8E8E8E8E8E8E8E8D8D8D8D8D8D8D8D8D8D8D
8D8D8D8D8D8D8D8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C
>
4 %_Br
[
0.000031 0.000031 0.000031 0.000031 1 1 1 2 30 63.1579 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 30 63.1579 Bs
0.602258 0.894011 0.000031 0.000824 0.509804 0.211765 0.54902 2 50 100 %_BS
%_0.602258 0.894011 0.000031 0.000824 0.509804 0.211765 0.54902 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Super Soft Black Vignette)
(Super Soft Black Vignette) 1 3 Bd
[
0.760098
0.688655
0.631525
0.871
0.086275
0.078431
0.070588
4 %_Br
0.760098
0.688655
0.631525
0.871
0.086275
0.078431
0.070588
4 %_Br
[
0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 56.0729 57.4443 %_BS
%_0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 56.0729 57.4443 Bs
0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 31.8603 79.7713 %_BS
%_0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 31.8603 79.7713 Bs
0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 50 100 %_BS
%_0.760098 0.688655 0.631525 0.871 0.086275 0.078431 0.070588 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 26)
(Unnamed gradient 26) 0 3 Bd
[
<
00000001010101010202030303030404040404040505050505050606060606060607080707070707
0709090909090909090A0A0A0A090A0909090B0A0A0B0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0A
0A0C0C0C0C0C0C0C0C0C0C0C0C0C0C0E0D0D0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E
0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E
0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
0F0F0F0F0F0F0F0F0F0F0F0F0F0F
>
<
0000020304040506070808090A0C0D0C0E0F11101112121314161516181719181A1A1A1B1D1C1E1E
1F1E2021212323242425252626282729292A292B2A2A2C2C2D2D2E2E2E2F2F303030313131323234
343334343436363636373737383838383939393B3B3A3A3C3C3C3C3D3D3D3D3D3E3D3D3D3F3F3F3E
3E3E404040403F414141414141424242424242414343434343434242444444444444444444454545
45454545454545464646464646464646464646464647474747474747474747474747474747474747
48484848484848484848484848484848484848484848484848484848484848484848494949494949
49494949494949494949494949494949494949494949494949494949494949494949494949494949
49494949494949494949494949494949494949494949494949494949494949494949494949494949
49494949494949494949494949494949494949494949494949494949494949494949494949494949
4949494949494949494949494949
>
<
00010406090C0E111316191B1E20222426282A2B2E30333436373A3C3D4041444447484A4B4D4F50
5254545758595A5C5E5F6062636465666768696B6D6E6F70717273747576767778797A7C7D7E7F7F
8082828484848687878889898A8B8C8D8D8D8F8F8F909291929293939495959696979799989A9A9B
9B9B9C9C9D9D9E9E9E9F9FA0A0A0A1A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A6A6A6A7A7A7A7A8A8A8
A8A8A9A9A9A9A9A9A9A9A9A9AAAAAAAAAAABABABABABABABACACACACACACACADADADADADADADADAD
ADADADADADADADADADADADADAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEB0B0B0B0B0B0B0AFAFAFAFAFAF
AFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0
B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0
B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0
B0B0B0B0B0B0B0B0B0B0B0B0B0B0
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000001010000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101
>
<
FFFFFFFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAFAF9F9F9F9F9F9F9
F9F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5
F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2
F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1
F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F0F0F0F0F0F0F0F0F0F0F0
>
<
FFFEFDFCFBFBFAF9F8F7F7F6F5F4F3F3F2F1F0F0EFEEEEEDECEBEBEAE9E9E8E8E7E6E6E5E4E4E3E3
E2E2E1E0E0DFDFDEDEDDDDDCDCDBDBDADAD9D9D8D8D8D7D7D6D6D5D5D5D4D4D3D3D3D2D2D2D1D1D0
D0D0CFCFCFCECECECECDCDCDCCCCCCCCCBCBCBCACACACAC9C9C9C9C8C8C8C8C8C7C7C7C7C6C6C6C6
C6C6C5C5C5C5C5C4C4C4C4C4C4C3C3C3C3C3C3C3C2C2C2C2C2C2C2C2C1C1C1C1C1C1C1C1C1C0C0C0
C0C0C0C0C0C0C0BFBFBFBFBFBFBFBFBFBFBFBFBFBFBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBE
BDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBCBCBCBCBCBC
BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC
BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC
BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC
BCBCBCBCBCBCBCBCBCBCBCBCBCBC
>
<
FFFDFBF9F7F5F3F1EFEDEBE9E7E5E3E2E0DEDCDBD9D7D5D4D2D1CFCDCCCAC9C7C6C4C3C1C0BFBDBC
BAB9B8B6B5B4B3B1B0AFAEACABAAA9A8A7A6A5A3A2A1A09F9E9D9C9B9A9999989796959493929191
908F8E8D8D8C8B8A8A8988888786858584848382828180807F7F7E7E7D7C7C7B7B7A7A7979787877
77777676757574747473737272727171717070706F6F6F6E6E6E6D6D6D6D6C6C6C6B6B6B6B6A6A6A
6A6A6969696968686868686867676767676666666666666665656565656565646464646464646464
63636363636363636363636362626262626262626262626262626261616161616161616161616161
61616161616161616161616161616161606060606060606060606060606060606060606060606060
60606060606060606060606060606060606060606060606060606060606060606060606060606060
60606060606060606060606060606060606060606060606060606060606060606060606060606060
6060606060606060606060606060
>
4 %_Br
0.000031
0.000031
0.000031
0.000031
1
1
1
4 %_Br
[
0.057923 0.287663 0.691829 0.002869 0.941176 0.737255 0.376471 2 50 100 %_BS
%_0.057923 0.287663 0.691829 0.002869 0.941176 0.737255 0.376471 2 50 100 Bs
1 0 13 45 %_BS
%_1 0 13 45 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 30)
(Unnamed gradient 30) 1 2 Bd
[
<
0D0D0C0C0D0D0D0C0C0C0D0D0D0C0D0D0C0C0C0E0E0D0D0E0E0E0E0F0E0E0E0F0E0E0F0E0E0E0F0F
>
<
19191A1A1B1B1D1F1F212223232526282A2A2C2D2F31333434353738393B3D3E3F41424345474849
>
<
CECECDCDCDCDCCCCCCCBCACAC9C9C9C8C7C6C6C6C5C4C3C2C2C1C0BFBEBDBBBABAB8B8B6B5B4B2B0
>
<
00000000000000000000000000000000000000000000000101010101010100010101010101010101
>
<
F9F9F9F9F8F8F8F8F8F8F7F7F7F7F6F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F3F2F2F2F1F1F1F1F0F0
>
<
DCDCDBDBDADAD9D8D8D7D6D5D5D4D3D2D1D1D0CFCECDCCCBCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBC
>
<
424243434444454646474848494A4A4B4C4D4D4E4F5051525253545556575859595A5B5C5D5E5F60
>
4 %_Br
[
0.049042 0.096712 0.808591 0.000031 0.976471 0.862745 0.258824 2 57.3034 0 %_BS
%_0.049042 0.096712 0.808591 0.000031 0.976471 0.862745 0.258824 2 57.3034 0 Bs
0.057923 0.287663 0.691829 0.002869 0.941176 0.737255 0.376471 2 50 100 %_BS
%_0.057923 0.287663 0.691829 0.002869 0.941176 0.737255 0.376471 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 31)
(Unnamed gradient 31) 0 3 Bd
[
<
0F0F0E0E0E0F0E0E0F0E0E0E0F0D0E0E0E0F0D0D0E0E0E0C0C0C0C0D0D0D0C0C0C0D0D0D0D0D0C0C
0C0C0C0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
>
<
494847454342413F3D3D3B3938383735343233312F2F2D2C2C2A2A28262625252523232221202120
1F1F1F1D1D1D1D1B1B1B1B1C1A1A1A1A1A1A1A1A191919191919191919191919191919
>
<
B0B2B4B5B6B8B8BABBBBBDBEBFC0C0C1C2C3C3C4C5C5C6C5C6C7C7C8C8C9C9C9C9C9CACACBCBCBCC
CCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECECECE
>
<
01010101010101010100010101010101010100000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000
>
<
F0F0F1F1F1F1F2F2F2F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F8F8
F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9
>
<
BCBDBEBFC0C1C2C3C4C5C6C7C8C8C9CACBCCCCCDCECECFD0D0D1D1D2D3D3D4D4D4D5D5D6D6D7D7D7
D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDBDBDBDCDCDCDCDCDCDCDCDCDCDCDCDCDCDC
>
<
605F5E5D5C5B5A595858575655545453525151504F4F4E4E4D4C4C4B4B4A4A494949484847474746
4646464545454444444444444343434343434343424242424242424242424242424242
>
4 %_Br
<
0D0C0D0D0C0C0D0D0C0D0D0C0C0E0E0D0F0E0E0F0E0E0E0F0E0E0F0E0E0E0F0F
>
<
191A1B1D1F2122232526282A2C2D2F3133353738393B3D3D3F41424345474849
>
<
CECDCDCCCCCBCAC9C9C8C7C6C5C5C4C3C3C2C1C0BFBEBDBBBAB8B8B6B5B4B2B0
>
<
0000000000000000000000000000000001010101010100010101010101010101
>
<
F9F9F8F8F8F8F7F7F7F6F6F6F6F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F1F0F0
>
<
DCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBC
>
<
42434445464748494A4B4C4D4E4F50515152535455565758595A5B5C5D5E5F60
>
4 %_Br
[
0.049042 0.096712 0.808591 0.000031 0.976471 0.862745 0.258824 2 50 100 %_BS
%_0.049042 0.096712 0.808591 0.000031 0.976471 0.862745 0.258824 2 50 100 Bs
0.057923 0.287663 0.691829 0.002869 0.941176 0.737255 0.376471 2 23.7288 50 %_BS
%_0.057923 0.287663 0.691829 0.002869 0.941176 0.737255 0.376471 2 23.7288 50 Bs
0.049042 0.096712 0.808591 0.000031 0.976471 0.862745 0.258824 2 50 0 %_BS
%_0.049042 0.096712 0.808591 0.000031 0.976471 0.862745 0.258824 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Laguna)
(Laguna) 0 3.1914 84.1563 84.791 [
%AI3_Tile
(0 O 0 R 0.001648 0.996399 0.976776 0.001984 0.890196 0.023529 0.07451 Xa
 0.001648 0.996399 0.976776 0.001984 0.890196 0.023529 0.07451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 10 M []0 d0 XR
42.0781 30.3906 m
12.2227 12.8779 9.0488 12.4082 V
7.2871 14.1709 0 30.3906 Y
13.1641 20.5186 29.1484 23.3389 42.0781 30.3906 C
f
42.0781 57.5908 m
12.2227 40.0781 9.0488 39.6094 V
7.2871 41.3711 0 57.5908 Y
13.1641 47.7178 29.1484 50.5391 42.0781 57.5908 C
f
42.0781 84.791 m
12.2227 67.2773 9.0488 66.8096 V
7.2871 68.5703 0 84.791 Y
13.1641 74.918 29.1484 77.7402 42.0781 84.791 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.602258 0.894011 0.000031 0.000824 0.509804 0.211765 0.54902 Xa
 0.602258 0.894011 0.000031 0.000824 0.509804 0.211765 0.54902 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 10 M []0 d0 XR
84.1563 30.3906 m
54.3008 12.8779 51.127 12.4082 V
49.3652 14.1709 42.0781 30.3906 Y
55.2422 20.5186 71.2266 23.3389 84.1563 30.3906 C
f
84.1563 57.5908 m
54.3008 40.0781 51.127 39.6094 V
49.3652 41.3711 42.0781 57.5908 Y
55.2422 47.7178 71.2266 50.5391 84.1563 57.5908 C
f
84.1563 84.791 m
54.3008 67.2773 51.127 66.8096 V
49.3652 68.5703 42.0781 84.791 Y
55.2422 74.918 71.2266 77.7402 84.1563 84.791 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.834714 0.101381 1 0.007813 0 0.596078 0.227451 Xa
 0.834714 0.101381 1 0.007813 0 0.596078 0.227451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 10 M []0 d0 XR
21.0391 33.582 m
19.2773 33.582 17.8477 32.1523 17.8477 30.3906 c
17.8477 28.6289 19.2773 27.2002 21.0391 27.2002 c
22.8008 27.2002 24.2285 28.6289 24.2285 30.3906 c
24.2285 32.1523 22.8008 33.582 21.0391 33.582 c
f
21.0391 6.3818 m
19.2773 6.3818 17.8477 4.9531 17.8477 3.1914 c
17.8477 1.4287 19.2773 0 21.0391 0 c
22.8008 0 24.2285 1.4287 24.2285 3.1914 c
24.2285 4.9531 22.8008 6.3818 21.0391 6.3818 c
f
21.0391 60.7822 m
19.2773 60.7822 17.8477 59.3525 17.8477 57.5908 c
17.8477 55.8291 19.2773 54.3994 21.0391 54.3994 c
22.8008 54.3994 24.2285 55.8291 24.2285 57.5908 c
24.2285 59.3525 22.8008 60.7822 21.0391 60.7822 c
f
21.0391 87.9824 m
19.2773 87.9824 17.8477 86.5547 17.8477 84.791 c
17.8477 83.0283 19.2773 81.5996 21.0391 81.5996 c
22.8008 81.5996 24.2285 83.0283 24.2285 84.791 c
24.2285 86.5547 22.8008 87.9824 21.0391 87.9824 c
f
63.1172 33.582 m
61.3555 33.582 59.9258 32.1523 59.9258 30.3906 c
59.9258 28.6289 61.3555 27.2002 63.1172 27.2002 c
64.8789 27.2002 66.3066 28.6289 66.3066 30.3906 c
66.3066 32.1523 64.8789 33.582 63.1172 33.582 c
f
63.1172 6.3818 m
61.3555 6.3818 59.9258 4.9531 59.9258 3.1914 c
59.9258 1.4287 61.3555 0 63.1172 0 c
64.8789 0 66.3066 1.4287 66.3066 3.1914 c
66.3066 4.9531 64.8789 6.3818 63.1172 6.3818 c
f
63.1172 60.7822 m
61.3555 60.7822 59.9258 59.3525 59.9258 57.5908 c
59.9258 55.8291 61.3555 54.3994 63.1172 54.3994 c
64.8789 54.3994 66.3066 55.8291 66.3066 57.5908 c
66.3066 59.3525 64.8789 60.7822 63.1172 60.7822 c
f
63.1172 87.9824 m
61.3555 87.9824 59.9258 86.5547 59.9258 84.791 c
59.9258 83.0283 61.3555 81.5996 63.1172 81.5996 c
64.8789 81.5996 66.3066 83.0283 66.3066 84.791 c
66.3066 86.5547 64.8789 87.9824 63.1172 87.9824 c
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.602258 0.894011 0.000031 0.000824 0.509804 0.211765 0.54902 Xa
 0.602258 0.894011 0.000031 0.000824 0.509804 0.211765 0.54902 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 10 M []0 d0 XR
0 3.1914 m
29.8535 20.7041 33.0273 21.1738 V
34.79 19.4111 42.0781 3.1914 Y
28.9141 13.0645 12.9277 10.2422 0 3.1914 C
f
0 30.3906 m
29.8535 47.9033 33.0273 48.374 V
34.79 46.6104 42.0781 30.3906 Y
28.9141 40.2646 12.9277 37.4434 0 30.3906 C
f
0 57.5908 m
29.8535 75.1035 33.0273 75.5752 V
34.79 73.8105 42.0781 57.5908 Y
28.9141 67.4648 12.9277 64.6436 0 57.5908 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.001648 0.996399 0.976776 0.001984 0.890196 0.023529 0.07451 Xa
 0.001648 0.996399 0.976776 0.001984 0.890196 0.023529 0.07451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 10 M []0 d0 XR
42.0781 3.1914 m
71.9316 20.7041 75.1055 21.1738 V
76.8691 19.4111 84.1563 3.1914 Y
70.9922 13.0645 55.0059 10.2422 42.0781 3.1914 C
f
42.0781 30.3906 m
71.9316 47.9033 75.1055 48.374 V
76.8691 46.6104 84.1563 30.3906 Y
70.9922 40.2646 55.0059 37.4434 42.0781 30.3906 C
f
42.0781 57.5908 m
71.9316 75.1035 75.1055 75.5752 V
76.8691 73.8105 84.1563 57.5908 Y
70.9922 67.4648 55.0059 64.6436 42.0781 57.5908 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 1)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8177 8177 m
-8177 8118.0254 L
-8161.4902 8118.0254 L
-8161.4902 8177 L
-8177 8177 L
n
0 O
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 Xa
10 M-8177 8128.0586 m
-8177 8127.5742 L
-8161.4878 8127.5742 L
-8161.4878 8128.0586 L
-8177 8128.0586 L
f
-8177 8145.3838 m
-8177 8144.8965 L
-8161.4878 8144.8965 L
-8161.4878 8145.3838 L
-8177 8145.3838 L
f
-8176.9995 8130.3682 m
-8176.9995 8129.6494 L
-8161.4878 8129.6494 L
-8161.4878 8130.3682 L
-8176.9995 8130.3682 L
f
-8176.9995 8140.6328 m
-8176.9995 8139.9121 L
-8161.4878 8139.9121 L
-8161.4878 8140.6328 L
-8176.9995 8140.6328 L
f
-8176.9995 8138.4951 m
-8176.9995 8137.4141 L
-8161.4878 8137.4141 L
-8161.4878 8138.4951 L
-8176.9995 8138.4951 L
f
-8176.9995 8132.9395 m
-8176.9995 8131.8594 L
-8161.4878 8131.8594 L
-8161.4878 8132.9395 L
-8176.9995 8132.9395 L
f
-8176.9995 8135.9854 m
-8176.9995 8134.334 L
-8161.4878 8134.334 L
-8161.4878 8135.9854 L
-8176.9995 8135.9854 L
f
*u
1 D
-8161.4888 8144.1455 m
-8176.9995 8144.1455 L
-8176.9995 8143.6816 L
-8176.6514 8143.6816 L
-8176.6514 8142.4844 L
-8176.9995 8142.4844 L
-8176.9995 8142.0215 L
-8161.4888 8142.0215 L
-8161.4888 8142.4844 L
-8161.8408 8142.4844 L
-8161.8408 8143.6846 L
-8161.4888 8143.6846 L
-8161.4888 8144.1455 L
f
0 D
-8173.1255 8143.6846 m
-8172.4199 8143.6846 L
-8172.4199 8142.4844 L
-8173.1255 8142.4844 L
-8173.1255 8143.6846 L
f
-8173.8306 8142.4844 m
-8174.5361 8142.4844 L
-8174.5361 8143.6846 L
-8173.8306 8143.6846 L
-8173.8306 8142.4844 L
f
-8171.7144 8143.6846 m
-8171.0098 8143.6846 L
-8171.0098 8142.4844 L
-8171.7144 8142.4844 L
-8171.7144 8143.6846 L
f
-8170.3042 8143.6846 m
-8169.5986 8143.6846 L
-8169.5986 8142.4844 L
-8170.3042 8142.4844 L
-8170.3042 8143.6846 L
f
-8168.8936 8143.6846 m
-8168.1885 8143.6846 L
-8168.1885 8142.4844 L
-8168.8936 8142.4844 L
-8168.8936 8143.6846 L
f
-8167.4834 8143.6846 m
-8166.7778 8143.6846 L
-8166.7778 8142.4844 L
-8167.4834 8142.4844 L
-8167.4834 8143.6846 L
f
-8166.0718 8143.6846 m
-8165.3672 8143.6846 L
-8165.3672 8142.4844 L
-8166.0718 8142.4844 L
-8166.0718 8143.6846 L
f
-8164.6616 8143.6846 m
-8163.9575 8143.6846 L
-8163.9575 8142.4844 L
-8164.6616 8142.4844 L
-8164.6616 8143.6846 L
f
-8163.2515 8143.6846 m
-8162.5454 8143.6846 L
-8162.5454 8142.4844 L
-8163.2515 8142.4844 L
-8163.2515 8143.6846 L
f
-8175.9463 8143.6846 m
-8175.2407 8143.6846 L
-8175.2407 8142.4844 L
-8175.9463 8142.4844 L
-8175.9463 8143.6846 L
f
*U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 2)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8177 8176.998 m
-8177 8118.0225 L
-8118.0254 8118.0225 L
-8118.0254 8176.998 L
-8177 8176.998 L
n
*u
1 D
0 O
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 Xa
10 M-8150.4902 8136.4453 m
-8148.9678 8137.9678 -8149.5166 8140.9834 -8151.7153 8143.1836 c
-8153.9146 8145.3809 -8156.9302 8145.9297 -8158.4526 8144.4082 c
-8159.9751 8142.8857 -8159.4263 8139.8682 -8157.2271 8137.6709 c
-8155.0288 8135.4717 -8152.0127 8134.9238 -8150.4902 8136.4453 c
f
0 D
-8151.1519 8137.0781 m
-8152.5728 8135.6582 -8155.2241 8136.0059 -8157.0728 8137.8545 c
-8158.9214 8139.7031 -8159.2695 8142.3545 -8157.8486 8143.7754 c
-8156.4282 8145.1953 -8153.7769 8144.8486 -8151.9282 8143 c
-8150.0786 8141.1504 -8149.7314 8138.5 -8151.1519 8137.0781 c
f
*U
-8168.5327 8127.2607 m
-8167.7969 8127.1309 l
-8167.71 8126.4385 l
-8162.9458 8131.9814 l
-8168.5327 8127.2607 l
f
-8157.9409 8124.3145 m
-8158.1235 8122.7266 L
-8157.7002 8122.4512 -8157.3184 8122.1309 -8156.9346 8121.8145 C
-8156.6841 8124.9189 L
-8156.3535 8124.9453 L
-8156.4678 8121.4395 L
-8156.0503 8121.1162 -8155.6089 8120.8213 -8155.0913 8120.6152 C
-8155.1235 8125.7266 L
-8154.9063 8125.7734 L
-8154.5938 8120.4521 L
-8154.2007 8120.3516 -8153.7632 8120.3008 -8153.2642 8120.3213 C
-8154.0376 8129.4463 L
-8152.7666 8120.3594 L
-8152.3359 8120.4063 -8151.96 8120.4746 -8151.6289 8120.5625 C
-8152.4551 8127.334 L
-8152.2998 8127.2109 L
-8151.1465 8120.7148 L
-8150.7471 8120.8633 -8150.4238 8121.0449 -8150.1528 8121.25 C
-8150.7334 8126.0762 L
-8150.4688 8125.9414 L
-8149.7114 8121.6426 L
-8149.2256 8122.1494 -8148.9194 8122.7344 -8148.5127 8123.2822 C
-8149.0713 8125.3496 L
-8148.6001 8125.1709 L
-8148.1338 8123.7383 L
-8147.8096 8124.082 -8147.4063 8124.3945 -8146.8394 8124.6406 c
-8146.8506 8124.6357 -8145.7393 8124.6826 -8145.7466 8124.6533 c
-8145.7959 8124.4375 -8146.6655 8124.2998 -8146.6455 8124.3105 c
-8149.2974 8122.8965 -8148.3232 8120.3301 -8152.8735 8119.873 c
-8156.4072 8119.5176 -8157.2515 8122.75 -8160.0962 8123.0615 c
-8160.1152 8123.0625 -8160.7632 8123.3174 -8160.8442 8123.4502 C
-8160.8486 8123.625 -8160.4595 8123.5186 -8160.2417 8123.4766 c
-8159.6001 8123.3477 -8159.0498 8123.2402 -8158.5728 8122.9912 C
-8158.4023 8124.1914 L
-8157.9409 8124.3145 L
f
-8170.6626 8136.9463 m
-8172.2495 8136.7637 L
-8172.5254 8137.1865 -8172.8462 8137.5693 -8173.1626 8137.9521 C
-8170.0576 8138.2031 L
-8170.0322 8138.5352 L
-8173.5376 8138.4189 L
-8173.8608 8138.8369 -8174.1558 8139.2783 -8174.3618 8139.7959 C
-8169.2505 8139.7637 L
-8169.2031 8139.9814 L
-8174.5249 8140.293 L
-8174.6265 8140.6865 -8174.6758 8141.125 -8174.6558 8141.623 C
-8165.5298 8140.8496 L
-8174.6177 8142.1201 L
-8174.5713 8142.5498 -8174.5024 8142.9277 -8174.4146 8143.2578 C
-8167.6426 8142.4316 L
-8167.7656 8142.5869 L
-8174.2622 8143.7402 L
-8174.1138 8144.1406 -8173.9312 8144.4629 -8173.7271 8144.7344 C
-8168.9014 8144.1533 L
-8169.0352 8144.418 L
-8173.3335 8145.1768 L
-8172.8271 8145.6621 -8172.2417 8145.9688 -8171.6943 8146.375 C
-8169.6274 8145.8145 L
-8169.8066 8146.2871 L
-8171.2383 8146.752 L
-8170.8945 8147.0762 -8170.5825 8147.4814 -8170.3359 8148.0479 c
-8170.3408 8148.0361 -8170.2935 8149.1484 -8170.3242 8149.1416 c
-8170.54 8149.0908 -8170.6768 8148.2227 -8170.6675 8148.2412 c
-8172.0806 8145.5898 -8174.6475 8146.5645 -8175.1045 8142.0127 c
-8175.4595 8138.4805 -8172.2271 8137.6367 -8171.9165 8134.791 c
-8171.9136 8134.7725 -8171.6602 8134.125 -8171.5273 8134.043 C
-8171.3535 8134.0381 -8171.4575 8134.4277 -8171.5015 8134.6455 c
-8171.6294 8135.2871 -8171.7368 8135.8369 -8171.9858 8136.3145 C
-8170.7842 8136.4854 L
-8170.6626 8136.9463 L
f
-8141.0127 8135.2285 m
-8136.2495 8136.6348 -8134.9502 8138.9209 -8134.9746 8140.5654 C
-8134.5366 8137.459 -8132.6558 8139.8652 -8132.1313 8141.0029 C
-8133.0498 8137.416 -8130.4463 8140.5439 -8130.2715 8140.8496 C
-8131.2593 8137.4063 -8138.3955 8134.9404 -8141.0127 8135.2285 C
f
-8146.9775 8134.2197 m
-8150.3242 8128.1738 -8147.4233 8126.5703 -8146.7354 8126.377 c
-8146.9233 8126.4287 -8147.3135 8127.2949 -8147.2026 8127.6367 C
-8146.9482 8127.0928 -8146.4111 8126.8193 -8145.8994 8126.6094 C
-8147.1626 8127.6094 -8147.6943 8130.4111 -8146.9082 8133.9512 c
-8146.9775 8134.2197 l
f
-8149.2222 8134.5254 m
-8151.6035 8132.1016 -8153.0474 8131.2773 -8151.1035 8128.668 c
-8151.2202 8128.8262 -8151.3838 8129.7168 -8151.1758 8130.0117 C
-8151.0942 8129.418 -8150.6626 8128.998 -8150.2358 8128.6455 C
-8151.9395 8132.0732 -8149.2222 8134.5254 y
f
-8141.6577 8133.4199 m
-8141.9897 8131.5615 -8140.4922 8130.4688 -8138.8662 8129.8496 C
-8139.4194 8129.8662 -8140.0176 8129.9307 -8140.4482 8130.3496 C
-8140.4302 8129.9893 -8139.7598 8129.3184 -8139.5654 8129.3359 c
-8140.2778 8129.2744 -8142.4951 8128.8447 -8141.8408 8133.6191 c
-8141.6577 8133.4199 l
f
-8138.5576 8134.1133 m
-8138.1538 8132.7266 -8135.9502 8132.459 V
-8136.5342 8132.2871 -8137.2314 8132.3662 -8137.6626 8132.7852 C
-8137.6455 8132.4258 -8136.8408 8131.7178 -8136.6479 8131.7568 c
-8138.3921 8131.4141 -8138.6782 8133.9072 y
-8138.5576 8134.1133 l
f
-8135.1152 8135.3213 m
-8134.8408 8134.627 -8134.0942 8134.1201 -8133.2646 8134 C
-8133.6475 8133.8975 -8134.0854 8133.9873 -8134.4297 8134.3242 C
-8134.4175 8134.0352 -8133.7744 8133.4863 -8133.6182 8133.502 c
-8135.2729 8133.3496 -8135.1152 8135.3213 Y
f
-8144.5562 8133.4629 m
-8144.6504 8130.1309 -8143.4175 8128.4541 -8141.9761 8127.6514 C
-8142.5264 8127.7148 -8143.1162 8127.8271 -8143.5103 8128.2793 C
-8143.5249 8127.9189 -8142.9087 8127.1953 -8142.7134 8127.1973 c
-8143.4287 8127.1943 -8146.0034 8127.0898 -8144.7866 8133.7109 c
-8144.5562 8133.4629 l
f
-8159.7944 8154.0137 m
-8158.3882 8158.7754 -8156.1006 8160.0762 -8154.4575 8160.0518 C
-8157.5635 8160.4893 -8155.1567 8162.3701 -8154.0195 8162.8945 C
-8157.6074 8161.9766 -8154.4795 8164.5791 -8154.1729 8164.7549 C
-8157.6162 8163.7676 -8160.0825 8156.6309 -8159.7944 8154.0137 C
f
-8160.8022 8148.0488 m
-8166.8481 8144.7002 -8168.4521 8147.6025 -8168.6465 8148.291 c
-8168.5938 8148.1025 -8167.7295 8147.7119 -8167.3857 8147.8242 C
-8167.9297 8148.0781 -8168.2017 8148.6152 -8168.4126 8149.127 C
-8167.4126 8147.8633 -8164.6113 8147.334 -8161.0703 8148.1182 c
-8160.8022 8148.0488 l
f
-8160.4966 8145.8037 m
-8162.9214 8143.4229 -8163.7446 8141.9805 -8166.3535 8143.9229 c
-8166.1968 8143.8066 -8165.3057 8143.6426 -8165.0112 8143.8496 C
-8165.6064 8143.9307 -8166.0239 8144.3633 -8166.3774 8144.79 C
-8162.9487 8143.0879 -8160.4966 8145.8037 y
f
-8161.6025 8153.3682 m
-8163.4614 8153.0361 -8164.5537 8154.5342 -8165.1729 8156.1602 C
-8165.1558 8155.6074 -8165.0918 8155.0098 -8164.6719 8154.5791 C
-8165.0327 8154.5957 -8165.7041 8155.2656 -8165.6865 8155.4609 c
-8165.7485 8154.75 -8166.1777 8152.5313 -8161.4038 8153.1846 c
-8161.6025 8153.3682 l
f
-8160.9087 8156.4688 m
-8162.2959 8156.873 -8162.5649 8159.0762 V
-8162.7354 8158.4922 -8162.6558 8157.7949 -8162.2368 8157.3633 C
-8162.5967 8157.3809 -8163.3042 8158.1865 -8163.2666 8158.3789 c
-8163.6079 8156.6348 -8161.1152 8156.3477 y
-8160.9087 8156.4688 l
f
-8159.7007 8159.9111 m
-8160.3955 8160.1846 -8160.9009 8160.9307 -8161.0234 8161.7617 C
-8161.1265 8161.3789 -8161.0337 8160.9404 -8160.6982 8160.5967 C
-8160.9873 8160.6104 -8161.5361 8161.252 -8161.5215 8161.4082 c
-8161.6729 8159.7529 -8159.7007 8159.9111 Y
f
-8161.5591 8150.4697 m
-8164.8921 8150.377 -8166.5679 8151.6094 -8167.3696 8153.0508 C
-8167.3081 8152.502 -8167.1953 8151.9102 -8166.7422 8151.5146 C
-8167.1035 8151.5029 -8167.8262 8152.1162 -8167.8257 8152.3135 c
-8167.8286 8151.5967 -8167.9321 8149.0234 -8161.3115 8150.2402 c
-8161.5591 8150.4697 l
f
u
u
-8171.0234 8126.709 m
-8171.2856 8126.1953 -8171.0479 8125.6689 -8169.2905 8125.6504 C
-8170.0322 8124.9082 L
-8171.9927 8124.9941 -8172.3423 8126.1777 -8172.1665 8126.7578 c
-8171.9736 8127.3906 -8171.5488 8127.9023 -8171.2085 8128.25 C
-8172.2031 8128.6113 -8172.2505 8129.3916 -8172.0479 8129.79 c
-8171.7729 8130.334 -8171.2998 8130.752 -8170.9487 8131.0176 C
-8171.9448 8131.377 -8171.8623 8132.1133 -8171.6074 8132.457 c
-8171.2856 8132.8906 -8170.8174 8133.2031 -8170.4751 8133.4023 C
-8171.4585 8133.8301 -8171.3022 8134.5234 -8171.0239 8134.8154 c
-8170.6929 8135.166 -8170.2466 8135.3916 -8169.9199 8135.5322 C
-8170.7695 8136.0225 -8170.5537 8136.6318 -8170.2715 8136.8633 c
-8169.9458 8137.1318 -8169.5342 8137.2842 -8169.23 8137.377 C
-8169.9395 8137.9082 -8169.6802 8138.4297 -8169.4014 8138.6074 c
-8169.0698 8138.8174 -8168.6714 8138.9082 -8168.3857 8138.9541 C
-8168.9673 8139.5098 -8168.6768 8139.9482 -8168.4097 8140.0762 c
-8167.9326 8140.3037 -8167.3511 8140.2764 -8167.1768 8140.2813 c
-8166.6343 8140.2959 -8165.8838 8140.125 -8165.4272 8140.0703 c
-8164.3442 8139.9434 -8160.5718 8139.2754 -8158.9023 8139.4385 C
-8159.1704 8139.2285 -8159.1714 8139.2285 v
-8161.1304 8139.041 -8164.0479 8139.4678 -8165.1294 8139.5957 c
-8165.9839 8139.6953 -8167.1182 8139.9951 -8167.9951 8139.7295 c
-8168.2593 8139.6494 -8168.3696 8139.4453 -8167.8906 8139.0215 C
-8167.3135 8139.0732 -8166.5737 8139.002 -8166.1118 8139.0039 c
-8164.9009 8139.0098 -8160.6504 8138.7832 -8158.8311 8139.1895 C
-8159.0986 8138.9209 -8159.0986 8138.9199 v
-8161.2344 8138.4492 -8164.5098 8138.5254 -8165.7202 8138.5186 c
-8166.6758 8138.5137 -8167.9673 8138.6914 -8168.8984 8138.2783 c
-8169.1777 8138.1563 -8169.2729 8137.918 -8168.6953 8137.5166 C
-8168.0615 8137.6602 -8167.2153 8137.6816 -8166.6968 8137.7471 c
-8165.3623 8137.918 -8160.6431 8138.2441 -8158.6929 8138.9375 C
-8158.9502 8138.6064 -8158.9512 8138.6064 v
-8161.2422 8137.7969 -8164.8647 8137.4375 -8166.1992 8137.2656 c
-8167.2529 8137.1309 -8168.7007 8137.1504 -8169.6719 8136.5703 c
-8169.9624 8136.3975 -8170.0352 8136.123 -8169.3481 8135.7578 C
-8168.6704 8135.998 -8167.7578 8136.1328 -8167.2026 8136.2754 c
-8165.7534 8136.6445 -8160.5938 8137.6426 -8158.5361 8138.6689 C
-8158.7754 8138.2695 -8158.7759 8138.2695 v
-8161.1934 8137.0664 -8165.1392 8136.1797 -8166.5879 8135.8105 c
-8167.7314 8135.5186 -8169.3311 8135.3457 -8170.3242 8134.5723 c
-8170.6182 8134.3457 -8170.6626 8134.0352 -8169.8745 8133.7305 C
-8169.1606 8134.082 -8168.1802 8134.3535 -8167.5889 8134.584 c
-8166.0415 8135.1865 -8160.4863 8136.9863 -8158.3564 8138.3984 C
-8158.5654 8137.9258 -8158.5674 8137.9248 v
-8161.0698 8136.2695 -8165.3018 8134.7578 -8166.8486 8134.1543 c
-8168.0703 8133.6777 -8169.8115 8133.2695 -8170.8018 8132.2842 c
-8171.0786 8132.0098 -8171.1006 8131.6846 -8170.3384 8131.4551 C
-8169.5942 8131.9404 -8168.5234 8132.3584 -8167.8926 8132.6895 c
-8166.2446 8133.5518 -8160.2441 8136.2246 -8158.1055 8138.0957 C
-8158.2407 8137.5186 -8158.2417 8137.5186 v
-8160.7559 8135.3281 -8165.2954 8133.127 -8166.9438 8132.2617 c
-8168.2456 8131.5801 -8170.1602 8130.9248 -8171.0815 8129.6709 c
-8171.3135 8129.3555 -8171.2974 8129.0127 -8170.6118 8128.8105 C
-8169.8594 8129.4668 -8168.6641 8130.0762 -8167.9888 8130.5322 c
-8166.27 8131.6953 -8159.9126 8135.377 -8157.8442 8137.7637 C
-8158.1377 8136.9902 -8158.1382 8136.9893 v
-8160.5718 8134.1934 -8165.0825 8131.2842 -8166.8018 8130.1221 c
-8168.1582 8129.2031 -8170.2295 8128.2607 -8171.0234 8126.709 c
f
U
u
-8168.2329 8123.918 m
-8168.7446 8123.6543 -8169.2715 8123.8926 -8169.2905 8125.6504 C
-8170.0313 8124.9082 L
-8169.9473 8122.9473 -8168.7622 8122.5977 -8168.1826 8122.7754 c
-8167.5503 8122.9658 -8167.0386 8123.3916 -8166.6919 8123.7324 C
-8166.3306 8122.7373 -8165.5498 8122.6904 -8165.1504 8122.8906 c
-8164.6064 8123.168 -8164.1895 8123.6406 -8163.9224 8123.9922 C
-8163.5649 8122.9951 -8162.8281 8123.0781 -8162.4834 8123.334 c
-8162.0498 8123.6543 -8161.7368 8124.123 -8161.5376 8124.4648 C
-8161.1113 8123.4824 -8160.4175 8123.6387 -8160.1255 8123.918 c
-8159.7759 8124.248 -8159.5488 8124.6943 -8159.4082 8125.0215 C
-8158.9185 8124.1719 -8158.3086 8124.3877 -8158.0767 8124.6689 c
-8157.8086 8124.9951 -8157.6553 8125.4053 -8157.5649 8125.7109 C
-8157.0327 8125.002 -8156.5103 8125.2607 -8156.3345 8125.5391 c
-8156.1235 8125.8701 -8156.0322 8126.2695 -8155.9858 8126.5537 C
-8155.4312 8125.9727 -8154.9912 8126.2637 -8154.8638 8126.5313 c
-8154.6367 8127.0078 -8154.6655 8127.5898 -8154.6592 8127.7637 c
-8154.6431 8128.3066 -8154.8159 8129.0566 -8154.8696 8129.5137 c
-8154.9966 8130.5957 -8155.6655 8134.3682 -8155.5034 8136.0381 C
-8155.7129 8135.7695 l
-8155.8999 8133.8105 -8155.4727 8130.8926 -8155.3457 8129.8105 c
-8155.2446 8128.957 -8154.9458 8127.8223 -8155.2114 8126.9453 c
-8155.2915 8126.6816 -8155.4946 8126.5703 -8155.9199 8127.0508 C
-8155.8682 8127.6279 -8155.9395 8128.3662 -8155.9375 8128.8281 c
-8155.9302 8130.04 -8156.1567 8134.29 -8155.7524 8136.1094 C
-8156.0195 8135.8428 -8156.0195 8135.8418 v
-8156.4922 8133.7061 -8156.4155 8130.4316 -8156.4214 8129.2207 c
-8156.4272 8128.2646 -8156.25 8126.9736 -8156.6616 8126.043 c
-8156.7847 8125.7637 -8157.0234 8125.668 -8157.4238 8126.2461 C
-8157.2798 8126.8789 -8157.2593 8127.7246 -8157.1929 8128.2441 c
-8157.0225 8129.5781 -8156.6958 8134.2959 -8156.0034 8136.248 C
-8156.3345 8135.9902 -8156.3354 8135.9893 v
-8157.1455 8133.6982 -8157.5039 8130.0762 -8157.6753 8128.7402 c
-8157.8096 8127.6885 -8157.79 8126.2402 -8158.3706 8125.2695 c
-8158.5435 8124.9785 -8158.8174 8124.9053 -8159.1816 8125.5938 C
-8158.9434 8126.2695 -8158.8081 8127.1836 -8158.6665 8127.7383 c
-8158.2969 8129.1865 -8157.2993 8134.3477 -8156.27 8136.4053 C
-8156.6704 8136.166 -8156.6714 8136.166 v
-8157.8745 8133.7471 -8158.7607 8129.8008 -8159.1294 8128.3535 c
-8159.4214 8127.209 -8159.5962 8125.6094 -8160.3662 8124.6172 c
-8160.5962 8124.3232 -8160.9058 8124.2783 -8161.2114 8125.0664 C
-8160.8594 8125.7793 -8160.5874 8126.7617 -8160.3574 8127.3516 c
-8159.7534 8128.8984 -8157.9546 8134.4541 -8156.5415 8136.585 C
-8157.0161 8136.375 l
-8158.6704 8133.8711 -8160.1826 8129.6387 -8160.7866 8128.0918 c
-8161.2622 8126.8701 -8161.6714 8125.1289 -8162.6558 8124.1387 c
-8162.9312 8123.8623 -8163.2559 8123.8398 -8163.4858 8124.6016 C
-8163.0015 8125.3457 -8162.5825 8126.418 -8162.2529 8127.0469 c
-8161.3887 8128.6953 -8158.7158 8134.6973 -8156.8447 8136.8359 C
-8157.4209 8136.6992 -8157.4214 8136.6992 v
-8159.6128 8134.1846 -8161.8145 8129.6455 -8162.6782 8127.9961 c
-8163.3599 8126.6943 -8164.0161 8124.7793 -8165.2695 8123.8594 c
-8165.5854 8123.627 -8165.9272 8123.6426 -8166.1313 8124.3281 C
-8165.4736 8125.082 -8164.8638 8126.2764 -8164.4072 8126.9512 c
-8163.2441 8128.6709 -8159.5635 8135.0273 -8157.1768 8137.0967 C
-8157.9502 8136.8037 -8157.9512 8136.8018 v
-8160.7471 8134.3682 -8163.6558 8129.8584 -8164.8184 8128.1387 c
-8165.7368 8126.7822 -8166.6802 8124.7119 -8168.2329 8123.918 c
f
U
U
*u
1 D
-8118.0264 8128.0566 m
-8124.5264 8128.0566 L
-8124.1826 8128.4189 -8123.7622 8128.7578 -8123.1777 8129.0332 c
-8123.1978 8129.0234 -8122.3994 8129.1563 -8122.2622 8129.332 c
-8122.0967 8129.541 -8123.7886 8129.582 -8124.6929 8128.5342 C
-8125.3486 8131.709 L
-8125.8135 8132.0273 L
-8125.0918 8128.0977 L
-8125.5249 8127.5703 -8125.8594 8127.002 -8126.3687 8126.5186 C
-8127.0337 8132.6289 L
-8127.29 8132.7754 L
-8126.8286 8126.1475 L
-8127.1104 8125.957 -8127.4424 8125.791 -8127.8486 8125.6621 C
-8128.7119 8133.0225 L
-8128.9482 8133.0078 L
-8128.3369 8125.5322 L
-8128.6729 8125.4609 -8129.0518 8125.4111 -8129.4834 8125.3857 C
-8130.0303 8132.9541 L
-8130.1992 8132.9521 L
-8129.9814 8125.3711 L
-8130.4814 8125.377 -8130.9175 8125.4473 -8131.3042 8125.5674 C
-8131.4155 8132.7061 L
-8131.6338 8132.6689 L
-8131.7935 8125.7549 L
-8132.2998 8125.9863 -8132.7266 8126.3018 -8133.1279 8126.6455 C
-8133.0454 8132.2412 L
-8133.3774 8132.0273 L
-8133.5752 8127.043 L
-8133.9434 8127.377 -8134.3096 8127.7168 -8134.7178 8128.0127 C
-8134.7217 8131.3389 L
-8135.1455 8131.0645 L
-8135.1553 8128.2988 L
-8135.6191 8128.5693 -8136.5854 8129.0098 -8137.4014 8128.8672 C
-8136.1714 8128.543 -8135.7925 8128.3301 -8135.5034 8128.0566 C
-8138.7295 8128.0566 L
-8134.8955 8132.4512 -8128.3394 8136.6865 -8123.3018 8130.0225 C
-8123.1807 8129.8838 -8122.8174 8129.5625 -8122.1255 8129.6475 C
-8118.0264 8129.6475 L
-8118.0264 8130.3672 L
-8121.4834 8130.3672 L
-8121.1318 8130.6777 -8120.8223 8131.4863 -8121.0386 8131.8574 C
-8118.0264 8131.8574 L
-8118.0264 8132.9385 L
-8121.1689 8132.9385 L
-8121.2935 8133.4492 -8121.5439 8133.8857 -8121.8218 8134.3311 C
-8118.0264 8134.3311 L
-8118.0264 8135.9873 L
-8122.7354 8135.9873 L
-8122.9424 8136.4453 -8123.1016 8136.9082 -8123.1768 8137.4121 C
-8118.0264 8137.4121 L
-8118.0264 8138.4922 L
-8123.1714 8138.4922 L
-8123.1074 8138.9834 -8122.9614 8139.4668 -8122.7378 8139.9111 C
-8118.0264 8139.9111 L
-8118.0264 8140.6309 L
-8122.2744 8140.6309 L
-8121.9375 8141.0039 -8120.8535 8141.5938 -8120.9375 8142.0225 C
-8118.0239 8142.0225 L
-8118.0239 8142.4824 L
-8118.3721 8142.4824 L
-8118.3721 8143.6826 L
-8118.0239 8143.6826 L
-8118.0239 8144.1426 L
-8125.9736 8144.1426 L
-8126.4082 8144.4375 -8127.2192 8144.4521 -8127.9897 8144.1426 C
-8131.8564 8144.1426 L
-8132.1162 8144.4609 -8133.1807 8144.5693 -8133.6846 8144.1426 C
-8134.8232 8144.1426 L
-8135.0439 8144.3994 -8135.3174 8144.6387 -8135.6782 8144.8975 C
-8118.0264 8144.8975 L
-8118.0264 8145.3809 L
-8136.8394 8145.3809 L
-8137.1982 8145.5615 -8138.2417 8145.8389 -8139.3774 8145.3809 C
-8149.6406 8145.3809 L
-8149.6406 8155.6494 L
-8149.1826 8156.7861 -8149.4614 8157.8281 -8149.6455 8158.1895 C
-8149.6455 8177 L
-8150.1279 8177 L
-8150.1279 8159.3477 L
-8150.3838 8159.709 -8150.6235 8159.9824 -8150.8794 8160.2031 C
-8150.8794 8161.3418 L
-8150.4536 8161.8457 -8150.5615 8162.9082 -8150.8794 8163.1689 C
-8150.8794 8167.0361 L
-8150.5698 8167.8076 -8150.5854 8168.6182 -8150.8833 8169.0518 C
-8150.8833 8176.998 L
-8151.3394 8176.998 L
-8151.3394 8176.6543 L
-8152.5435 8176.6543 L
-8152.5435 8176.998 L
-8153.0039 8176.998 L
-8153.0039 8174.0879 L
-8153.4287 8174.1738 -8154.0186 8173.0898 -8154.3955 8172.752 C
-8154.3955 8176.9951 L
-8155.1113 8176.9951 L
-8155.1113 8172.2891 L
-8155.5552 8172.0654 -8156.0376 8171.9189 -8156.5298 8171.8555 C
-8156.5298 8176.9951 L
-8157.6138 8176.9951 L
-8157.6138 8171.8496 L
-8158.1143 8171.9248 -8158.5767 8172.085 -8159.0391 8172.29 C
-8159.0391 8176.9951 L
-8160.6958 8176.9951 L
-8160.6958 8173.2041 L
-8161.1362 8173.4824 -8161.5728 8173.7324 -8162.0854 8173.8555 C
-8162.0854 8176.9951 L
-8163.1689 8176.9951 L
-8163.1689 8173.9893 L
-8163.5552 8174.1289 -8164.3486 8173.8945 -8164.6543 8173.543 C
-8164.6543 8176.9951 L
-8165.3794 8176.9951 L
-8165.3794 8172.9014 L
-8165.4634 8172.209 -8165.1382 8171.8457 -8165.0015 8171.7227 C
-8158.3359 8166.6885 -8162.5713 8160.1309 -8166.9658 8156.2959 C
-8166.9658 8159.5244 L
-8166.6919 8159.2344 -8166.48 8158.8555 -8166.1558 8157.625 C
-8166.0127 8158.4414 -8166.4526 8159.4082 -8166.7246 8159.8711 C
-8163.9575 8159.8828 L
-8163.6831 8160.3047 L
-8167.0103 8160.3066 L
-8167.3066 8160.7168 -8167.6455 8161.084 -8167.98 8161.4512 C
-8162.9951 8161.6475 L
-8162.7817 8161.9814 L
-8168.3774 8161.8984 L
-8168.7202 8162.2998 -8169.0361 8162.7266 -8169.2681 8163.2314 C
-8162.3535 8163.3926 L
-8162.3169 8163.6113 L
-8169.4546 8163.7227 L
-8169.5742 8164.1094 -8169.6465 8164.5439 -8169.6514 8165.0449 C
-8162.0688 8164.8262 L
-8162.0688 8164.9951 L
-8169.6362 8165.543 L
-8169.6113 8165.9746 -8169.5615 8166.3545 -8169.4888 8166.6895 C
-8162.0142 8166.0781 L
-8161.9995 8166.3145 L
-8169.3599 8167.1777 L
-8169.2314 8167.585 -8169.0654 8167.916 -8168.8755 8168.1973 C
-8162.2485 8167.7354 L
-8162.3945 8167.9932 L
-8168.5034 8168.6572 L
-8168.0215 8169.168 -8167.4521 8169.502 -8166.9238 8169.9336 C
-8162.9946 8169.2139 L
-8163.3135 8169.6768 L
-8166.4878 8170.334 L
-8165.4409 8171.2373 -8165.4814 8172.9297 -8165.6914 8172.7637 c
-8165.8657 8172.627 -8165.9985 8171.8281 -8165.9897 8171.8486 c
-8166.2656 8171.2637 -8166.6035 8170.8438 -8166.9697 8170.502 C
-8166.9697 8177 L
-8167.4536 8177 L
-8167.4536 8170.085 L
-8168.6582 8169.1377 -8169.9551 8168.5674 -8170.1167 8165.4111 c
-8170.25 8162.8311 -8168.5562 8161.7656 -8167.4497 8160.2871 C
-8167.4497 8155.7441 L
-8168.5767 8154.418 -8169.5225 8152.9912 -8169.9614 8151.1455 C
-8170.8809 8146.3662 -8167.7568 8140.8545 -8162.7959 8140.4863 C
-8162.7183 8140.6133 L
-8167.1494 8141.5352 -8169.8442 8146.6641 -8168.9814 8151.1455 C
-8168.0635 8155.0029 -8164.9395 8157.0234 -8162.5503 8160.1475 C
-8160.8975 8162.5361 -8160.3457 8165.1094 -8161.0806 8167.8652 c
-8161.8545 8170.6133 -8164.25 8171.5977 -8164.5649 8172.5303 c
-8164.8506 8173.375 -8163.6689 8173.7002 -8162.6968 8173.6348 C
-8160.5454 8173.4395 -8159.1602 8170.4922 -8155.3184 8171.7559 c
-8154.2222 8172.1162 -8153.5913 8172.9375 -8153.3042 8173.5469 c
-8153.1104 8173.957 -8151.7241 8173.4395 -8152.9165 8171.2207 C
-8155.8774 8171.0879 -8155.4521 8169.0645 -8155.2026 8169.2109 c
-8153.5015 8170.209 -8152.1826 8168.3047 -8153.1055 8167.2959 c
-8155.2129 8164.9902 -8156.8481 8165.2861 -8158.9248 8161.3174 c
-8161.2095 8156.9521 -8162.2695 8151.0723 -8159.7959 8146.9082 C
-8159.7954 8146.1387 L
-8160.0479 8145.5439 -8160.0249 8145.085 -8160.2134 8144.168 c
-8160.3818 8143.3535 -8160.6689 8143.085 -8160.9575 8142.9121 C
-8161.1304 8142.7969 -8161.5015 8142.9053 -8161.5054 8143.1445 c
-8161.52 8143.7461 -8160.7842 8143.5225 -8160.8271 8143.584 c
-8161.1895 8144.0869 -8161.7329 8143.7295 -8161.8345 8143.377 c
-8161.9648 8142.9287 -8161.6606 8142.5762 -8161.3145 8142.4902 C
-8160.6655 8142.3594 -8160.1968 8142.9277 -8159.9575 8143.457 c
-8159.4365 8144.6074 -8159.4746 8146.252 -8158.2607 8146.8574 c
-8157.4385 8147.2471 -8156.5537 8146.9277 -8155.7271 8146.6328 c
-8152.8296 8145.6016 -8149.3096 8142.082 -8148.2783 8139.1836 c
-8147.9834 8138.3574 -8147.6641 8137.4727 -8148.0537 8136.6494 c
-8148.6606 8135.4375 -8150.3042 8135.4746 -8151.4546 8134.9541 c
-8151.9834 8134.7148 -8152.5513 8134.2461 -8152.4214 8133.5967 C
-8152.3345 8133.25 -8151.9824 8132.9473 -8151.5327 8133.0762 c
-8151.1826 8133.1797 -8150.8242 8133.7227 -8151.3281 8134.084 c
-8151.3882 8134.127 -8151.1655 8133.3906 -8151.7681 8133.4053 c
-8152.0054 8133.4111 -8152.1143 8133.7813 -8151.9995 8133.9541 C
-8151.8257 8134.2422 -8151.5591 8134.5293 -8150.7422 8134.6973 c
-8149.7085 8134.9102 -8149.2578 8134.8535 -8148.5386 8135.2266 C
-8148.1167 8135.2266 L
-8143.9546 8132.7529 -8138.0674 8133.8008 -8133.7095 8136.0977 c
-8133.0527 8136.4551 -8132.4834 8136.8008 -8131.9126 8137.1475 c
-8130.5488 8137.9766 -8128.5542 8140.8857 Y
-8128.1782 8141.332 -8127.9521 8141.7979 -8127.5225 8142.0625 c
-8126.3569 8142.7783 -8124.8184 8141.5215 -8125.8154 8139.8193 c
-8125.9614 8139.5703 -8123.9385 8139.1455 -8123.8057 8142.1064 C
-8121.5874 8143.2988 -8121.0698 8141.9121 -8121.4795 8141.7178 c
-8122.0889 8141.4316 -8122.9087 8140.7998 -8123.2705 8139.7041 c
-8124.5342 8135.8623 -8121.3599 8134.0234 -8121.4463 8132.3262 C
-8121.3008 8131.5322 -8121.6514 8130.1719 -8122.4961 8130.459 c
-8123.4282 8130.7725 -8124.4126 8133.168 -8127.1606 8133.9414 c
-8129.9175 8134.6768 -8132.4897 8134.125 -8134.8774 8132.4717 C
-8138.0034 8130.084 -8140.0234 8126.959 -8143.8818 8126.041 C
-8148.3623 8125.1777 -8153.4902 8127.873 -8154.4126 8132.3037 C
-8154.5391 8132.2266 L
-8154.1729 8127.2656 -8148.6592 8124.1426 -8143.8818 8125.0615 C
-8142.0361 8125.502 -8140.6104 8126.4453 -8139.2822 8127.5723 C
-8134.7393 8127.5723 L
-8133.2607 8126.4668 -8132.1943 8124.7725 -8129.6143 8124.9053 c
-8126.4585 8125.0664 -8125.8882 8126.3633 -8124.9409 8127.5723 C
-8118.0264 8127.5723 L
-8118.0264 8128.0566 L
f
0 D
-8147.1362 8137.4121 m
-8139.5166 8137.4121 L
-8140.5635 8136.8301 -8141.5435 8136.3184 -8142.8057 8135.9873 C
-8147.6079 8135.9873 L
-8147.2998 8136.3809 -8147.1055 8136.8701 -8147.1362 8137.4121 C
f
-8148.0591 8139.9111 m
-8136.5254 8139.9111 L
-8136.6338 8139.6201 -8137.0063 8138.9404 -8137.8042 8138.4922 C
-8147.4321 8138.4922 L
-8147.6118 8138.9727 -8147.8232 8139.4463 -8148.0591 8139.9111 C
f
-8136.8096 8142.0225 m
-8136.3174 8141.4395 -8136.2568 8141.2207 -8136.3857 8140.6309 C
-8148.4521 8140.6309 L
-8148.7295 8141.1074 -8149.0322 8141.5723 -8149.3599 8142.0225 C
-8141.2568 8142.0225 L
-8140.9111 8141.2041 -8140.1665 8141.3711 -8139.8218 8142.0225 C
-8136.8096 8142.0225 L
f
-8138.1201 8142.4824 m
-8138.1201 8142.8242 L
-8137.5664 8142.7861 -8137.4995 8142.752 -8137.1982 8142.4824 C
-8138.1201 8142.4824 L
f
-8139.4863 8142.4824 m
-8139.3311 8142.6719 -8139.0264 8142.8154 -8138.8257 8142.8457 C
-8138.8257 8142.4824 L
-8139.4863 8142.4824 L
f
-8142.3535 8142.4824 m
-8142.3535 8143.6826 L
-8141.6465 8143.6826 L
-8141.6465 8142.4824 L
-8142.3535 8142.4824 L
f
-8143.7622 8142.4824 m
-8143.7622 8143.6826 L
-8143.0576 8143.6826 L
-8143.0576 8142.4824 L
-8143.7622 8142.4824 L
f
-8145.1729 8142.4824 m
-8145.1729 8143.6826 L
-8144.4678 8143.6826 L
-8144.4678 8142.4824 L
-8145.1729 8142.4824 L
f
-8146.5835 8142.4824 m
-8146.5835 8143.6826 L
-8145.8774 8143.6826 L
-8145.8774 8142.4824 L
-8146.5835 8142.4824 L
f
-8147.9946 8142.4824 m
-8147.9946 8143.6826 L
-8147.2886 8143.6826 L
-8147.2886 8142.4824 L
-8147.9946 8142.4824 L
f
-8153 8153.7695 m
-8153 8145.6504 L
-8153.4497 8145.9756 -8153.9146 8146.2754 -8154.3911 8146.5449 C
-8154.3911 8158.6406 L
-8153.8018 8158.7695 -8153.5825 8158.709 -8153 8158.2158 C
-8153 8155.2041 L
-8153.6514 8154.8613 -8153.8169 8154.1152 -8153 8153.7695 C
f
-8152.5391 8153.3799 m
-8151.3394 8153.3799 L
-8151.3394 8152.6748 L
-8152.5391 8152.6748 L
-8152.5391 8153.3799 L
f
-8151.3394 8151.9688 m
-8151.3394 8151.2637 L
-8152.5391 8151.2637 L
-8152.5391 8151.9688 L
-8151.3394 8151.9688 L
f
-8151.3394 8150.5586 m
-8151.3394 8149.8535 L
-8152.5391 8149.8535 L
-8152.5391 8150.5586 L
-8151.3394 8150.5586 L
f
-8151.3394 8149.1484 m
-8151.3394 8148.4434 L
-8152.5391 8148.4434 L
-8152.5391 8149.1484 L
-8151.3394 8149.1484 L
f
-8151.3394 8147.7373 m
-8151.3394 8147.0313 L
-8152.5391 8147.0313 L
-8152.5391 8147.7373 L
-8151.3394 8147.7373 L
f
-8151.3394 8146.3262 m
-8151.3394 8145.6201 L
-8152.5391 8145.6201 L
-8152.5391 8146.3262 L
-8151.3394 8146.3262 L
f
-8151.3394 8144.918 m
-8151.3394 8144.2725 L
-8151.5728 8144.4941 -8151.8135 8144.709 -8152.0591 8144.918 C
-8151.3394 8144.918 L
f
-8149.4058 8143.6826 m
-8148.6992 8143.6826 L
-8148.6992 8142.4824 L
-8149.4058 8142.4824 L
-8149.4058 8143.6826 L
f
-8150.7495 8143.6826 m
-8150.1094 8143.6826 L
-8150.1094 8142.9746 L
-8150.3159 8143.2158 -8150.5288 8143.4521 -8150.7495 8143.6826 C
f
-8156.5298 8147.5273 m
-8156.5298 8157.2227 L
-8156.0815 8158.0186 -8155.4014 8158.3926 -8155.1113 8158.502 C
-8155.1113 8146.9258 L
-8155.5762 8147.1563 -8156.0488 8147.3564 -8156.5298 8147.5273 C
f
-8159.0352 8147.209 m
-8159.0352 8152.2207 L
-8158.7041 8153.4844 -8158.1929 8154.4629 -8157.6094 8155.5098 C
-8157.6094 8147.7725 L
-8158.1606 8147.7705 -8158.6494 8147.5439 -8159.0352 8147.209 C
f
-8151.3394 8175.2441 m
-8152.5391 8175.2441 L
-8152.5391 8175.9482 L
-8151.3394 8175.9482 L
-8151.3394 8175.2441 L
f
-8151.3394 8173.834 m
-8152.3896 8173.834 L
-8152.4375 8173.8838 -8152.4878 8173.9297 -8152.5391 8173.9678 C
-8152.5391 8174.5381 L
-8151.3394 8174.5381 L
-8151.3394 8173.834 L
f
-8151.3394 8172.4209 m
-8152.0039 8172.4209 L
-8151.9702 8172.6475 -8151.9595 8172.9121 -8152.0137 8173.1279 C
-8151.3394 8173.1279 L
-8151.3394 8172.4209 L
f
-8151.3394 8171.0117 m
-8152.5015 8171.0117 L
-8152.3872 8171.2461 -8152.2798 8171.4814 -8152.1919 8171.7168 C
-8151.3394 8171.7168 L
-8151.3394 8171.0117 L
f
-8151.3394 8169.9033 m
-8151.4614 8170.0625 -8151.5938 8170.2197 -8151.6753 8170.3066 C
-8151.3394 8170.3066 L
-8151.3394 8169.9033 L
f
-8151.4399 8154.4395 m
-8151.6968 8154.2891 -8153.0845 8153.8135 -8153.0737 8154.5381 c
-8153.0674 8154.9502 -8152.4512 8155.2412 -8152.2495 8155.4473 c
-8151.6338 8156.0703 -8151.1885 8157.5254 -8152.2974 8158.4238 c
-8154.6328 8160.3145 -8156.1865 8158.5879 Y
-8160.1118 8154.7324 -8160.1104 8149.1113 Y
-8161.2295 8153.334 -8159.9663 8158.3936 -8158.4048 8161.1426 c
-8155.8818 8165.584 -8154.9575 8164.0566 -8152.6113 8166.9482 c
-8151.8047 8167.9434 -8152.1294 8170.3818 -8154.9546 8169.75 c
-8155.2026 8169.6934 -8154.7759 8170.2949 -8154.2681 8170.5498 c
-8152.1104 8171.6406 -8150.8618 8169.1631 -8151.1338 8167.8594 c
-8151.4761 8166.2109 -8152.0986 8165.3662 -8154.1616 8164.2246 C
-8153.8311 8164.2373 -8152.2134 8164.541 -8151.2295 8163.0088 c
-8151.0195 8162.6826 -8150.8745 8161.7578 -8151.3042 8161.877 c
-8151.3906 8161.9023 -8151.6416 8162.1973 -8151.9414 8162.3613 c
-8153.9321 8163.3945 -8154.7075 8161.0137 Y
-8152.4165 8160.8418 -8151.7515 8160.7637 -8150.2559 8158.7637 c
-8150.0542 8158.4941 -8149.1162 8155.8047 -8151.4399 8154.4395 c
f
-8152.5391 8161.1367 m
-8152.5391 8162.0225 L
-8152.2993 8161.998 -8151.9302 8161.957 -8151.3394 8161.4033 C
-8151.3394 8161.1367 L
-8152.5391 8161.1367 L
f
-8153.9946 8161.2305 m
-8153.8042 8161.7031 -8153.4185 8161.9473 -8153 8162.0127 C
-8153 8161.1709 L
-8153.3857 8161.2354 -8153.9946 8161.2305 Y
f
-8151.3394 8164.666 m
-8151.3394 8163.959 L
-8151.6382 8163.959 L
-8151.9136 8164.1475 -8152.2246 8164.293 -8152.5391 8164.3818 C
-8152.5391 8164.666 L
-8151.3394 8164.666 L
f
-8151.9897 8165.3682 m
-8151.7935 8165.5342 -8151.5576 8165.7813 -8151.3394 8166.1084 C
-8151.3394 8165.3682 L
-8151.9897 8165.3682 L
f
-8153.2495 8164.4746 m
-8153.1914 8164.5273 -8153.1025 8164.5967 -8153 8164.6719 C
-8153 8164.4668 L
-8153.0835 8164.4746 -8153.1675 8164.4785 -8153.2495 8164.4746 C
f
-8152.5391 8156.9063 m
-8152.5391 8157.8262 L
-8152.2715 8157.5273 -8152.2358 8157.46 -8152.1982 8156.9063 C
-8152.5391 8156.9063 L
f
-8152.1758 8156.2012 m
-8152.2065 8156.002 -8152.3506 8155.6943 -8152.5391 8155.54 C
-8152.5391 8156.2012 L
-8152.1758 8156.2012 L
f
-8140.1865 8144.8975 m
-8140.4233 8144.6943 -8140.6401 8144.4463 -8140.8271 8144.1426 C
-8150.8794 8144.1426 L
-8150.8794 8154.1992 L
-8150.5762 8154.3857 -8150.3271 8154.6025 -8150.1255 8154.8408 C
-8150.1265 8144.8975 L
-8140.1865 8144.8975 L
f
-8133.6226 8143.6826 m
-8133.0698 8143.0928 -8133.0298 8142.7227 -8133.0034 8142.4824 C
-8133.8887 8142.4824 L
-8133.8887 8143.6826 L
-8133.6226 8143.6826 L
f
-8133.8564 8142.0225 m
-8133.0127 8142.0225 L
-8133.0791 8141.6045 -8133.3232 8141.2188 -8133.7959 8141.0273 C
-8133.7915 8141.6367 -8133.8564 8142.0225 V
f
-8130.3623 8142.4824 m
-8130.6455 8142.4824 L
-8130.7334 8142.7979 -8130.8799 8143.1084 -8131.0674 8143.3838 C
-8131.0674 8143.6826 L
-8130.3623 8143.6826 L
-8130.3623 8142.4824 L
f
-8130.3545 8142.0225 m
-8130.4302 8141.9199 -8130.4995 8141.8311 -8130.5518 8141.7734 C
-8130.5479 8141.8555 -8130.5518 8141.9395 -8130.5601 8142.0225 C
-8130.3545 8142.0225 L
f
-8128.9185 8143.6826 m
-8129.2446 8143.4648 -8129.4912 8143.2305 -8129.6577 8143.0332 C
-8129.6577 8143.6826 L
-8128.9185 8143.6826 L
f
-8124.7202 8143.3477 m
-8124.8066 8143.4287 -8124.9639 8143.5615 -8125.1226 8143.6826 C
-8124.7202 8143.6826 L
-8124.7202 8143.3477 L
f
-8124.4751 8140.7549 m
-8124.7329 8140.2461 -8125.0913 8139.8945 -8125.2778 8140.0684 c
-8125.4248 8140.2041 -8124.4424 8141.9434 -8125.9009 8142.7725 c
-8126.7158 8143.2354 -8127.8721 8142.873 -8128.2842 8142.3066 c
-8130.5615 8139.1836 -8130.4746 8138.5586 -8133.8848 8136.6172 c
-8136.6318 8135.0537 -8141.6943 8133.793 -8145.9155 8134.9121 C
-8140.2935 8134.9102 -8136.4385 8138.8359 V
-8134.7119 8140.3906 -8136.6025 8142.7246 v
-8137.5015 8143.834 -8138.9551 8143.3887 -8139.5791 8142.7734 c
-8139.7842 8142.5703 -8140.0752 8141.9551 -8140.4873 8141.9482 c
-8141.2134 8141.9385 -8140.7378 8143.3242 -8140.5874 8143.582 c
-8139.2217 8145.9063 -8136.5322 8144.9678 -8136.2622 8144.7656 c
-8134.2622 8143.2705 -8134.1846 8142.6064 -8134.0127 8140.3145 C
-8131.6328 8141.0898 -8132.6655 8143.0801 v
-8132.8286 8143.3809 -8133.1245 8143.6318 -8133.1489 8143.7178 c
-8133.2695 8144.1475 -8132.3423 8144.0029 -8132.0176 8143.7949 c
-8130.4858 8142.8086 -8130.7881 8141.1914 -8130.8018 8140.8613 C
-8129.6602 8142.9248 -8128.8154 8143.5469 -8127.1675 8143.8887 c
-8125.8633 8144.1602 -8123.3857 8142.9121 -8124.4751 8140.7549 c
f
-8123.3096 8142.8301 m
-8123.5454 8142.7422 -8123.7817 8142.6357 -8124.0142 8142.5215 C
-8124.0142 8143.6826 L
-8123.3096 8143.6826 L
-8123.3096 8142.8301 L
f
-8121.8994 8143.0088 m
-8122.1143 8143.0625 -8122.3794 8143.0518 -8122.6055 8143.0186 C
-8122.6055 8143.6826 L
-8121.8994 8143.6826 L
-8121.8994 8143.0088 L
f
-8119.7822 8143.6826 m
-8119.0767 8143.6826 L
-8119.0767 8142.4824 L
-8119.7822 8142.4824 L
-8119.7822 8143.6826 L
f
-8121.1934 8143.6826 m
-8120.4878 8143.6826 L
-8120.4878 8142.4824 L
-8121.0586 8142.4824 L
-8121.0967 8142.5342 -8121.1426 8142.585 -8121.1934 8142.6328 C
-8121.1934 8143.6826 L
f
*U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed 3)0 A
u
u
0 J 0 j 1 w 4 M []0 d0 XR
-4304.5 4304.291 m
-4205.5693 4304.291 L
-4205.5693 4287.9272 L
-4304.5 4287.9272 L
-4304.5 4304.291 L
n
u
u
0 O
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 Xa
-4208.0068 4293.6094 m
-4207.7832 4293.5537 -4207.5879 4293.8643 -4207.6719 4294.0039 C
-4207.2158 4293.6274 -4207.2061 4294.0557 -4207.1475 4293.3262 C
-4206.8545 4292.9683 -4206.542 4293.4639 -4206.875 4293.7598 C
-4206.0313 4293.3135 L
-4206.5361 4293.1997 L
-4206.3984 4292.5933 -4205.7295 4293.3809 -4205.5693 4292.6743 C
-4206.4834 4292.7334 L
-4206.4375 4292.5313 L
-4206.6455 4292.749 -4207.0498 4292.6582 -4207.1904 4292.5732 C
-4207.168 4292.4736 -4207.1826 4292.3115 -4207.0215 4292.2935 C
-4208.124 4292.2471 -4207.3184 4293.3545 -4208.2334 4293.5557 C
-4208.1763 4293.541 -4208.1055 4293.5493 -4208.0068 4293.6094 C
f
-4208.9443 4292.125 m
-4209.3291 4292.8853 L
-4209.9746 4292.6895 L
-4209.9814 4292.9517 -4210.4521 4293.1641 -4210.1338 4293.3955 C
-4210.0713 4293.3545 -4209.9482 4293.2759 -4209.8486 4293.2998 C
-4209.9209 4293.8672 -4210.707 4293.583 -4210.5176 4294.1572 C
-4210.0068 4294.0068 -4209.9287 4294.1318 -4209.6143 4293.6709 C
-4209.1465 4293.7236 -4208.8057 4293.8545 -4208.5869 4294.0615 C
-4208.4482 4293.9751 -4208.4287 4293.6274 -4208.252 4293.5576 C
-4208.291 4293.5664 -4208.3271 4293.5752 -4208.3721 4293.5796 C
-4208.3911 4292.7261 L
-4208.5381 4292.9063 -4208.6777 4292.8213 -4208.8408 4292.8389 C
-4208.085 4291.8423 L
-4208.3291 4291.0435 -4209.0713 4291.5127 -4209.3682 4291.1807 C
-4209 4291.8984 -4209.6611 4291.5376 -4208.9443 4292.125 C
f
-4208.252 4293.5576 m
-4208.2471 4293.5576 -4208.2393 4293.5566 -4208.2334 4293.5557 C
-4208.2393 4293.5566 -4208.2471 4293.5566 -4208.252 4293.5576 C
f
-4264.707 4298.5225 m
-4264.8682 4298.5376 -4264.915 4298.7393 -4264.9385 4298.8408 C
-4263.1299 4298.8247 L
-4263.1865 4298.6006 -4263.707 4298.3232 -4263.3594 4298.1895 C
-4263.5146 4297.9414 -4263.9873 4298.1533 -4264.0557 4298.4561 C
-4263.9248 4298.1143 L
-4264.3418 4298.5518 -4264.626 4297.6919 -4264.3545 4297.4336 C
-4264.3896 4297.4385 L
-4265.5439 4299.123 L
-4265.1201 4299.2212 -4265.2178 4298.5435 -4264.707 4298.5225 C
f
-4301.8564 4297.665 m
-4301.6221 4297.5869 -4301.5938 4297.5059 -4301.6201 4297.4229 C
-4301.7041 4297.4854 -4301.7842 4297.5576 -4301.8564 4297.665 C
f
-4265.8135 4299.5181 m
-4266.1753 4300.0454 L
-4266.0303 4299.9033 -4265.9033 4299.7139 -4265.8135 4299.5181 C
f
-4263.3086 4291.499 m
-4263.3081 4291.4712 -4263.3042 4291.4463 -4263.3135 4291.4087 C
-4263.4761 4291.6782 L
-4263.4736 4291.6782 -4263.4727 4291.6782 -4263.4717 4291.6782 C
-4263.4121 4291.6187 -4263.3584 4291.5591 -4263.3086 4291.499 C
f
-4274.0215 4301.499 m
-4274.0601 4301.5127 -4274.0938 4301.5181 -4274.1396 4301.5356 C
-4274.0967 4301.5313 -4274.0576 4301.5176 -4274.0215 4301.499 C
f
-4258.4087 4288.4854 m
-4259.2129 4288.9927 L
-4259.1055 4288.7524 -4259.4937 4288.8247 -4259.3242 4288.5449 C
-4259.3857 4288.583 -4259.6729 4288.6782 -4259.5947 4288.8013 C
-4259.4307 4288.7856 L
-4259.8545 4289.4854 -4259.5977 4289.7544 -4260.3008 4290.2871 C
-4259.8643 4290.7017 -4259.6729 4290.3223 -4259.4414 4290.0039 C
-4259.3633 4289.9551 -4259.2979 4289.9336 -4259.2314 4289.9072 C
-4258.5625 4288.9292 L
-4258.4087 4288.4854 L
f
-4290.6504 4293.6934 m
-4290.6416 4293.6392 L
-4290.6494 4293.6582 -4290.6514 4293.6763 -4290.6504 4293.6934 C
f
-4290.6064 4293.415 m
-4290.6416 4293.6392 L
-4290.5986 4293.5269 -4290.4326 4293.4199 -4290.6064 4293.415 C
f
-4265.6807 4299.0654 m
-4265.6919 4299.1953 -4265.7383 4299.3545 -4265.8135 4299.5181 C
-4265.5439 4299.123 L
-4265.582 4299.1152 -4265.6328 4299.0879 -4265.6807 4299.0654 C
f
-4265.0674 4297.5376 m
-4264.3896 4297.4385 L
-4264.1396 4297.0752 L
-4264.3994 4297.2124 -4264.7021 4297.3062 -4265.0674 4297.5376 C
f
-4272.9512 4301.9102 m
-4274.3545 4302.0176 -4272.6064 4301.0869 -4273.251 4300.8887 C
-4273.6406 4300.9854 -4273.7783 4301.3765 -4274.0215 4301.499 C
-4272.9082 4301.165 -4274.1719 4302.7856 -4273.0498 4302.5791 C
-4273.209 4303.2856 -4273.8594 4303.3496 -4274.2402 4303.1582 C
-4274.6709 4302.4771 -4273.8633 4302.6592 -4273.7656 4301.9912 C
-4274.2158 4302.1021 -4274.1367 4302.2261 -4274.3281 4302.6064 C
-4275.0352 4302.4478 -4275.791 4303.4429 -4276.2139 4302.499 C
-4276.7256 4302.6494 -4276.6919 4302.9751 -4276.9863 4303.334 C
-4277.0449 4304.063 -4276.2246 4303.7168 -4276.0352 4304.291 C
-4276.0742 4304.2295 -4276.1514 4304.1064 -4276.1289 4304.0039 C
-4275.6865 4304.1572 L
-4276.1064 4303.9033 -4275.6279 4303.4287 -4275.4033 4303.3716 C
-4275.2402 4303.3564 -4274.915 4303.3232 -4274.96 4303.5254 C
-4275.207 4303.6816 L
-4274.8887 4303.9126 -4274.5049 4303.1504 -4274.1689 4303.5454 C
-4274.1514 4303.709 -4274.2783 4303.7856 -4274.2979 4303.8877 C
-4273.9209 4303.3896 -4273.5576 4303.4185 -4273 4303.0664 C
-4273.3232 4303.7896 L
-4272.877 4302.9893 -4271.8672 4303.2168 -4271.167 4303.6392 C
-4271.2451 4303.5166 -4271.3848 4303.4307 -4271.3008 4303.291 C
-4270.8896 4303.1182 -4270.5791 4303.6143 -4270.7695 4303.9951 C
-4270.3682 4303.3955 -4269.2393 4304.5 -4268.6919 4303.7207 C
-4266.1753 4300.0454 L
-4266.2695 4300.1377 -4266.3701 4300.2124 -4266.4746 4300.2437 C
-4266.7031 4299.6094 -4266.8262 4299.6865 -4266.4258 4299.0879 C
-4266.8193 4299.4238 -4266.6689 4299.9336 -4267.2598 4299.96 C
-4267.0283 4299.6406 -4266.9697 4298.9121 -4267.5361 4298.8369 C
-4268.9521 4299.4712 -4269.8906 4301.2759 -4271.2129 4302.1982 C
-4271.2617 4301.709 -4272.2998 4301.8462 -4272.8047 4301.7314 C
-4272.6123 4301.2061 -4272.2373 4301.0566 -4271.8486 4300.9502 C
-4272.0928 4300.917 -4272.5127 4300.9033 -4272.8242 4300.8799 C
-4272.9512 4301.9102 L
f
-4269.6631 4300.2661 m
-4269.6982 4300.2227 -4269.7354 4300.1982 -4269.7725 4300.1753 C
-4269.7529 4300.2158 -4269.7197 4300.2471 -4269.6631 4300.2661 C
f
-4271.7305 4300.9648 m
-4271.7256 4300.9473 -4271.7275 4300.9326 -4271.7256 4300.9126 C
-4271.7666 4300.9238 -4271.8071 4300.9385 -4271.8486 4300.9502 C
-4271.8071 4300.9541 -4271.7598 4300.96 -4271.7305 4300.9648 C
f
-4266.0127 4297.9604 m
-4265.9287 4297.8213 -4265.8662 4297.7822 -4265.7822 4297.6416 C
-4265.834 4297.6895 -4265.8994 4297.7271 -4265.9619 4297.7695 C
-4266.0215 4297.8354 -4266.0498 4297.9014 -4266.0127 4297.9604 C
f
-4265.7295 4298.8213 m
-4265.7744 4299.0225 L
-4265.7383 4299.0449 -4265.7129 4299.0493 -4265.6807 4299.0654 C
-4265.6709 4298.957 -4265.6816 4298.8662 -4265.7295 4298.8213 C
f
-4278.3135 4297.4873 m
-4278.4482 4297.5933 L
-4278.3672 4297.5854 -4278.332 4297.542 -4278.3135 4297.4873 C
f
-4274.5146 4301.0796 m
-4274.0264 4301.0313 -4274.4561 4300.3496 -4273.7656 4300.3462 C
-4273.9683 4300.3013 L
-4273.4727 4299.9893 -4272.6025 4300.1328 -4272.0137 4300.1064 C
-4272.0801 4300.3984 -4271.6567 4300.4604 -4271.7256 4300.9126 C
-4271.3232 4300.8062 -4270.9248 4300.7061 -4270.7178 4300.2393 C
-4270.4683 4300.3926 -4270.0898 4299.9824 -4269.7725 4300.1753 C
-4269.9063 4299.9019 -4269.3213 4299.2515 -4270.0928 4299.5854 C
-4270.0303 4299.5479 -4270.0693 4299.4854 -4270.0078 4299.4473 C
-4270.5049 4299.0664 -4270.7041 4299.7124 -4271.1318 4299.7212 C
-4271.3877 4299.4517 -4270.7139 4299.2856 -4270.9551 4299.1782 C
-4271.4893 4299.4292 -4272.6318 4298.8535 -4272.5967 4299.8677 C
-4272.9854 4299.9395 -4273.0391 4299.7158 -4273.1553 4299.5303 C
-4273.7705 4300.6108 -4275.4385 4299.0664 -4275.4326 4300.4478 C
-4275.208 4300.3936 -4274.8423 4300.4229 -4274.5127 4300.1274 C
-4274.5146 4301.0796 L
f
-4266.832 4298.0313 m
-4266.8623 4298.0254 -4266.9023 4298.0303 -4266.9272 4298.0181 C
-4266.8994 4298.0254 -4266.8643 4298.0303 -4266.832 4298.0313 C
f
*u
1 D
-4260.6738 4302.0356 m
-4260.8779 4302.9395 L
-4262.04 4303.1553 -4262.46 4302.9014 -4263.4761 4302.9375 C
-4263.5537 4302.8135 -4263.4307 4302.7349 -4263.3682 4302.6953 C
-4264.082 4302.7998 -4265.1514 4302.6104 -4265.6709 4303.0254 C
-4265.8984 4303.0181 -4266.4951 4302.7314 -4266.2695 4302.4648 C
-4266.3799 4302.5454 -4266.5063 4302.623 -4266.6338 4302.5942 C
-4266.667 4302.2695 -4266.3486 4302.5015 -4266.3418 4302.2349 C
-4266.4424 4302.2134 -4266.4814 4302.1504 -4266.5049 4302.2524 C
-4266.335 4301.9736 -4266.6807 4301.1509 -4265.8896 4301.1719 C
-4265.583 4301.9307 -4266.4385 4301.2598 -4266.2578 4302.0967 C
-4265.9951 4302.1021 -4266.0254 4301.7783 -4266.0029 4301.6763 C
-4265.6689 4301.6953 -4265.6777 4301.9053 -4265.6953 4302.0967 C
-4265.5674 4301.8369 -4265.1465 4302.1982 -4264.9697 4301.8037 C
-4264.3193 4301.7393 -4265.0049 4302.4326 -4264.5801 4302.4229 C
-4264.335 4301.5752 L
-4263.6289 4301.7349 L
-4262.6064 4301.4375 -4263.7754 4300.2705 -4262.6064 4299.791 C
-4262.7598 4300.2334 -4262.291 4300.9766 -4261.7471 4301.1533 C
-4262.0728 4301.1846 -4262.6743 4301.7373 -4263.0947 4301.4854 C
-4262.502 4302.1494 -4263.9097 4301.5654 -4263.6025 4302.3252 C
-4263.3096 4301.9648 -4262.8213 4301.917 -4262.4409 4302.1108 C
-4262.5654 4302.1895 L
-4262.1611 4302.2793 -4261.8545 4301.3926 -4261.2959 4301.7314 C
-4261.0186 4301.7041 -4261.0703 4301.9429 -4261.1191 4302.1416 C
-4260.8843 4302.0142 -4260.6743 4301.8486 -4260.6738 4302.0356 C
f
0 D
-4261.2783 4302.2134 m
-4261.6494 4302.1294 L
-4261.5615 4302.2695 -4261.4229 4302.2646 -4261.2783 4302.2134 C
f
*U
-4214.1377 4292.2349 m
-4214.1006 4292.2573 -4214.0586 4292.2803 -4214.0249 4292.3037 C
-4214.0498 4292.2646 -4214.0923 4292.2471 -4214.1377 4292.2349 C
f
-4247.0967 4291.9102 m
-4246.8818 4291.9385 L
-4246.9658 4291.9092 -4247.0342 4291.9053 -4247.0967 4291.9102 C
f
-4242.2695 4289.1104 m
-4241.9551 4288.9126 L
-4242.0791 4288.9253 -4242.1763 4289.0039 -4242.2695 4289.1104 C
f
-4216.7021 4292.1768 m
-4216.7129 4292.1709 L
-4216.7305 4292.1846 -4216.7441 4292.2041 -4216.7627 4292.2158 C
-4216.7021 4292.1768 L
f
-4232.5869 4291.0933 m
-4232.5391 4291.165 -4232.4854 4291.23 -4232.4121 4291.2803 C
-4232.4209 4291.1963 -4232.4863 4291.1353 -4232.5869 4291.0933 C
f
-4242.3271 4289.1475 m
-4242.3193 4289.1553 -4242.3145 4289.1572 -4242.3081 4289.1631 C
-4242.2959 4289.1455 -4242.2822 4289.1265 -4242.2695 4289.1104 C
-4242.3271 4289.1475 L
f
-4249.2231 4289.4385 m
-4249.2695 4289.4648 -4249.3115 4289.4854 -4249.3608 4289.5225 C
-4249.2959 4289.5059 -4249.2559 4289.4741 -4249.2231 4289.4385 C
f
-4248.9199 4291.8408 m
-4248.9697 4291.8623 -4249.0166 4291.8887 -4249.0537 4291.9253 C
-4248.9199 4291.8408 L
f
-4256.3574 4290.1934 m
-4256.6475 4290.3145 L
-4256.5049 4290.3013 -4256.4199 4290.2544 -4256.3574 4290.1934 C
f
-4249.6865 4291.2856 m
-4249.7031 4291.3252 -4249.7197 4291.3633 -4249.7314 4291.4014 C
-4249.6914 4291.375 -4249.6719 4291.3252 -4249.6865 4291.2856 C
f
-4212.2979 4294.7617 m
-4212.3042 4294.7617 -4212.3115 4294.7646 -4212.3154 4294.7646 C
-4212.3223 4294.8633 L
-4212.2979 4294.7617 L
f
-4211.5938 4293.5269 m
-4211.5107 4293.5015 -4211.4238 4293.479 -4211.3389 4293.457 C
-4211.4336 4293.4517 -4211.5254 4293.4785 -4211.5938 4293.5269 C
f
-4228.3809 4292.457 m
-4228.3042 4292.5796 -4228.124 4292.7261 -4228.208 4292.8662 C
-4228.0615 4292.6895 -4228.0713 4292.2603 -4228.3809 4292.457 C
f
-4213.709 4300.0664 m
-4213.6631 4299.9517 -4213.6055 4299.8643 -4213.5479 4299.7783 C
-4213.6553 4299.9019 -4213.749 4300.0039 -4213.709 4300.0664 C
f
-4213.5479 4299.7783 m
-4213.4951 4299.7173 -4213.4385 4299.6533 -4213.3911 4299.5869 C
-4213.4463 4299.6416 -4213.499 4299.7061 -4213.5479 4299.7783 C
f
-4230.3311 4299.4912 m
-4230.3506 4299.4336 -4230.3799 4299.3853 -4230.4199 4299.3701 C
-4230.4082 4299.4854 -4230.376 4299.5103 -4230.3311 4299.4912 C
f
-4211.1338 4293.5928 m
-4211.0879 4293.3911 -4209.9814 4292.9517 -4210.9121 4292.8486 C
-4210.876 4292.2192 -4210.3154 4292.5576 -4210.0674 4292.4019 C
-4210.2471 4292.2544 -4209.9775 4291.998 -4210.0322 4291.7734 C
-4210.1553 4291.8496 -4210.3018 4292.0303 -4210.5049 4291.9854 C
-4210.5986 4291.6982 -4210.29 4291.5024 -4210.0488 4291.6104 C
-4210.3457 4291.2783 -4209.6719 4291.1118 -4210.0923 4290.8574 C
-4210.9902 4291.0791 -4211.625 4291.3076 -4212.2568 4292.2261 C
-4211.7451 4292.0752 -4211.1719 4291.8877 -4210.752 4292.1406 C
-4210.9287 4292.6846 L
-4211.4033 4292.2061 -4211.6963 4292.563 -4212.1631 4292.5127 C
-4211.1143 4292.8013 L
-4210.623 4293.2544 -4210.9521 4293.3584 -4211.3389 4293.457 C
-4211.2441 4293.4639 -4211.1577 4293.4966 -4211.1338 4293.5928 C
f
-4211.8398 4298.3662 m
-4211.8223 4298.3809 L
-4211.8071 4298.3623 -4211.7881 4298.3496 -4211.7783 4298.3267 C
-4211.8398 4298.3662 L
f
-4256.3042 4301.2017 m
-4256.3945 4301.4077 L
-4256.3193 4301.3145 -4256.2959 4301.2515 -4256.3042 4301.2017 C
f
-4212.4658 4295.7314 m
-4212.4648 4295.7314 L
-4212.4717 4295.7373 -4212.4736 4295.7373 -4212.4658 4295.7314 C
f
-4254.0635 4301.2437 m
-4254.0664 4301.2583 -4254.0693 4301.2744 -4254.0752 4301.291 C
-4254.0674 4301.2744 -4254.0674 4301.2583 -4254.0635 4301.2437 C
f
-4253.4639 4289.5142 m
-4253.4683 4289.4893 -4253.4697 4289.4648 -4253.4795 4289.4404 C
-4253.5273 4289.4712 -4253.5039 4289.4966 -4253.4639 4289.5142 C
f
-4254.0615 4301.1934 m
-4254.0615 4301.21 -4254.0601 4301.2261 -4254.0635 4301.2437 C
-4254.0615 4301.2261 -4254.0576 4301.209 -4254.0615 4301.1934 C
f
-4243.1641 4299.1963 m
-4243.1982 4299.1021 -4243.2529 4299.0127 V
-4243.2734 4299.063 -4243.2529 4299.1221 -4243.1641 4299.1963 C
f
-4245.3154 4298.3911 m
-4245.3154 4298.3911 L
-4245.3291 4298.3711 -4245.3369 4298.3535 -4245.3545 4298.3311 C
-4245.3154 4298.3911 L
f
-4228.8896 4290.0068 m
-4228.9961 4289.999 -4229.0762 4290.0127 -4229.1436 4290.0356 C
-4229.0654 4290.0493 -4228.9814 4290.0479 -4228.8896 4290.0068 C
f
-4254.0752 4301.291 m
-4254.0977 4301.3486 -4254.1299 4301.4077 -4254.1826 4301.4814 c
-4254.124 4301.4033 -4254.0938 4301.3433 -4254.0752 4301.291 C
f
-4239.8843 4296.4478 m
-4239.9072 4296.4692 -4239.9287 4296.4893 -4239.9502 4296.5078 C
-4239.9375 4296.5181 -4239.9238 4296.5225 -4239.9111 4296.5352 C
-4239.8843 4296.4478 L
f
-4238.7617 4296.8486 m
-4238.7998 4296.9102 -4238.8174 4296.9741 -4238.8389 4297.0303 C
-4238.4385 4296.8037 -4237.7021 4297.0493 -4237.6152 4296.4712 C
-4237.751 4296.4854 -4238.4561 4296.1455 -4238.3359 4295.8062 C
-4238.6152 4295.9512 -4239.0283 4295.5454 -4239.1787 4295.6406 C
-4238.7197 4295.957 -4239.1289 4296.1289 -4239.4385 4296.3232 C
-4239.7197 4296.1553 -4239.3857 4295.8584 -4239.6279 4295.7515 C
-4240.2793 4295.8145 L
-4239.7119 4295.8916 L
-4239.8843 4296.4478 L
-4239.8633 4296.4292 -4239.8486 4296.417 -4239.8262 4296.3955 C
-4238.8662 4296.1353 -4239.7451 4297.21 -4238.7617 4296.8486 C
f
-4238.8389 4297.0303 m
-4238.8994 4297.0654 -4238.9521 4297.1079 -4238.9932 4297.167 C
-4238.9023 4297.1582 -4238.8672 4297.1016 -4238.8389 4297.0303 C
f
-4234.917 4297.9478 m
-4234.8682 4297.9292 -4234.8145 4297.9033 -4234.7471 4297.8599 c
-4234.7793 4297.8809 -4234.8535 4297.9077 -4234.917 4297.9478 C
f
-4263.6582 4297.167 m
-4263.6416 4297.3311 -4263.082 4297.6685 -4263.0923 4297.2407 C
-4263.0923 4297.2407 L
-4263.2583 4297.1982 -4263.4258 4297.1533 -4263.5938 4297.1064 C
-4263.6582 4297.167 L
f
-4224.2334 4295.4604 m
-4224.2959 4295.4478 -4224.3584 4295.4429 -4224.4209 4295.4502 C
-4224.4346 4295.4712 -4224.4473 4295.4951 -4224.457 4295.5166 C
-4224.4189 4295.5796 -4224.2959 4295.5015 -4224.2334 4295.4604 C
f
-4238.1631 4295.605 m
-4238.2656 4295.6709 -4238.3115 4295.7383 -4238.3359 4295.8062 C
-4238.2695 4295.7725 -4238.208 4295.7173 -4238.1631 4295.605 C
f
-4224.1982 4296.4785 m
-4224.1191 4296.6006 -4224.002 4296.7871 -4223.9854 4296.9502 C
-4223.8232 4296.9541 -4223.709 4296.7295 -4223.5439 4296.6494 C
-4223.7305 4296.7119 -4223.9463 4296.6685 -4224.1982 4296.4785 C
f
-4223.5303 4296.6416 m
-4223.5352 4296.6455 -4223.54 4296.6475 -4223.5439 4296.6494 C
-4223.5391 4296.6494 -4223.5352 4296.644 -4223.5303 4296.6416 C
f
*u
1 D
-4263.9912 4296.9854 m
-4264.0391 4297.0181 -4264.0889 4297.0479 -4264.1396 4297.0752 C
-4264.0625 4296.9604 L
-4264.1914 4296.9185 -4264.3193 4296.8774 -4264.4473 4296.8311 C
-4264.4937 4296.8584 -4264.5439 4296.8843 -4264.6055 4296.8984 C
-4264.5811 4296.8843 -4264.5615 4296.8389 -4264.5498 4296.792 C
-4264.5913 4296.7764 -4264.6318 4296.7593 -4264.6729 4296.7422 C
-4264.9795 4297.1851 -4265.7417 4297.5088 -4265.9619 4297.7695 C
-4266.2529 4297.959 -4266.6089 4298.0664 -4266.832 4298.0313 C
-4266.625 4298.041 -4266.3506 4297.9517 -4266.4326 4297.707 C
-4266.8535 4297.4517 -4267.0576 4296.7173 -4267.7832 4297.3486 C
-4267.3574 4297.3389 L
-4268.3145 4298.2896 L
-4268.6494 4297.8955 -4267.8369 4297.8145 -4267.7041 4297.4727 C
-4268.4482 4297.9414 -4269.0674 4296.6895 -4269.4121 4297.5127 C
-4269.4609 4297.0244 -4269.542 4296.21 -4270.0303 4296.2583 C
-4269.6787 4296.8145 -4270.3232 4296.6157 -4270.0342 4297.2119 C
-4270.2031 4297.4912 -4270.5791 4297.0356 -4270.6074 4297.4014 C
-4270.5615 4297.1992 L
-4271.3955 4296.4263 -4271.668 4297.6377 -4272.0249 4298.0356 C
-4273.0234 4298.2349 -4273.4814 4297.9185 -4274.2959 4298.0015 C
-4274.3281 4297.6743 -4274.5498 4296.7744 -4274.876 4296.8086 C
-4275.0283 4297.2515 -4275.7646 4297.4561 -4275.8398 4298.0225 C
-4275.2559 4298.2598 -4275.3623 4297.5479 -4275.0127 4297.415 C
-4274.7217 4298.0093 -4274.9863 4298.0024 -4274.5889 4298.3584 C
-4274.9097 4298.1274 -4276.0381 4298.6685 -4276.3896 4298.1104 C
-4276.2656 4298.0313 L
-4276.8262 4297.6934 -4276.9336 4296.291 -4277.8682 4297.1396 C
-4278.3135 4297.4873 L
-4278.292 4297.4307 -4278.29 4297.3643 -4278.2783 4297.3135 C
-4279.0078 4297.2544 -4278.8086 4296.6094 -4279.6143 4297.1182 c
-4279.5522 4297.0791 -4279.5913 4297.0166 -4279.5283 4296.9785 C
-4279.9873 4296.6597 -4280.4502 4297.2998 -4280.7979 4297.4336 C
-4281.0098 4296.9604 -4280.7471 4296.9683 -4280.6162 4296.6265 C
-4281.4238 4296.4429 -4282.2959 4297.2544 -4282.7979 4297.8311 C
-4283.3184 4297.5537 L
-4283.0098 4297.3584 -4282.6318 4296.8599 -4282.7266 4296.5742 C
-4283.0127 4296.6685 -4282.957 4296.8926 -4283.3623 4296.8013 C
-4283.293 4296.499 -4283.123 4296.2173 -4282.9326 4295.8369 C
-4283.7705 4295.3311 -4283.1201 4296.9092 -4283.7061 4295.9814 C
-4283.9697 4295.9751 -4284.1221 4296.417 -4284.1514 4296.7822 C
-4284.6279 4296.3037 L
-4284.6807 4296.7695 -4285.2695 4296.7959 -4285.6553 4296.8662 C
-4285.7021 4297.0664 -4285.3447 4297.3623 -4285.1982 4297.1816 C
-4285.2275 4297.5479 -4285.6377 4297.7192 -4285.9014 4297.7124 C
-4285.998 4296.7373 -4287.6299 4297.8535 -4287.3174 4296.7041 C
-4288.5029 4297.021 -4290.1689 4297.1201 -4290.9512 4297.5269 C
-4291.209 4297.2573 -4291.7354 4297.2437 -4291.4199 4296.7856 C
-4292.374 4296.7822 -4292.8662 4297.7832 -4293.8135 4297.5166 C
-4293.8921 4297.394 -4293.3857 4297.5078 -4293.4189 4297.1816 C
-4294.0381 4297.5732 -4294.5459 4296.7695 -4295.5063 4297.0303 C
-4295.3447 4297.0127 -4295.2979 4296.8115 -4295.2754 4296.71 C
-4295.2583 4296.8716 -4295.6689 4297.0454 -4295.917 4297.2017 C
-4296.0566 4297.1182 -4295.7314 4297.0854 -4295.8096 4296.9604 C
-4297.665 4296.4873 -4299.0791 4297.8135 -4300.9248 4297.7695 c
-4300.3975 4297.7822 -4300.1982 4297.1353 -4300.1929 4296.8716 C
-4300.709 4296.8599 L
-4300.9082 4297.1816 -4301.2959 4297.1816 -4301.6201 4297.4229 C
-4301.6602 4297.3013 -4301.8174 4297.1709 -4301.6567 4297.0181 C
-4302.6768 4296.3643 -4303.25 4298.1982 -4304.5 4297.8623 C
-4302.9863 4296.5591 L
-4303.3608 4296.105 L
-4302.6953 4295.5127 L
-4303.0928 4295.1553 -4303.4385 4295.9814 -4303.4863 4295.4912 C
-4303.4023 4295.3535 -4303.2002 4295.3975 -4303.1934 4295.1328 C
-4303.5752 4294.9414 -4303.6055 4295.3062 -4303.8921 4295.4014 C
-4303.1362 4294.4053 -4301.6543 4294.4209 -4300.8564 4294.1768 C
-4300.7314 4294.0977 -4300.9639 4294.417 -4300.9863 4294.5181 C
-4300.6611 4294.4854 -4300.4658 4294.7959 -4300.0557 4294.623 C
-4299.8018 4294.2017 -4300.25 4294.3135 -4300.4521 4294.2695 C
-4300.4238 4293.9033 -4300.3223 4293.9253 -4300.0977 4293.8701 C
-4300.0488 4294.3584 -4298.8633 4294.0435 -4298.5732 4294.6392 C
-4297.3721 4294.4854 -4298.7656 4293.375 -4297.5928 4293.5869 C
-4297.2422 4294.1455 L
-4296.5615 4293.7139 -4295.6807 4293.3311 -4294.9102 4293.4502 C
-4295.0728 4293.4683 L
-4295.1807 4293.707 -4295.002 4293.8545 -4294.9229 4293.9766 C
-4294.3408 4294.2158 -4293.8174 4293.5376 -4293.4648 4294.0967 C
-4292.8008 4293.5024 -4291.6934 4293.063 -4290.9346 4292.7568 C
-4290.7295 4293.4932 -4291.9248 4293.3809 -4292.2407 4293.8413 C
-4291.5498 4293.8389 L
-4291.9766 4293.8486 -4292.1455 4294.1289 -4292.4014 4294.5479 C
-4291.7959 4294.6846 -4291.5967 4294.04 -4291.0225 4293.8535 C
-4291.0674 4294.0537 -4290.9902 4294.1768 -4290.7256 4294.1816 C
-4290.6504 4293.6934 L
-4290.6455 4293.7334 -4290.6162 4293.7705 -4290.5342 4293.8013 C
-4289.5127 4293.5024 L
-4289.7295 4293.2935 -4289.7402 4292.8677 -4290.0039 4292.8623 C
-4289.9097 4293.1475 -4290.1338 4293.2041 -4290.3975 4293.1963 C
-4290.166 4292.8774 -4290.6553 4292.9272 -4290.6494 4292.6631 C
-4290.1201 4292.6763 -4289.4697 4292.6104 -4289.1221 4292.4766 C
-4289.0098 4292.9272 L
-4288.5049 4293.041 -4287.9717 4292.7896 -4287.6299 4292.9209 C
-4287.7373 4293.1597 L
-4287.1318 4293.2979 -4286.5361 4293.0078 -4285.998 4293.4473 C
-4285.458 4292.9326 -4284.7783 4292.5039 -4284.3369 4291.9648 C
-4284.1006 4291.3843 -4282.752 4292.6953 -4282.1436 4291.8774 C
-4282.1025 4291.9395 -4282.5615 4292.3145 -4282.7695 4292.5342 C
-4282.3643 4292.624 -4282.042 4291.9014 -4281.915 4292.5132 C
-4282.8242 4292.3076 -4281.8662 4293.0015 -4282.2759 4293.1753 C
-4281.8506 4293.1641 -4281.4014 4293.0537 -4281.1929 4292.8354 C
-4281.8818 4292.8398 -4280.9482 4291.9893 -4281.6455 4292.2559 C
-4281.1055 4291.7412 -4280.3682 4291.5356 -4279.7241 4291.7349 C
-4279.7305 4291.999 -4279.6514 4292.1221 -4279.4111 4292.2314 C
-4279.2178 4291.8486 L
-4278.916 4291.9185 -4279.7998 4292.3013 -4279.1934 4292.4385 C
-4278.5693 4291.7832 -4277.3145 4292.8096 -4277.041 4291.5977 C
-4276.5654 4292.0767 -4277.9463 4292.083 -4277.2295 4292.6685 C
-4277.6465 4293.1064 -4278.2217 4292.605 -4278.3594 4293.21 C
-4277.9502 4293.0376 -4278.21 4293.7212 -4277.9463 4293.7271 C
-4277.4902 4293.3545 L
-4277.5913 4293.3311 L
-4276.8262 4292.7603 -4275.6143 4293.0342 -4274.6377 4292.9375 C
-4273.8105 4292.3281 -4273.2407 4291.4478 -4272.248 4291.5142 C
-4272.541 4291.8716 -4271.4238 4291.8584 -4272.0488 4292.5132 C
-4271.5898 4292.8286 -4271.1362 4292.4551 -4271.127 4292.1909 C
-4271.5313 4292.1006 -4271.2695 4292.1064 -4271.6094 4291.9766 C
-4271.3799 4291.6563 -4270.8506 4291.6709 -4270.6328 4291.8799 C
-4270.7334 4291.8564 -4270.6953 4291.9185 -4270.7178 4292.0181 C
-4270.2354 4292.2334 -4270.4863 4291.6997 -4270.1377 4291.5664 C
-4270.0273 4292.0142 -4269.3682 4291.6865 -4269.0498 4291.9185 C
-4268.5879 4291.2793 L
-4268.8418 4291.6992 -4268.1455 4291.4326 -4268.0728 4291.8188 C
-4267.7417 4291.5225 -4267.4639 4291.0024 -4266.96 4291.1157 C
-4267.168 4291.3354 -4266.5 4291.4326 -4266.4912 4291.8584 C
-4265.6279 4292.2661 -4265.0615 4290.6963 -4264.2441 4291.3062 C
-4264.2695 4291.4063 -4264.4346 4291.6865 -4264.1953 4291.7935 C
-4264.0068 4291.6743 -4263.6777 4291.7246 -4263.4761 4291.6782 C
-4263.4824 4291.6904 L
-4263.4785 4291.6865 -4263.4761 4291.6816 -4263.4717 4291.6782 C
-4263.373 4291.6553 -4263.3115 4291.6021 -4263.3086 4291.499 C
-4262.9639 4291.082 -4262.7861 4290.6553 -4262.1079 4290.3013 C
-4262.1577 4289.8135 -4262.7305 4290.0024 -4262.9785 4290.1597 C
-4263.1929 4290.6416 L
-4263.3975 4289.9053 -4263.8047 4290.7695 -4263.9609 4290.521 C
-4263.5537 4289.6582 -4262.3818 4289.8701 -4261.6787 4289.3398 C
-4262.1074 4288.6597 -4263.04 4288.5537 -4263.8535 4288.6353 C
-4263.4951 4288.9287 L
-4263.9209 4288.9385 L
-4263.5088 4289.457 L
-4263.9121 4289.3662 -4264.2607 4289.499 -4264.625 4289.4692 C
-4264.1982 4289.46 -4264.0322 4290.1328 -4264.2734 4290.0264 C
-4264.749 4289.5479 -4264.7695 4290.3389 -4265.1328 4290.3096 C
-4264.9307 4290.3545 -4264.667 4290.3623 -4264.8369 4290.6416 C
-4265.5537 4290.0557 -4265.7471 4290.4375 -4266.3994 4289.8115 C
-4266.3184 4290.625 -4267.2139 4289.8926 -4267.3115 4290.5591 C
-4267.0088 4290.6274 L
-4267.6504 4291.1187 L
-4268.2422 4290.4561 -4267.126 4290.4429 -4268.0273 4289.9741 C
-4268.8584 4289.8926 -4268.8369 4290.7471 -4269.4902 4290.8101 C
-4269.2754 4290.3286 -4268.7568 4289.915 -4268.2295 4289.9287 C
-4268.5488 4289.6963 L
-4268.3799 4289.417 -4267.6504 4289.4756 -4267.2861 4289.5044 C
-4267.8877 4290.0576 -4267.0049 4289.6743 -4266.7314 4290.1064 C
-4266.6807 4289.6406 -4267.0674 4289.7139 -4266.6113 4289.3398 C
-4267.0381 4289.3486 -4267.1006 4289.3877 -4267.6445 4289.2119 C
-4266.4697 4289.4238 -4266.5879 4287.5933 -4265.5625 4287.9854 C
-4266.0352 4288.1963 -4265.3975 4288.6582 -4265.3408 4288.8843 C
-4265.1182 4288.8281 -4264.667 4288.7173 -4264.4814 4288.6006 C
-4264.6494 4287.9272 L
-4264.0522 4287.6353 -4263.8447 4289.0625 -4263.1553 4288.3677 C
-4263.0654 4287.9648 -4263.7617 4288.2314 -4263.6377 4288.1533 C
-4262.6943 4287.73 -4262.3545 4288.8145 -4261.5166 4289.3223 C
-4261.4697 4289.1201 -4261.4795 4288.6934 -4261.1865 4288.3369 C
-4261.2783 4288.7412 -4261.0615 4288.9478 -4261.3911 4289.2437 C
-4261.1113 4289.415 -4260.7793 4289.1182 -4260.5322 4288.9604 C
-4261.1152 4288.7236 -4260.2939 4288.3799 -4260.1865 4288.1377 C
-4259.8843 4288.2061 -4260.2783 4288.541 -4260.4639 4288.6582 C
-4260.2217 4288.7661 -4259.9336 4289.3623 -4259.7959 4288.7568 C
-4259.7861 4289.1816 -4260.4736 4289.8774 -4260.9229 4289.9873 C
-4260.6201 4290.0557 L
-4260.8291 4290.2734 -4260.8682 4290.2119 -4261.1689 4290.1455 C
-4260.874 4290.4756 -4260.9033 4290.8398 -4260.9717 4291.1431 C
-4261.0107 4291.0811 -4260.9502 4291.042 -4260.9873 4290.9814 C
-4261.2295 4290.873 -4261.415 4290.9893 -4261.3594 4291.2158 C
-4261.5771 4291.7876 -4261.0234 4291.5732 -4260.8594 4291.8584 C
-4260.7354 4291.8213 -4260.6113 4291.7822 -4260.4893 4291.7437 C
-4259.2314 4289.9072 L
-4258.6934 4289.6934 -4258.4521 4290.1328 -4258.0479 4290.4102 C
-4257.9375 4289.9185 L
-4257.4697 4289.9692 -4257.0283 4290.125 -4257.3281 4290.7471 C
-4257.3447 4290.583 -4257.4063 4290.6221 -4257.5078 4290.5977 C
-4257.5215 4290.665 -4257.5449 4290.7124 -4257.5742 4290.7515 C
-4257.584 4290.7803 -4257.5898 4290.8086 -4257.5977 4290.8369 C
-4257.0967 4290.6782 -4256.7842 4290.5752 -4256.7549 4290.5566 C
-4257.6055 4291.2695 -4256.7979 4291.4478 -4256.9399 4292.3188 C
-4256.0811 4292.0352 L
-4256.6016 4291.7593 -4256.0903 4291.6094 -4255.9053 4291.4912 C
-4255.8545 4291.9814 -4255.2139 4291.4873 -4254.9121 4291.5557 C
-4254.9346 4291.6563 L
-4254.6553 4291.8262 -4254.166 4291.7783 -4253.8184 4291.6455 C
-4253.834 4291.4814 -4253.3877 4290.6807 -4253.1738 4290.1982 C
-4253.7705 4290.0142 -4253.416 4289.8184 -4253.4639 4289.5142 C
-4253.4023 4289.542 -4253.291 4289.5479 -4253.2783 4289.4854 C
-4253.1929 4289.3462 -4253.3945 4289.2998 -4253.4111 4289.1377 C
-4254.0459 4289.3662 -4254.6982 4289.4307 -4254.957 4290.1143 C
-4254.7627 4290.4238 -4254.625 4289.8184 -4254.4072 4290.0254 C
-4254.7217 4290.4854 -4255.127 4290.394 -4255.6543 4290.3809 C
-4255.8271 4289.9712 L
-4256.3574 4290.1934 L
-4256.1362 4289.9766 -4256.2695 4289.5479 -4255.7129 4289.4648 C
-4255.7842 4289.0791 -4256.2646 4289.5537 -4256.6055 4289.4238 C
-4256.7803 4289.9683 L
-4256.7129 4289.665 -4257.4424 4289.6064 -4256.9238 4289.1924 C
-4256.0811 4288.7471 L
-4256.3154 4288.375 L
-4255.6025 4288.2705 L
-4255.7705 4288.5518 L
-4254.625 4288.1753 -4255.4326 4289.6353 -4254.2803 4288.9927 C
-4253.9189 4288.333 -4253.5313 4288.2622 -4252.8247 4288.4229 C
-4253.3359 4288.5703 -4252.877 4288.8877 -4253.0693 4289.2695 C
-4252.5479 4289.5449 -4252.3721 4289.0015 -4252.1016 4288.7437 C
-4251.9688 4289.0923 -4251.874 4289.3774 -4252.3398 4289.3262 C
-4252.3984 4290.0557 -4251.7275 4289.1997 -4251.6846 4289.9512 C
-4250.1416 4289.9287 -4250.4482 4287.5254 -4248.6445 4288.4639 C
-4248.7119 4288.7661 L
-4247.5664 4288.3896 -4246.9053 4288.7515 -4245.8447 4288.5127 C
-4245.0098 4289.2832 L
-4245.1963 4289.4014 -4245.6982 4289.9771 -4245.4639 4290.3486 C
-4245.8701 4289.5688 -4246.3018 4289.8413 -4246.7393 4289.4238 C
-4246.7842 4289.6265 -4246.6055 4289.7725 -4246.5283 4289.8975 C
-4246.792 4289.8896 -4246.9248 4289.541 -4247.2734 4289.6763 C
-4247.2568 4289.8369 -4246.876 4290.0303 -4247.1631 4290.125 C
-4247.6377 4289.6455 L
-4248.2725 4289.874 -4247.9502 4290.7935 -4248.6963 4290.5732 C
-4248.5576 4290.1455 -4248.2744 4289.5264 -4247.9854 4289.4238 C
-4248.3262 4289.3311 -4247.5313 4289.165 -4247.8423 4288.9092 C
-4248.333 4289.5435 -4248.5703 4289.041 -4249.2231 4289.4385 C
-4249.1465 4289.3496 -4249.126 4289.2256 -4248.9658 4289.1865 C
-4249.9131 4288.9185 L
-4249.6787 4289.2896 -4250.6953 4289.3262 -4250.6074 4289.8774 C
-4249.5977 4290.105 -4249.8945 4289.7725 -4248.7441 4290.0854 C
-4249.0693 4290.21 -4249.4893 4290.7705 -4249.6865 4291.2856 C
-4249.6963 4291.2646 -4249.7129 4291.2471 -4249.748 4291.2373 C
-4249.9238 4291.7822 -4249.7451 4291.9287 -4249.748 4292.8809 C
-4249.2231 4292.2041 -4248.8721 4292.7617 -4248.2529 4292.3716 C
-4248.1362 4291.8496 -4248.6123 4291.7061 -4248.9199 4291.8408 C
-4248.374 4291.4951 L
-4248.4814 4291.7349 L
-4247.0967 4291.9102 L
-4247.3594 4291.9385 -4247.4482 4292.2407 -4247.585 4292.4688 C
-4247.4063 4292.4893 -4247.2295 4292.6274 -4247.041 4292.7783 C
-4247.0811 4292.2803 -4247.0557 4291.9287 -4246.8818 4291.9385 C
-4245.9902 4292.0566 -4245.4951 4292.5039 -4245.166 4293.0728 C
-4245.1318 4293.0615 -4245.0938 4293.0493 -4245.0625 4293.0376 C
-4245.2119 4292.5269 -4244.4297 4292.1201 -4244.1533 4291.5977 C
-4244.167 4292.1265 -4243.6943 4291.915 -4243.4375 4292.1846 C
-4243.3008 4291.5791 -4243.4834 4290.7432 -4243.7959 4290.248 C
-4244.3984 4290.8013 -4244.1338 4290.8062 -4244.418 4291.5923 C
-4245.3848 4292.1157 L
-4245.1689 4291.6328 L
-4245.6514 4291.4199 -4246.1143 4292.0576 -4246.0791 4291.4292 C
-4245.8242 4291.0103 -4245.4033 4291.2646 -4245.1504 4290.8438 C
-4245.4697 4290.6143 L
-4244.9063 4289.9966 -4245.1807 4291.209 -4244.499 4290.7783 C
-4244.75 4290.2437 -4244.4375 4290.7393 -4244.1455 4290.3809 C
-4244.3799 4290.0093 -4245.3457 4290.5342 -4245.1406 4289.6265 C
-4244.7861 4289.2295 -4243.9482 4290.6904 -4243.4795 4289.7876 C
-4243.502 4289.8896 L
-4242.8105 4290.0078 -4242.5674 4289.4893 -4242.3081 4289.1631 C
-4242.0137 4289.457 -4241.6074 4289.0435 -4241.2881 4289.0103 C
-4241.2959 4289.2744 L
-4240.8457 4289.1641 L
-4241.0601 4289.6455 -4241.373 4289.1509 -4241.7598 4289.2212 C
-4241.7119 4289.7119 L
-4242.1577 4289.1294 -4242.4551 4290.0142 -4242.8008 4290.4375 C
-4242.2979 4290.0127 -4241.3799 4290.5576 -4241.2617 4289.5977 C
-4240.9502 4290.0942 L
-4240.8018 4289.915 L
-4240.5693 4290.2871 -4240.8066 4290.8701 -4241.2559 4290.9814 C
-4241.334 4290.8574 -4241.373 4290.7959 -4241.3496 4290.6934 C
-4241.5586 4290.9126 -4241.75 4291.2935 -4242.2549 4291.1807 C
-4241.9854 4290.9209 L
-4242.6143 4290.8853 -4243.1865 4291.0752 -4243.4014 4291.5576 C
-4242.4937 4291.7622 -4241.6006 4291.8057 -4240.748 4291.7832 C
-4240.4971 4290.6743 -4240.1982 4290.0518 -4240.0703 4289.021 C
-4239.498 4288.8311 -4238.7217 4288.6895 -4238.2246 4289.0664 C
-4238.2705 4289.2695 L
-4238.0283 4289.375 -4237.8047 4289.3188 -4237.6182 4289.2017 C
-4237.3623 4289.4727 -4237.7939 4289.7471 -4237.6152 4289.8936 C
-4236.7959 4289.5479 L
-4236.8467 4290.0142 -4237.5361 4290.0166 -4237.8633 4290.0493 C
-4237.8018 4290.0103 -4237.6768 4289.9326 -4237.7168 4289.8701 C
-4238.0977 4289.6782 -4238.8071 4290.4727 -4238.9736 4289.7979 C
-4239.1592 4289.915 -4238.5967 4289.2998 -4239.2246 4289.2646 C
-4239.6455 4289.0103 -4239.7822 4289.6157 -4239.8262 4289.8184 C
-4239.833 4290.083 -4239.166 4290.1807 -4239.3975 4290.499 C
-4239.0703 4290.4648 -4238.9399 4290.125 -4238.5215 4290.3799 C
-4238.8457 4290.4121 -4239.2861 4290.9478 -4239.459 4290.5376 C
-4240.1006 4291.0303 -4240.0088 4292.2705 -4239.7061 4292.3389 C
-4239.7783 4291.9502 -4238.5361 4291.8599 -4239.377 4291.3535 C
-4238.999 4290.8535 -4238.3086 4290.8496 -4237.8145 4290.5376 C
-4237.8369 4290.6377 L
-4237.2231 4290.5127 L
-4237.3096 4290.6509 -4237.4951 4290.7695 -4237.501 4291.0313 C
-4236.6514 4290.3232 L
-4237.1299 4290.7998 -4236.3545 4290.6543 -4236.1367 4290.8643 C
-4236.0459 4290.46 -4235.7139 4290.1641 -4236.0322 4289.9326 C
-4236.3906 4289.6392 -4236.2407 4290.1509 -4236.5664 4290.1816 C
-4236.1055 4289.5449 L
-4236.0654 4289.6064 L
-4235.7881 4289.0854 L
-4235.1602 4289.1221 -4236.0625 4290.2979 -4235.2578 4289.7876 C
-4235.3623 4289.0767 L
-4234.4307 4289.1816 -4233.2334 4289.9814 -4232.5752 4289.6533 C
-4232.7568 4290.0576 -4232.8369 4290.708 -4232.5869 4291.0933 C
-4232.8711 4290.9712 -4233.4414 4290.9966 -4233.8486 4291.063 C
-4233.9272 4290.9385 -4233.3398 4290.2227 -4232.8975 4290.3765 C
-4233.1123 4289.2119 -4234.0107 4291.0791 -4234.0625 4289.8984 C
-4235.1895 4289.4873 -4234.9033 4291.0356 -4235.8604 4290.3433 C
-4235.873 4290.8701 -4236.1318 4290.6006 -4236.1826 4291.0654 C
-4235.8994 4291.9253 -4234.9033 4291.0356 -4234.2822 4291.3369 C
-4234.3433 4291.375 -4234.4658 4291.4541 -4234.4893 4291.5537 C
-4234.0459 4291.708 -4233.8623 4291.5908 -4233.5522 4291.3955 C
-4233.5913 4291.333 L
-4233.0498 4290.8184 -4233.2559 4291.7261 -4232.9375 4291.958 C
-4232.8135 4291.8799 -4232.3701 4292.0313 -4232.4414 4291.6455 C
-4231.8643 4292.1465 L
-4231.8921 4291.5576 L
-4231.5664 4291.5225 -4231.4951 4291.9121 -4231.2002 4291.5537 C
-4231.1865 4291.0269 L
-4231.9951 4290.8438 L
-4231.585 4290.6719 -4231.8809 4290.3398 -4231.4307 4290.2295 C
-4231.9336 4290.8057 -4231.0742 4290.5215 -4231.0249 4291.0103 C
-4230.6934 4290.7139 L
-4230.7783 4290.8545 L
-4230.5186 4291.125 -4230.4688 4290.6582 -4230.165 4290.7271 C
-4230.5234 4290.4336 -4230.7578 4290.063 -4231.2139 4290.4375 C
-4230.8818 4290.1416 -4230.2231 4289.8135 -4230.0615 4289.7959 C
-4229.7129 4289.5752 -4229.4697 4289.9766 -4229.1436 4290.0356 C
-4229.7695 4290.2471 -4228.9238 4291.6328 -4230.1787 4291.2544 C
-4230.1553 4291.1533 -4230.0537 4291.1763 -4230.0146 4291.2383 C
-4230.1816 4290.5654 -4230.7666 4291.2803 -4231.0381 4291.5376 C
-4230.9683 4291.9253 -4231.2529 4292.021 -4230.7705 4292.2349 C
-4230.9287 4291.9873 -4230.3643 4291.3716 -4229.9053 4291.6895 C
-4229.9863 4292.5181 L
-4229.3184 4292.6157 L
-4229.3809 4292.6553 L
-4229.1299 4293.1895 -4228.668 4292.5518 -4228.208 4292.8662 C
-4227.876 4292.5703 -4226.6025 4292.8057 -4227.1504 4291.9385 C
-4226.7373 4292.457 -4226.375 4291.7959 -4225.9248 4291.6846 C
-4226.4863 4291.3462 L
-4225.8223 4290.7524 -4226.0137 4291.1353 -4225.4824 4290.1924 C
-4225.4287 4290.4185 -4225.3105 4290.605 -4225.418 4290.8438 C
-4224.5264 4290.8877 -4223.2529 4291.1221 -4222.7295 4290.4429 C
-4222.1006 4290.479 -4222.002 4291.4561 -4221.1201 4291.0728 C
-4220.9346 4290.9561 -4221.2646 4290.2979 -4220.6807 4290.5356 C
-4220.6416 4290.5977 -4221.2432 4291.1504 -4220.5928 4291.0854 C
-4220.1299 4290.4473 -4219.5049 4291.4375 -4218.9023 4290.8843 C
-4218.584 4291.1143 -4218.0322 4291.0269 -4218.1475 4291.5313 C
-4218.6514 4291.417 -4219.3643 4291.5225 -4219.4727 4291.7646 C
-4219.4033 4291.46 -4219.8311 4291.4692 -4219.46 4291.2349 C
-4220.2217 4290.8535 -4219.9541 4291.5479 -4220.6377 4291.2871 C
-4220.6846 4291.4893 -4220.2861 4291.8457 -4220.1396 4291.665 C
-4220.1367 4292.3545 -4221.4873 4291.998 -4220.8799 4292.8247 C
-4220.1494 4292.8843 -4219.9326 4291.4473 -4219.2998 4292.1729 C
-4219.5537 4292.5923 -4219.9502 4292.2373 -4220.2725 4292.9604 C
-4219.7529 4293.2383 L
-4219.375 4292.7393 L
-4219.3975 4292.8413 L
-4218.4795 4293.4727 -4218.5479 4292.1318 -4217.7266 4291.7856 C
-4218.2021 4291.3076 -4217.6162 4290.5908 -4217.9746 4290.2979 C
-4217.4248 4290.21 -4217.0215 4290.3013 -4217.0176 4290.9912 C
-4218.0459 4291.5537 -4217.0762 4291.7207 -4218.0264 4292.4077 C
-4217.8701 4292.6553 -4218.2529 4293.417 -4217.6865 4293.4932 C
-4217.0479 4293.0015 -4217.877 4292.9185 -4217.2407 4292.6909 C
-4217.2031 4292.7524 -4217.1641 4292.8145 -4217.1865 4292.916 C
-4216.8936 4292.5576 -4216.8447 4293.0454 -4216.4902 4292.6494 C
-4216.5742 4292.7876 L
-4216.1377 4293.2061 -4216.0967 4292.3135 -4215.7207 4292.7695 C
-4215.8711 4292.2573 -4215.4683 4292.3496 -4215.2354 4292.0303 C
-4215.6162 4291.8369 -4215.8223 4291.1021 -4216.5742 4291.1431 C
-4216.665 4291.5479 -4216.6104 4291.7725 -4216.9189 4291.9683 C
-4216.4307 4291.9185 L
-4216.5361 4291.9854 -4216.6162 4292.0894 -4216.7129 4292.1709 C
-4217.1826 4291.9604 L
-4216.5869 4291.6719 -4216.8604 4291.2393 -4216.6074 4290.8184 C
-4216.0625 4290.9951 -4216.1577 4290.707 -4215.8154 4290.8389 C
-4215.8496 4291.4326 -4214.7646 4291.8535 -4214.1377 4292.2349 C
-4214.2354 4292.2119 -4214.3608 4292.2271 -4214.4287 4292.2119 C
-4214.8843 4292.5869 -4214.1152 4292.707 -4214.0986 4292.8701 C
-4213.7666 4292.5732 L
-4213.8291 4292.6143 -4213.915 4292.7524 -4213.7734 4292.8369 C
-4213.3242 4292.7261 -4213.3506 4292.1377 -4212.9014 4292.0264 C
-4212.8682 4292.3535 -4213.2471 4292.8496 -4212.9683 4293.021 C
-4212.8721 4293.3062 -4212.5654 4294.0654 -4211.9697 4293.7764 C
-4211.9272 4293.6509 -4211.7725 4293.5811 -4211.5938 4293.5269 C
-4211.6182 4293.5449 -4211.6494 4293.5576 -4211.6611 4293.5811 C
-4211.2646 4293.9375 L
-4211.6025 4294.4951 -4211.9473 4293.6743 -4212.2861 4294.2344 C
-4212.3154 4294.7646 L
-4212.5791 4294.7661 -4212.9375 4294.9956 -4213.1025 4295.2705 C
-4212.7002 4295.3604 -4212.6152 4295.2212 -4212.165 4295.1108 C
-4212.1025 4295.4463 -4212.4189 4295.6953 -4212.4648 4295.7314 C
-4212.3975 4295.4292 L
-4212.9346 4294.9902 -4213.2002 4295.9375 -4213.8682 4295.8389 C
-4213.9688 4295.8174 -4213.9072 4295.7783 -4213.8848 4295.6772 C
-4214.4258 4296.1909 -4214.9561 4295.4873 -4215.4814 4296.165 C
-4215.3105 4295.8853 L
-4215.668 4296.1108 -4216.3682 4296.6328 -4217.0674 4297.1377 C
-4217.0728 4297.3438 L
-4216.9951 4297.4683 -4217.2578 4297.4604 -4217.3984 4297.3774 C
-4217.3975 4297.374 L
-4217.748 4297.6265 -4218.085 4297.8584 -4218.3608 4298.0313 C
-4218.2725 4298.1592 -4218.1602 4298.2661 -4218.0303 4298.2959 C
-4217.9209 4298.0537 -4217.2783 4298.2524 -4217.3662 4297.7017 C
-4217.0693 4298.0342 -4216.5913 4297.5576 -4216.373 4297.7661 C
-4216.7705 4297.4126 -4216.0967 4297.2471 -4216.0273 4296.9429 C
-4215.8936 4297.291 -4215.4385 4296.917 -4215.4902 4297.3843 C
-4215.4121 4297.5059 -4215.6855 4297.0742 -4215.8545 4297.3545 C
-4216.2705 4297.7896 -4215.0928 4297.7373 -4215.6113 4298.1509 C
-4214.9521 4297.8232 -4214.083 4297.9648 -4213.4033 4297.5352 C
-4213.7842 4297.3438 L
-4213.4814 4297.4126 -4212.7666 4297.3086 -4212.7129 4297.5342 C
-4212.9375 4297.5889 -4213.2002 4297.583 -4213.4873 4297.6768 C
-4213.501 4298.2041 -4212.7969 4297.6729 -4212.7646 4297.999 C
-4211.9307 4297.1265 L
-4212.2959 4297.0967 L
-4212.0654 4296.7764 -4211.3018 4297.1631 -4210.7354 4297.2373 C
-4211.0601 4297.959 -4211.5898 4297.2559 -4212.1855 4297.5454 C
-4212.6182 4297.8188 -4211.918 4298.2422 -4212.3281 4298.415 C
-4212.2217 4298.583 -4211.9541 4298.563 -4211.8223 4298.3809 C
-4211.6611 4298.5127 L
-4212.0264 4299.1685 -4212.8457 4299.0225 -4213.3911 4299.5869 C
-4213.3433 4299.5166 -4213.3018 4299.4424 -4213.2861 4299.3662 C
-4213.7061 4299.1118 -4214.1328 4299.1221 -4214.542 4299.2959 C
-4214.3257 4299.5024 -4214.2402 4299.3623 -4214.1162 4299.2856 C
-4214.1006 4299.4478 -4214.4873 4299.5181 -4214.6338 4299.6982 C
-4214.2529 4299.8896 -4214.5625 4300.0854 -4214.3213 4300.1934 C
-4214.5693 4300.3496 -4214.7705 4300.3037 -4215.0728 4300.2349 C
-4215.2295 4299.9873 -4214.9434 4299.8936 -4214.9751 4299.5688 C
-4215.2861 4299.7646 -4215.4287 4298.9873 -4215.8843 4299.3623 C
-4215.2783 4299.499 -4216.0439 4300.0688 -4216.2529 4300.2876 C
-4216.1514 4300.3101 L
-4216.3433 4300.6909 -4216.5063 4300.707 -4216.6392 4300.3584 C
-4216.3911 4300.2017 -4216.1514 4300.3101 -4216.2217 4299.9229 C
-4216.3857 4299.9395 -4216.5488 4299.9561 -4216.7344 4300.0728 C
-4216.5654 4299.7935 L
-4217.3799 4299.874 L
-4217.5088 4300.2158 -4217.7241 4300.6982 -4217.8369 4301.2017 C
-4218.0322 4300.8926 -4218.3042 4301.1504 -4218.4893 4301.2695 C
-4218.4033 4301.1274 L
-4218.7627 4300.8354 -4219.5615 4301.0791 -4219.6289 4301.3809 C
-4219.8857 4301.1118 -4217.8154 4299.457 -4219.6289 4299.7373 C
-4220.3184 4299.7393 -4220.0586 4300.7017 -4220.4521 4301.0356 C
-4220.4297 4300.9375 -4220.4688 4300.874 V
-4220.7705 4300.8037 -4220.8008 4301.1709 -4221.0488 4301.3262 C
-4220.8682 4301.4727 -4220.6055 4301.479 -4220.5215 4301.3398 C
-4220.6123 4301.7432 -4221.1494 4301.3037 -4221.3809 4301.6221 C
-4221.0811 4301 -4221.9639 4301.3848 -4221.7314 4301.0654 C
-4222.3311 4300.665 -4222.9727 4301.1572 -4223.2881 4301.6157 C
-4223.6953 4300.8354 -4224.002 4301.7192 -4224.6631 4301.3584 C
-4224.5615 4301.3809 -4224.377 4301.2646 -4224.2354 4301.3486 C
-4223.8584 4300.8535 -4224.9199 4301.0889 -4224.3398 4300.6353 C
-4224.4639 4300.7139 -4224.3486 4300.8984 -4224.2217 4300.8213 C
-4223.999 4300.7656 -4223.79 4300.5479 -4223.8457 4300.3223 C
-4224.3843 4299.8843 L
-4224.1963 4299.7646 L
-4225.0137 4299.1582 L
-4225.0361 4299.2573 -4224.959 4299.3809 -4224.9199 4299.4429 C
-4225.8682 4299.1768 -4226.9521 4299.5142 -4227.7822 4299.4336 C
-4227.9385 4300.8311 -4229.8271 4300.0313 -4230.498 4300.8896 C
-4230.3184 4300.4893 -4230.2197 4299.7822 -4230.3311 4299.4912 C
-4230.1816 4299.4326 -4229.875 4298.8677 -4229.5361 4298.9854 C
-4229.4814 4299.21 -4229.0625 4299.4639 -4229.332 4299.7207 C
-4228.3945 4299.5615 -4229.459 4299.1079 -4229.1826 4298.5879 C
-4230.2217 4298.7236 -4230.8311 4299.542 -4231.4873 4299.8711 C
-4231.5039 4299.7061 L
-4231.999 4300.0181 L
-4231.5947 4300.1108 -4231.6143 4300.9033 -4232.1362 4300.6265 C
-4232.0728 4300.5869 L
-4232.3701 4300.2544 -4232.9893 4300.6455 -4233.4541 4300.5942 C
-4233.7695 4301.0518 L
-4234.2354 4301 -4234.2549 4300.1475 -4234.4063 4299.6367 C
-4235.1362 4299.5767 -4235.5576 4300.2759 -4236.0762 4300.6909 C
-4236.3105 4300.3188 -4237.4033 4300.2314 -4236.8242 4299.7803 C
-4237.4824 4300.1079 -4237.3496 4302.1006 -4238.4785 4300.9966 C
-4238.1855 4300.6377 L
-4239.2646 4300.7124 -4240.8042 4301.4263 -4241.3018 4301.0488 C
-4240.9033 4299.7598 -4242.6494 4299.7373 -4242.8418 4298.4736 c
-4242.7881 4298.7622 -4243.1934 4298.8584 -4243.2529 4299.0127 C
-4243.3418 4298.8643 -4243.4893 4298.7207 -4243.6465 4298.9814 C
-4243.2256 4299.2349 -4243.9424 4300.2935 -4243.1377 4299.7832 C
-4243.5449 4300.6494 -4244.0693 4301.3262 -4244.9619 4301.2832 C
-4244.9482 4300.7559 L
-4244.2422 4300.916 L
-4244.3135 4300.5269 -4243.9502 4300.5566 -4243.8018 4300.3774 C
-4245.1143 4300.0811 -4243.6299 4299.1431 -4244.9717 4299.2119 C
-4245.1016 4299.5537 -4245.0176 4299.4126 -4245.3662 4299.5479 C
-4245.2021 4299.5303 -4245.1729 4299.167 -4245.4375 4299.1597 C
-4245.6914 4299.5811 L
-4246.1602 4298.7017 -4244.915 4299.0088 -4245.3154 4298.3911 C
-4244.7969 4297.9771 -4243.8994 4297.7559 -4244.0664 4297.083 C
-4244.9131 4296.8389 -4244.8281 4298.3433 -4245.7129 4298.0376 C
-4245.8071 4297.7515 L
-4246.1182 4297.9463 -4246.1689 4298.4102 -4246.3389 4298.6904 C
-4246.3545 4298.5269 -4246.4336 4298.4053 -4246.6338 4298.3584 C
-4247.1592 4299.0356 -4247.5078 4299.1685 -4247.9932 4299.9077 C
-4246.7021 4299.3535 -4246.8896 4300.4229 -4245.5576 4299.9287 C
-4245.7666 4300.1475 -4246.7041 4300.3076 -4246.7617 4301.0356 C
-4246.749 4300.5078 L
-4247.1826 4300.7822 -4247.6152 4301.0537 -4248.1592 4300.8799 C
-4247.8271 4300.583 L
-4248.5479 4300.9502 -4249.0254 4299.7822 -4249.5947 4300.6597 C
-4249.3936 4300.707 -4249.2305 4300.6909 -4249.1064 4300.6108 c
-4249.4775 4300.8462 -4249.9434 4300.7935 -4250.3467 4300.7041 C
-4251.1807 4301.5752 L
-4251.1738 4301.3135 -4251.7021 4301.2979 -4251.4473 4300.8799 C
-4252.0479 4300.4785 -4252.3311 4301.2646 -4252.6787 4301.3955 C
-4253.2939 4300.8354 -4252.1455 4301.1455 -4252.085 4300.417 C
-4252.9326 4300.1729 -4253.8311 4300.3936 -4254.3096 4300.8677 C
-4254.1367 4300.9741 -4254.0527 4301.0654 -4254.0615 4301.1934 C
-4254.0869 4301.0269 -4254.4287 4301.0703 -4254.6191 4301.0654 C
-4254.75 4301.4077 L
-4255.0674 4301.1763 -4255.0225 4300.9741 -4254.7529 4300.7158 C
-4255.0557 4300.6494 -4255.417 4301.3086 -4255.7295 4300.8145 C
-4255.2119 4300.4014 -4254.5522 4300.7617 -4254.2822 4300.5044 C
-4255.3643 4300.8423 -4255.3711 4299.4604 -4256.7422 4299.8955 C
-4256.7593 4299.7314 -4256.5273 4299.4126 -4256.791 4299.4077 C
-4257.4033 4299.5342 -4256.9512 4300.1143 -4257.1426 4300.4951 C
-4256.6709 4300.2822 -4256.4521 4300.4912 -4256.1787 4300.9238 C
-4256.3042 4301.2017 L
-4256.3232 4301.0576 -4256.6191 4301.0493 -4256.7061 4300.9102 C
-4256.7822 4301.4771 L
-4256.7471 4300.8496 -4257.2207 4300.3716 -4257.5928 4300.6064 C
-4257.2168 4301.0615 -4257.3184 4301.0376 -4257.2158 4301.7524 C
-4257.7393 4302.4292 -4257.8066 4301.0869 -4258.3926 4301.8037 C
-4258.3486 4301.6021 -4257.8369 4301.4517 -4258.2793 4301.2979 C
-4258.6455 4301.2705 -4258.5967 4301.7593 -4258.8423 4301.915 C
-4258.5654 4301.3926 -4258.6367 4301.0044 -4258.3369 4300.3843 C
-4257.6865 4300.3184 -4258.0742 4300.3911 -4257.4385 4300.1631 C
-4257.9766 4299.7212 L
-4257.4258 4299.6353 -4257.5762 4299.123 -4257.5303 4298.9229 C
-4258.4717 4298.3911 -4258.2402 4299.7168 -4258.8457 4299.5796 C
-4259.1377 4299.9385 -4258.2783 4299.6553 -4258.7354 4300.0303 C
-4259.3018 4299.9541 -4258.8643 4300.3716 -4259.5 4300.5977 C
-4259.3936 4300.3584 L
-4259.5879 4300.0479 -4259.7803 4300.4307 -4260.0049 4300.4829 C
-4260.252 4300.6416 -4259.7246 4302.2998 -4260.7417 4302.3354 C
-4260.6919 4302.1895 -4260.6738 4302.0967 -4260.6738 4302.0356 C
-4259.6816 4297.6455 L
-4260.7119 4297.6563 -4261.8994 4297.5342 -4263.0923 4297.2393 C
-4263.373 4296.3809 -4262.2407 4296.5313 -4262.3135 4296.1455 C
-4261.7695 4296.3213 L
-4261.7998 4296.6851 -4262.9097 4296.4336 -4262.418 4297.0767 C
-4261.457 4296.8145 -4261.0215 4297.2334 -4260.1094 4296.4829 C
-4260.3926 4295.623 -4261.3105 4296.6353 -4261.9033 4295.9712 C
-4261.6543 4296.0269 -4261.4443 4295.9326 -4261.2402 4295.8096 C
-4261.7969 4295.6997 -4262.3926 4295.5811 -4263.0264 4295.4478 C
-4263.1689 4295.6563 L
-4262.7417 4295.7524 -4262.4463 4295.8262 -4262.4082 4295.8574 C
-4262.9746 4295.7822 -4263.4521 4296.2583 -4263.4893 4296.8877 C
-4263.3887 4296.9102 L
-4263.5938 4297.1064 L
-4263.7266 4297.0664 -4263.8594 4297.0269 -4263.9912 4296.9854 C
f
-4300.6934 4296.8369 m
-4300.6592 4296.7764 -4300.6318 4296.7061 -4300.6123 4296.6182 c
-4300.6328 4296.71 -4300.6094 4296.7695 -4300.6934 4296.8369 C
f
0 D
-4252.9033 4294.875 m
-4253.6582 4294.7832 -4254.4199 4294.6118 -4255.1455 4294.5356 C
-4253.8359 4295.7793 -4252.915 4296.7207 -4255.1006 4296.6963 C
-4255.2441 4296.7856 L
-4254.958 4296.9385 -4254.4658 4296.957 -4254.002 4296.8672 C
-4253.627 4296.4263 -4252.417 4294.8062 -4252.4307 4294.6631 C
-4252.5635 4294.3145 -4252.7568 4294.6953 -4252.998 4294.5889 C
-4252.9033 4294.875 L
f
-4252.3662 4296.958 m
-4251.9385 4297.0967 -4252.0361 4296.8213 -4251.9697 4296.5732 C
-4252.1201 4296.605 -4252.2705 4296.6377 -4252.4189 4296.667 C
-4252.3623 4296.7295 -4252.334 4296.8174 -4252.3662 4296.958 C
f
1 D
-4251.9951 4296.3252 m
-4252.043 4296.3188 -4252.084 4296.3076 -4252.1055 4296.2744 C
-4251.9951 4296.3252 L
f
0 D
-4260.3193 4296.0103 m
-4260.2998 4296.0044 -4260.293 4295.999 -4260.2754 4295.9951 C
-4260.376 4295.9751 -4260.4775 4295.957 -4260.583 4295.9375 C
-4260.542 4295.9771 -4260.4639 4296.0078 -4260.3193 4296.0103 C
f
-4259.4502 4296.6182 m
-4259.3486 4296.1641 L
-4259.4434 4296.1475 -4259.5391 4296.1294 -4259.6377 4296.1118 C
-4259.6055 4296.3174 -4259.5713 4296.4966 -4259.4502 4296.6182 C
f
-4256.6582 4298.1118 m
-4256.4824 4297.5664 -4255.8926 4297.542 -4255.8564 4296.9126 C
-4255.8193 4296.7515 -4255.9434 4296.6895 -4256.082 4296.6377 C
-4256.2373 4296.623 -4256.4033 4296.6055 -4256.5791 4296.5854 C
-4256.585 4296.6768 -4256.6201 4296.7622 -4256.6787 4296.8438 C
-4256.5049 4296.9229 -4256.3887 4297.0791 -4256.459 4297.4648 C
-4256.9053 4296.623 -4256.8594 4298.0654 -4257.3418 4297.8496 C
-4257.4951 4298.2935 -4256.8047 4298.2896 -4256.6582 4298.1118 C
f
1 D
-4219.5752 4296.4727 m
-4219.5615 4296.5269 -4219.5146 4296.6685 -4219.4482 4296.8438 C
-4219.7881 4297.1553 L
-4220.3945 4297.0181 -4220.8799 4296.1143 -4221.4258 4296.8916 C
-4221.6807 4296.6963 -4221.8174 4296.2832 -4221.9482 4295.9429 C
-4221.8232 4295.9683 -4221.7061 4296.0015 -4221.6089 4296.0537 C
-4220.0791 4294.915 -4220.8115 4297.2544 -4219.5752 4296.4727 C
f
0 D
-4226.5449 4295.3643 m
-4226.4824 4295.3252 -4226.46 4295.2227 Y
-4227.8145 4296.3774 -4228.9297 4296.7119 -4229.6602 4296.667 C
-4229.5186 4297.125 -4228.8633 4297.479 -4228.5522 4297.6685 C
-4228.8281 4298.1904 L
-4229 4297.7803 L
-4229.4785 4298.2544 L
-4229.3447 4298.605 -4228.958 4298.5313 -4228.7002 4298.8013 C
-4228.6777 4298.7017 -4227.8506 4298.0933 -4227.6191 4297.7725 C
-4228.2803 4297.4121 L
-4228.1016 4297.5576 -4227.2246 4297.4375 -4226.877 4297.3037 C
-4226.8701 4297.042 -4227.4697 4296.6392 -4227.5449 4297.207 C
-4227.6162 4296.8188 -4226.9258 4296.8145 -4227.3623 4296.3984 C
-4226.8447 4295.9854 -4226.0215 4296.3311 -4225.6392 4296.5225 C
-4225.5742 4297.1753 L
-4225.1553 4297.4287 -4225.291 4296.3896 -4224.793 4296.7661 C
-4225.4053 4296.8936 -4224.6895 4297.4814 -4225.1768 4297.5303 C
-4225.0215 4297.7764 -4225.1738 4298.2192 -4224.6855 4298.1709 C
-4224.2793 4297.3076 -4224.1709 4298.7119 -4223.7871 4297.9502 C
-4223.5303 4298.2192 -4224.0635 4298.4692 -4223.5586 4298.5854 C
-4222.9795 4298.1318 -4223.0127 4297.8062 -4222.9766 4297.1782 C
-4223.5186 4297.0024 -4223.585 4297.9951 -4224.0283 4297.8423 C
-4223.1475 4296.7661 L
-4223.3096 4296.6143 -4223.4297 4296.5977 -4223.5303 4296.6416 C
-4223.3535 4296.5791 -4223.2031 4296.4199 -4223.0742 4296.1997 c
-4223.001 4296.0767 -4222.9336 4295.9712 -4222.8711 4295.8809 C
-4223.3701 4295.875 -4223.8135 4295.8599 -4223.8921 4295.5923 C
-4223.8232 4295.2876 L
-4224 4295.0078 -4224.2881 4295.2271 -4224.4209 4295.4502 C
-4224.8682 4295.4829 -4225.3145 4295.9077 -4225.4121 4295.5132 C
-4225.2422 4295.2344 L
-4225.792 4295.3223 -4225.8535 4295.3604 -4226.5449 4295.3643 C
f
-4244.5625 4294.6709 m
-4244.2295 4295.7876 -4243.8623 4296.7744 -4242.3081 4296.5791 C
-4242.4307 4296.6563 L
-4241.6475 4297.3574 -4240.9033 4295.7295 -4239.9502 4296.5078 C
-4240.4131 4296.9287 -4240.3877 4296.8896 -4240.8984 4297.8535 C
-4240.4023 4297.5376 L
-4240.54 4298.1455 -4240.0449 4297.8311 -4239.6807 4297.8599 C
-4240.002 4298.583 L
-4240.2207 4298.375 -4240.7871 4298.2998 -4240.7705 4298.4648 C
-4240.6465 4298.3848 -4241.5186 4297.5518 -4241.9922 4297.7622 C
-4241.9434 4298.2524 -4240.9434 4298.0537 -4241.3896 4298.8545 C
-4240.9961 4298.5181 -4240.9473 4299.0068 -4240.5361 4298.8354 C
-4240.9307 4299.1709 -4240.6338 4299.5024 -4240.9272 4299.8599 C
-4240.2529 4299.6934 L
-4240.2354 4299.8564 -4241.2354 4300.0557 -4240.6826 4300.6582 C
-4240.4121 4300.4014 -4239.6904 4300.7236 -4239.6777 4300.1963 C
-4239.6611 4300.3584 L
-4239.1553 4300.4727 -4239.4385 4299.6118 -4238.8174 4299.9126 C
-4238.8105 4299.6475 -4238.9287 4299.4639 -4239.1514 4299.5181 C
-4239.3389 4299.6353 -4239.3682 4299.999 -4239.7549 4300.0728 C
-4239.9287 4299.6597 -4239.2881 4300.124 -4239.5566 4299.4263 c
-4239.6904 4299.0791 -4240.5791 4299.7261 -4240.2959 4298.9424 C
-4239.791 4299.0557 L
-4239.7783 4298.5269 -4239.4131 4298.5576 -4239.4229 4298.1318 C
-4239.1143 4297.9375 -4238.8232 4298.5313 -4238.5078 4298.0728 C
-4238.377 4297.7314 -4238.6055 4297.0967 -4238.084 4297.373 C
-4237.6768 4298.1543 -4236.4761 4298.0024 -4236.0264 4297.8896 C
-4235.6328 4297.5537 L
-4235.666 4297.2295 -4236.3848 4297.5977 -4236.1318 4297.1768 C
-4235.5186 4297.0493 L
-4235.5654 4297.2524 L
-4235.3623 4297.2979 -4235.1543 4297.0796 -4234.9688 4296.9639 C
-4235.1602 4297.3438 -4235.6025 4297.1909 -4235.5146 4297.7412 C
-4235.2266 4297.8496 -4235.1826 4298.0537 -4234.917 4297.9478 C
-4234.9751 4297.9873 -4235.0249 4298.041 -4235.0176 4298.1182 C
-4234.4346 4298.3564 -4234.4541 4297.5024 -4234.3081 4297.3232 c
-4233.7217 4296.6084 -4234.8994 4296.6597 -4234.8242 4296.0933 C
-4233.1123 4295.791 L
-4233.2583 4295.9692 -4233.4053 4296.1475 -4233.3506 4296.373 C
-4232.9307 4296.6274 -4233.3408 4296.7998 -4232.751 4296.7734 C
-4232.793 4296.0215 -4232.0088 4296.3047 -4231.5923 4295.8701 C
-4231.3975 4296.1782 -4231.3574 4296.2393 -4231.7832 4296.249 C
-4231.7344 4296.7373 -4231.1631 4296.5493 -4230.96 4296.5942 C
-4230.8423 4296.4727 -4230.6416 4296.4019 -4230.5146 4296.2935 C
-4230.6846 4296.0493 -4230.6123 4295.7437 -4230.2432 4295.5356 C
-4230.2217 4295.4336 L
-4230.8262 4295.2998 -4231.7666 4294.7661 -4232.1455 4295.2661 C
-4232.0381 4295.0244 L
-4232.7383 4294.6021 -4233.5615 4295.9014 -4233.8843 4294.979 C
-4233.8545 4294.6143 -4234.0249 4294.8955 -4234.0127 4294.3677 C
-4234.5283 4294.7803 L
-4234.4209 4294.541 L
-4235.2979 4294.6597 L
-4235.2744 4294.5615 L
-4235.6914 4295.0391 -4236.0176 4295.4287 -4236.2783 4295.7471 C
-4236.2793 4295.9771 -4236.252 4296.0479 -4236.3911 4296.2173 C
-4236.5303 4296.3311 -4236.6362 4296.3486 -4236.7305 4296.3184 C
-4236.7314 4296.3188 -4236.7314 4296.3188 -4236.7314 4296.3213 C
-4236.7314 4296.3188 -4236.7314 4296.3188 -4236.7314 4296.3184 C
-4236.9463 4296.2515 -4237.0898 4295.9209 -4237.3545 4295.7856 C
-4236.5391 4295.7295 L
-4236.4727 4295.3389 -4236.542 4294.9336 -4236.9414 4294.6597 C
-4236.7783 4294.6455 -4236.71 4294.3408 -4236.9121 4294.2959 C
-4236.9346 4294.3975 -4237.4463 4294.5454 -4237.251 4294.8564 C
-4238.0254 4294.999 -4239.2793 4293.9736 -4240.4551 4294.7158 C
-4239.6104 4294.2695 -4241.1318 4294.1924 -4240.1943 4294.0313 C
-4240.8486 4293.4072 -4240.7578 4294.6475 -4241.4248 4294.5493 C
-4241.4814 4294.3252 -4241.0615 4294.5791 -4240.9082 4294.1353 C
-4242.0176 4293.8853 -4242.7803 4295.1455 -4243.8535 4294.9561 C
-4243.8994 4294.4688 L
-4244.1025 4294.5313 -4244.3281 4294.6006 -4244.5625 4294.6709 C
f
-4246.6855 4295.2783 m
-4246.8921 4295.333 -4247.1016 4295.3896 -4247.3145 4295.4463 C
-4247.2939 4295.4541 -4247.2744 4295.4541 -4247.2529 4295.4604 C
-4247.873 4295.8535 L
-4247.4922 4296.0435 -4247.2407 4296.5791 -4247.7744 4296.8286 C
-4247.7295 4296.6274 -4247.8857 4296.3799 -4247.7002 4296.2622 C
-4248.0576 4295.9692 -4248.8423 4295.6865 -4248.6377 4296.4229 C
-4247.9502 4295.7271 -4248.4775 4297.3604 -4247.9375 4296.8438 C
-4248.2275 4297.3232 -4248.5146 4297.1079 -4248.7881 4297.3223 C
-4248.5029 4296.9209 -4248.8545 4296.4126 -4249.2822 4296.2212 C
-4249.4688 4296.3398 -4249.9727 4296.2261 -4250.2822 4296.4209 C
-4250.1719 4296.8711 -4250.4414 4297.1289 -4249.9375 4297.2422 C
-4250.1221 4297.3604 -4250.4087 4297.4541 -4250.7295 4297.2227 C
-4250.6025 4297.1455 -4250.3799 4297.0894 -4250.3955 4296.9272 C
-4250.6025 4296.5127 -4250.8447 4296.5313 -4250.9785 4296.3545 C
-4251.085 4296.3799 -4251.1929 4296.4019 -4251.2979 4296.4263 C
-4251.2666 4296.4648 -4251.2393 4296.5166 -4251.2197 4296.5811 C
-4251.5742 4296.9785 L
-4251.1025 4296.7661 -4251.3564 4297.1865 -4251.3623 4297.4502 c
-4251.3496 4296.9229 -4251.666 4297.3809 -4251.8281 4297.3984 C
-4251.4766 4297.9561 L
-4251.6465 4298.2349 -4252.0762 4297.5537 -4251.9873 4298.105 C
-4251.2422 4298.3262 -4250.9561 4298.2314 -4250.2822 4298.0654 C
-4250.5557 4297.6328 L
-4249.7959 4297.3267 -4250.0869 4298.375 -4249.2344 4298.3545 C
-4248.8799 4297.959 -4247.9521 4298.3267 -4247.9346 4297.5352 C
-4248.041 4297.7764 -4247.4033 4298.2393 -4247.1113 4297.8809 C
-4246.7881 4297.1572 -4245.8115 4297.0596 -4246.1074 4296.7295 C
-4246.3711 4296.7207 -4246.7266 4297.1182 -4246.9385 4296.6475 C
-4246.4268 4296.4966 L
-4246.7627 4296.1021 L
-4246.5889 4296.2437 -4246.6055 4295.8584 -4246.6855 4295.2783 C
f
1 D
-4258.1455 4290.8389 m
-4258.1514 4290.8354 -4258.1582 4290.833 -4258.165 4290.8286 C
-4258.1577 4290.8311 -4258.1504 4290.8311 -4258.1436 4290.8311 C
-4258.1455 4290.8389 L
f
*U
0 D
-4211.9971 4294.8311 m
-4211.8496 4294.6509 -4211.4854 4294.6807 -4211.5566 4294.2935 C
-4211.5479 4294.7192 -4212.207 4294.3584 -4211.9971 4294.8311 C
f
-4211.5615 4295.248 m
-4211.5361 4295.1465 -4211.5537 4294.9829 -4211.3906 4294.9683 C
-4211.8398 4295.0767 L
-4211.5615 4295.248 L
f
-4211.1055 4298.1597 m
-4210.873 4297.8423 -4210.7266 4297.6631 -4210.3623 4297.6919 C
-4210.2256 4298.7314 -4210.958 4297.9824 -4211.123 4298.9517 C
-4210.4561 4299.0493 -4210.251 4298.1416 -4209.7021 4298.0537 C
-4209.9746 4297.6201 -4211.085 4297.3701 -4211.1055 4298.1597 C
f
-4211.4014 4299.4736 m
-4211.0303 4299.2393 L
-4211.0674 4299.1782 L
-4211.4385 4299.4126 L
-4211.4014 4299.4736 L
f
-4219.4385 4290.4429 m
-4219.4717 4290.1182 -4219.7031 4290.4385 -4219.8271 4290.5166 C
-4219.7266 4290.5376 -4219.585 4290.623 -4219.4385 4290.4429 C
f
-4292.3506 4290.105 m
-4295.1807 4290.4185 L
-4294.3662 4290.3369 -4293.6143 4290.2959 -4292.3506 4290.105 C
f
-4228.8311 4292.5664 m
-4228.0713 4292.2603 -4227.7334 4291.6997 -4226.959 4291.5576 C
-4227.9775 4290.9033 -4228.3042 4292.5796 -4229.1592 4291.9092 C
-4228.8311 4292.5664 L
f
-4228.5635 4289.9751 m
-4228.4375 4290.5869 -4229.1494 4290.6919 -4229.0391 4291.1406 C
-4228.5273 4290.9912 -4228.8008 4290.5576 -4228.3359 4290.6104 C
-4228.5635 4289.9751 L
f
-4225.1191 4300.0889 m
-4225.3496 4300.4072 L
-4225.1641 4300.291 L
-4225.1191 4300.0889 L
f
-4232.0273 4290.5181 m
-4231.9434 4290.3799 L
-4232.3242 4290.1865 L
-4232.0273 4290.5181 L
f
-4231.8594 4290.2393 m
-4231.9434 4290.3799 L
-4231.9434 4290.3799 L
-4231.8594 4290.2393 L
f
-4225.415 4301.4014 m
-4225.0728 4301.5313 L
-4224.9033 4301.2515 L
-4225.415 4301.4014 L
f
-4228.4385 4298.1187 m
-4228.1318 4297.9229 L
-4228.1929 4297.9604 -4228.6123 4297.709 -4228.4385 4298.1187 C
f
-4234.3545 4290.2583 m
-4234.7275 4290.4932 L
-4234.6895 4290.5537 L
-4234.3174 4290.3188 L
-4234.3545 4290.2583 L
f
-4230.8369 4299.8057 m
-4230.625 4300.2759 -4231.4482 4299.9326 -4231.0127 4300.3486 C
-4230.625 4300.2759 -4230.7822 4300.0303 -4230.8369 4299.8057 C
f
-4235.335 4296.6157 m
-4235.3857 4296.6157 -4235.4385 4296.6328 -4235.4893 4296.6851 C
-4235.4287 4296.665 -4235.3779 4296.6406 -4235.335 4296.6157 C
f
-4235.335 4296.6157 m
-4235.1729 4296.6157 -4235.0107 4296.7959 -4234.8994 4296.6597 C
-4235.1016 4296.4473 -4235.1753 4296.5269 -4235.335 4296.6157 C
f
-4237.1953 4296.7256 m
-4237.0479 4296.7593 L
-4237.1982 4296.9912 -4237.127 4296.957 -4236.9932 4296.7705 C
-4236.8369 4296.7544 -4236.8457 4296.6055 -4236.8271 4296.5039 C
-4236.7959 4296.4473 -4236.7646 4296.3853 -4236.7314 4296.3213 C
-4236.7793 4296.3809 -4236.8223 4296.4404 -4236.8594 4296.4912 C
-4237.1006 4296.4873 -4237.248 4296.5103 -4237.1953 4296.7256 C
f
-4244.1055 4288.7998 m
-4243.5615 4288.9751 -4243.4209 4289.0596 -4243.4502 4289.4248 C
-4242.9346 4289.541 -4243.0146 4288.9126 -4242.7031 4288.7661 C
-4243.2871 4288.8369 -4243.4063 4288.6685 -4244.1055 4288.7998 C
f
-4242.7031 4288.7661 m
-4242.6377 4288.7593 -4242.5752 4288.7515 -4242.499 4288.7373 C
-4242.584 4288.7261 -4242.6475 4288.7412 -4242.7031 4288.7661 C
f
-4235.0215 4300.7173 m
-4235.3594 4301.2759 L
-4235.2354 4301.1982 L
-4235.0215 4300.7173 L
f
-4244.9121 4288.6157 m
-4244.8115 4288.6392 -4244.6494 4288.623 -4244.5703 4288.748 C
-4244.541 4288.3809 -4245.0127 4288.5933 -4244.9121 4288.6157 c
f
-4242.8154 4295.7744 m
-4242.7598 4295.998 -4242.4121 4295.8643 -4242.2705 4295.9502 C
-4242.4736 4295.9033 -4242.6392 4295.23 -4242.8154 4295.7744 C
f
-4246.4717 4290.1221 m
-4246.3711 4290.1455 -4246.2158 4290.3911 -4246.2832 4290.6934 C
-4246.1367 4290.5142 -4245.9385 4289.8701 -4246.4717 4290.1221 C
f
-4243.8086 4295.709 m
-4243.7314 4295.833 L
-4243.3594 4295.5977 L
-4243.8086 4295.709 L
f
-4242.4814 4301.1006 m
-4242.0635 4300.665 -4243.1455 4300.0493 -4242.4248 4299.6807 C
-4243.3545 4299.2246 -4242.3535 4300.2979 -4243.0391 4300.2271 C
-4242.6377 4300.374 -4242.4409 4300.9253 -4242.4814 4301.1006 C
f
-4243.0391 4300.2271 m
-4243.0977 4300.2041 -4243.1611 4300.1909 -4243.2295 4300.1895 C
-4243.1533 4300.21 -4243.0923 4300.2212 -4243.0391 4300.2271 C
f
-4248.9287 4297.4692 m
-4248.8682 4297.4238 -4248.8262 4297.374 -4248.7881 4297.3223 C
-4248.8359 4297.3584 -4248.8818 4297.4033 -4248.9287 4297.4692 C
f
-4245.2295 4300.5869 m
-4244.6025 4299.9326 L
-4245.0215 4300.3677 -4246.0752 4300.3413 -4246.0098 4300.9927 C
-4245.668 4301.125 -4245.2578 4300.9517 -4245.0889 4300.6709 C
-4245.2295 4300.5869 L
f
-4252.4287 4288.7764 m
-4252.1577 4288.5181 L
-4252.4961 4288.4424 L
-4252.3994 4288.54 -4252.5742 4289.0181 -4252.4287 4288.7764 C
f
-4252.5615 4288.4287 m
-4252.4961 4288.4424 L
-4252.5107 4288.4263 -4252.5313 4288.4199 -4252.5615 4288.4287 C
f
-4247.7422 4297.1543 m
-4247.54 4297.1997 -4247.3779 4297.1816 -4247.1929 4297.0664 C
-4247.2695 4296.9429 -4247.7744 4296.8286 -4247.7422 4297.1543 C
f
-4254.3369 4289.7236 m
-4253.8896 4289.6118 L
-4254.3779 4289.6597 L
-4254.3369 4289.7236 L
f
-4256.4238 4288.6157 m
-4256.501 4288.4932 L
-4256.8721 4288.7271 L
-4256.7939 4288.8496 L
-4256.4238 4288.6157 L
f
-4253.6943 4301.4326 m
-4253.3911 4301.5024 -4253.1543 4300.917 -4253.2334 4300.7935 C
-4253.8213 4300.8188 L
-4253.6719 4301.3311 -4253.6582 4300.8037 -4253.3174 4300.9336 C
-4253.6943 4301.4326 L
f
-4271.915 4289.5732 m
-4271.7842 4289.2314 -4271.1406 4289.4292 -4271.1074 4289.7544 C
-4271.1934 4289.8955 -4271.542 4290.0303 -4271.3232 4290.2373 C
-4270.8145 4289.3975 L
-4270.1377 4289.9209 -4271.3291 4290.5015 -4271.6631 4290.7979 C
-4270.9736 4290.9063 -4270.7695 4290.3545 -4270.0361 4290.3574 C
-4270.252 4290.2822 -4270.3887 4290.0728 -4270.5029 4289.8926 C
-4270.5283 4289.3013 -4269.8447 4289.563 -4269.3564 4289.5166 C
-4269.667 4289.2598 -4269.4873 4289.0435 -4269.2607 4288.8115 C
-4269.2197 4288.7935 -4269.1929 4288.7593 -4269.1738 4288.7192 C
-4269.1475 4288.6919 -4269.1221 4288.665 -4269.0967 4288.6367 C
-4269.1553 4288.6377 L
-4269.1514 4288.5713 -4269.1641 4288.4912 -4269.2061 4288.3809 C
-4269.6162 4288.5537 -4269.9297 4288.0596 -4270.1934 4288.0518 C
-4269.9326 4289.0132 -4271.0923 4288.2744 -4271.4238 4288.5703 C
-4271.8071 4288.665 L
-4271.9502 4288.667 L
-4271.9795 4288.5615 -4271.9385 4288.4292 -4271.7197 4288.2393 C
-4271.9023 4288.4287 -4272.5107 4288.3623 -4272.4541 4288.6709 C
-4273.8423 4288.6846 L
-4273.8857 4288.6455 -4273.9287 4288.5967 -4273.9609 4288.5269 C
-4274.0088 4288.5879 -4274.0166 4288.6377 -4274.0107 4288.6865 C
-4280.0576 4288.748 L
-4279.7593 4288.8232 -4279.501 4289.0435 -4279.1934 4289.1494 C
-4279.6553 4289.7876 -4278.6895 4289.2646 -4278.8247 4289.8677 C
-4279.0322 4290.0869 -4279.3359 4290.0181 -4279.5166 4289.8716 C
-4279.584 4290.1763 -4279.3262 4290.4463 -4279.3564 4290.8101 C
-4278.5938 4291.1934 -4278.4766 4289.7349 -4277.7314 4289.957 C
-4277.7607 4290.3223 -4277.9912 4290.6416 -4277.5029 4290.5923 C
-4277.627 4290.6709 L
-4276.8457 4290.2622 -4277.0186 4291.4966 -4276.5264 4290.4951 C
-4276.5391 4291.0225 L
-4276.1846 4290.625 -4275.4951 4290.6221 -4275.1064 4290.5493 C
-4275.1299 4290.6509 L
-4274.0391 4290.0479 -4274.5176 4290.5225 -4273.293 4290.2705 C
-4273.8564 4290.8853 L
-4273.4346 4291.1396 -4273.3389 4290.4712 -4273.0361 4290.54 C
-4273.0576 4290.6416 -4272.9873 4291.0269 -4273.2734 4291.123 C
-4271.7881 4290.1851 L
-4271.4336 4289.7876 -4271.8604 4289.7979 -4271.915 4289.5732 C
f
-4270.0361 4290.3574 m
-4269.957 4290.3853 -4269.8682 4290.3975 -4269.7627 4290.3774 C
-4269.8643 4290.3604 -4269.9521 4290.3574 -4270.0361 4290.3574 C
f
-4280.4824 4288.7524 m
-4280.0576 4288.748 L
-4280.1895 4288.7158 -4280.3262 4288.7061 -4280.4824 4288.7524 C
f
-4267.9063 4289.2061 m
-4268.1641 4288.9336 -4267.7139 4288.8247 -4267.6689 4288.6221 C
-4268.5913 4288.6318 L
-4268.5869 4288.8354 -4268.6787 4289.0625 -4268.6602 4289.248 C
-4267.9063 4289.2061 L
f
-4268.8584 4288.249 m
-4268.8896 4288.3896 -4268.9873 4288.5166 -4269.0967 4288.6367 C
-4268.5913 4288.6318 L
-4268.5947 4288.479 -4268.6514 4288.3408 -4268.8584 4288.249 C
f
-4268.7607 4299.0894 m
-4268.9238 4299.1079 L
-4269.1709 4299.2646 L
-4268.7607 4299.0894 L
f
-4271.3154 4298.1963 m
-4271.1201 4298.5044 -4270.75 4298.2705 -4270.626 4298.1924 C
-4271.0527 4298.2017 -4270.8682 4298.0854 -4271.3154 4298.1963 C
f
-4270.7881 4301.4966 m
-4271.1992 4301.6709 L
-4271.1611 4301.7314 L
-4270.7881 4301.4966 L
f
-4283.6221 4290.8281 m
-4283.6895 4290.8398 -4283.7549 4290.8486 -4283.8232 4290.8623 C
-4283.7314 4290.8643 -4283.6709 4290.8496 -4283.6221 4290.8281 C
f
-4280.0947 4290.3252 m
-4281.0752 4289.7334 -4279.4521 4289.833 -4279.7598 4289.0752 C
-4280.2939 4289.3262 L
-4280.248 4289.123 L
-4280.8994 4289.1895 L
-4280.7656 4289.5376 -4280.665 4289.5591 -4280.6943 4289.9248 C
-4281.5635 4289.7822 -4280.9683 4289.4912 -4281.6055 4289.0303 C
-4282.5771 4289.0967 L
-4282.498 4288.9873 L
-4282.5801 4288.9951 -4282.6162 4289.041 -4282.6445 4289.1006 C
-4285.917 4289.3281 L
-4286.5127 4289.6182 -4285.5879 4289.9854 -4286.0273 4290.5225 C
-4285.3369 4290.521 -4284.3115 4290.9102 -4284.2529 4290.1816 C
-4284.2759 4290.2822 -4284.3213 4290.4829 -4284.1816 4290.5688 C
-4283.7822 4289.9692 L
-4284.1631 4289.7783 L
-4283.7617 4289.1807 -4282.4658 4289.3135 -4282.2314 4289.6846 C
-4282.9683 4289.8887 -4282.5986 4290.6084 -4283.625 4290.2173 C
-4283.5791 4290.4019 -4283.3911 4290.7271 -4283.6221 4290.8281 C
-4282.4189 4290.6157 -4281.3408 4290.9478 -4280.0947 4290.3252 C
f
-4292.1631 4290.6763 m
-4292.1533 4290.6104 L
-4292.1753 4290.6455 -4292.1826 4290.6719 -4292.1631 4290.6763 C
f
-4291.7593 4290.7661 m
-4291.1729 4290.0518 L
-4292.0869 4290.1094 L
-4292.1533 4290.6104 L
-4292.0728 4290.4829 -4291.752 4290.2295 -4291.6279 4290.4253 C
-4291.7593 4290.7661 L
f
-4290.4922 4289.6201 m
-4290.9639 4289.833 -4290.9385 4290.4229 -4290.6807 4290.6919 C
-4291.1143 4290.9648 -4290.9097 4290.0576 -4291.208 4290.6807 C
-4291.1982 4291.1064 -4290.6641 4290.8564 -4290.541 4290.7783 C
-4290.4922 4289.6201 L
f
-4287.0078 4289.9307 m
-4287.1406 4290.1753 L
-4286.8135 4290.2393 L
-4287.0078 4289.9307 L
f
-4287.1406 4290.1753 m
-4287.4658 4290.1094 L
-4287.4434 4290.291 -4287.4209 4290.4683 -4287.3682 4290.5923 C
-4287.1406 4290.1753 L
f
-4288.3174 4289.9395 m
-4288.4551 4289.8955 -4288.6074 4289.8623 -4288.792 4289.8462 C
-4288.3174 4289.9395 L
f
-4287.9463 4290.0894 m
-4287.957 4290.0127 L
-4288.3174 4289.9395 L
-4288.1846 4289.9854 -4288.0654 4290.0356 -4287.9463 4290.0894 C
f
-4287.4658 4290.1094 m
-4287.5186 4289.6963 -4287.5801 4289.2622 -4288.0498 4289.3774 C
-4287.957 4290.0127 L
-4287.4658 4290.1094 L
f
-4273.7783 4300.874 m
-4274.1494 4301.1079 L
-4274.1104 4301.1719 L
-4273.7393 4300.9375 L
-4273.7783 4300.874 L
f
-4275.9209 4300.4966 m
-4276.0127 4300.5688 -4276.082 4300.6455 -4276.1455 4300.7236 C
-4276.0488 4300.6782 -4275.9717 4300.6094 -4275.9209 4300.4966 C
f
-4277.5137 4303.3188 m
-4277.9502 4302.9033 -4276.9111 4302.7695 -4277.7197 4302.5854 C
-4277.791 4302.1982 -4277.4121 4301.6992 -4277.0313 4301.8916 C
-4277.0615 4302.2559 -4277.4023 4302.125 -4277.168 4302.4966 C
-4276.915 4302.0752 -4276.8193 4302.3623 -4276.9072 4301.8135 C
-4276.4814 4301.4712 -4276.4346 4301.0811 -4276.1455 4300.7236 C
-4276.6602 4300.9648 -4277.7402 4300.4019 -4278.3926 4301.1064 C
-4278.7529 4301.7661 -4278.5342 4302.667 -4278.5361 4303.6201 C
-4278.4814 4303.8438 -4277.5488 4303.9502 -4277.5137 4303.3188 C
f
-4276.8262 4304.2705 m
-4276.624 4304.3174 -4276.5625 4304.2793 -4276.4385 4304.1997 C
-4276.4717 4303.874 -4276.6631 4304.2559 -4276.8262 4304.2705 C
f
-4281.4717 4297.0942 m
-4281.5107 4297.2295 -4281.876 4297.3975 -4281.7979 4297.6318 C
-4281.2432 4297.4604 L
-4281.373 4297.4385 -4281.4189 4297.2725 -4281.4717 4297.0942 C
f
-4281 4297.3877 m
-4281.2432 4297.4604 L
-4281.1826 4297.4727 -4281.1074 4297.4541 -4281 4297.3877 C
f
-4281.498 4297.0093 m
-4281.4893 4297.0376 -4281.4814 4297.0664 -4281.4717 4297.0942 C
-4281.4639 4297.0654 -4281.4658 4297.0356 -4281.498 4297.0093 C
f
-4289.6631 4289.7017 m
-4289.6553 4289.4404 -4289.9023 4289.5967 -4290.0264 4289.6743 C
-4289.9258 4289.6963 -4289.7842 4289.7822 -4289.6631 4289.7017 C
f
-4298.9639 4290.7314 m
-4299.1826 4290.5225 L
-4299.1055 4290.6475 -4299.0654 4290.709 -4298.9639 4290.7314 C
f
-4302.3281 4297.8765 m
-4302.334 4297.9272 -4302.3506 4297.9692 -4302.3721 4298.0093 C
-4302.3506 4297.9771 -4302.335 4297.9336 -4302.3281 4297.8765 c
f
-4302.3721 4298.0093 m
-4302.5215 4298.2271 -4302.9814 4297.8887 -4303.1475 4298.2192 C
-4303.126 4298.1187 L
-4303.4346 4298.3145 L
-4303.1455 4298.2856 -4302.5391 4298.3267 -4302.3721 4298.0093 C
f
U
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 40)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8174.4521 8175.5977 m
-7782.6909 8175.5977 L
-7782.6909 8083.9082 L
-8174.4521 8083.9082 L
-8174.4521 8175.5977 L
n
0 O
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 Xa
1 XR
-7787.3535 8117.9209 m
-7789.1113 8117.9209 -7908.7817 8120.0918 -7984.6519 8121.4717 C
-8005.4663 8120.5352 -8026.2529 8119.2227 -8047.0547 8117.502 C
-8049.5327 8117.1514 -8052.3472 8116.7949 -8053.8584 8116.6006 c
-8054.7114 8116.4863 -8055.5732 8116.3857 -8056.4375 8116.293 C
-8055.9829 8116.0605 -8055.54 8115.7998 -8055.1167 8115.4941 C
-8054.25 8114.7324 -8053.3955 8113.832 -8052.8735 8112.4541 C
-8052.8979 8112.1689 -8052.6997 8111.8193 -8052.6523 8111.5293 c
-8052.5532 8110.9121 -8052.6382 8110.1631 -8052.7319 8109.627 c
-8052.7939 8109.2725 -8052.9551 8109.0254 -8053.0259 8108.7314 c
-8053.0488 8108.6348 -8052.9785 8108.5762 -8053.0059 8108.502 c
-8053.1396 8108.1484 -8053.5313 8107.5518 -8053.7539 8107.2266 c
-8053.8579 8107.0762 -8053.9873 8106.9775 -8054.1035 8106.8193 c
-8054.1196 8106.7969 -8054.0669 8106.7354 -8054.0928 8106.7061 c
-8054.6484 8106.0664 -8055.4312 8105.541 -8056.3955 8105.0762 c
-8056.4546 8105.0508 -8056.4639 8105.1445 -8056.5366 8105.0869 C
-8056.8213 8104.9658 -8057.1143 8104.8535 -8057.3945 8104.791 c
-8058.8965 8104.4629 -8060.7163 8104.8477 -8061.8027 8105.6328 c
-8062.7998 8106.3555 -8063.5308 8107.8623 -8063.4678 8109.0742 c
-8063.4126 8110.1094 -8062.6665 8111.2578 -8061.4458 8112.0352 c
-8060.3604 8112.7295 -8059.0479 8112.9834 -8058.2373 8112.3594 C
-8058.6499 8112.2295 -8058.9688 8112.0332 -8059.0811 8111.7529 C
-8059.0908 8111.4766 -8059.0967 8111.1992 -8058.8755 8110.8594 C
-8058.4517 8110.4863 -8057.7925 8110.248 -8057.1235 8110.7158 c
-8056.1846 8111.3701 -8056.0728 8112.7891 -8057.0342 8113.5361 C
-8057.3086 8113.6406 -8057.5586 8113.8789 -8057.75 8113.9834 c
-8058.1826 8114.2188 -8058.5586 8114.3857 -8058.9751 8114.543 c
-8060.0938 8114.959 -8061.4839 8115.418 -8062.5327 8115.5977 c
-8062.7114 8115.6289 -8062.8989 8115.6475 -8063.0806 8115.6738 C
-8066.4038 8115.3789 -8069.54 8115.0693 -8072.1416 8114.5264 C
-8072.1138 8114.5234 -8072.0908 8114.5244 -8072.0586 8114.5205 c
-8071.2378 8114.4199 -8070.6309 8114.2529 -8069.9043 8114.0137 c
-8069.6328 8113.9238 -8069.3184 8113.9121 -8069.0825 8113.8154 c
-8068.9985 8113.7852 -8068.9409 8113.6602 -8068.8472 8113.6133 c
-8068.5371 8113.4609 -8068.2129 8113.3662 -8067.8999 8113.1602 c
-8066.9097 8112.5059 -8065.8774 8111.3359 -8065.7617 8109.8682 C
-8065.9463 8108.8262 -8066.3643 8107.8525 -8067.5938 8107.0781 c
-8067.7217 8106.9961 -8067.8662 8106.96 -8067.9995 8106.8828 C
-8069.8516 8106.2168 -8071.5913 8107.3135 -8071.8066 8109.2061 C
-8071.7119 8109.375 -8071.6499 8109.5527 -8071.6616 8109.752 C
-8071.2939 8110.4492 -8069.9033 8111.0557 -8069.3057 8110.6143 C
-8069.6133 8110.5566 -8069.7495 8110.5254 -8069.8638 8110.2637 C
-8069.8892 8109.6074 -8069.0679 8109.4336 -8068.6528 8110.0176 C
-8068.4966 8110.7021 -8068.7676 8111.2529 -8069.2939 8111.8105 c
-8069.5068 8112.0361 -8069.7837 8112.1689 -8070.0566 8112.3545 c
-8070.4199 8112.6016 -8070.7495 8112.8828 -8071.1118 8113.0332 c
-8071.4385 8113.1689 -8071.8115 8113.2012 -8072.1445 8113.2891 c
-8072.2349 8113.3105 -8072.2969 8113.3613 -8072.3706 8113.3789 c
-8072.6274 8113.4336 -8072.8359 8113.5146 -8073.0879 8113.5469 c
-8073.4209 8113.585 -8073.7739 8113.5488 -8074.1528 8113.585 c
-8074.3398 8113.6055 -8074.5195 8113.6953 -8074.7144 8113.7109 c
-8074.8413 8113.7207 -8074.9722 8113.7207 -8075.1025 8113.7227 C
-8077.8135 8112.8213 -8080.0957 8111.6094 -8081.9814 8109.2793 c
-8085.6704 8104.7227 -8080.0415 8100.5566 -8078.9902 8104.5977 C
-8080.9668 8106.0361 -8084.5874 8109.1201 -8076.8892 8109.2471 C
-8068.6045 8107.7549 -8075.6982 8092.4922 -8085.6509 8096.5576 c
-8094.0151 8099.9746 -8090.1328 8108.6387 -8084.4658 8112.293 c
-8075.9902 8117.7559 -8066.5376 8118.4922 -8056.7012 8118.584 C
-8067.3862 8123.0488 -8081.9243 8120.4033 -8089.9897 8112.3809 c
-8094.1011 8108.293 -8098.0435 8101.9912 -8096.8193 8095.8896 c
-8095.5742 8089.6816 -8089.1616 8095.4238 -8094.0957 8095.4424 C
-8093.8896 8101.0059 -8080.6387 8094.9648 -8086.9307 8086.8281 c
-8092.6011 8079.4922 -8102.5698 8087.5225 -8104.3242 8093.9482 c
-8110.0239 8114.8359 -8080.3545 8120.7129 -8066.3813 8121.4238 C
-8078.1143 8124.7754 -8094.3892 8122.2734 -8105.5547 8117.7852 c
-8109.9663 8116.0098 -8114.9707 8112.8926 -8117.5479 8108.7773 c
-8121.4619 8102.5264 -8114.4268 8098.2842 -8113.8955 8100.4033 c
-8113.4697 8102.0957 -8119.3765 8102.623 -8114.8267 8105.6992 c
-8110.8091 8108.418 -8107.2759 8102.209 -8106.4619 8099.0781 c
-8102.6782 8084.5322 -8124.0601 8086.4609 -8126.3667 8100.1982 c
-8131.5103 8130.8271 -8085.3071 8124.457 -8069.4902 8123.5928 C
-8069.7124 8123.7617 -8069.9331 8123.9189 -8070.1543 8124.082 C
-8075.4346 8125.585 -8080.6416 8127.7861 -8085.46 8130.5469 C
-8099.9546 8132.2813 -8112.7495 8121.8906 -8128.5913 8116.6152 c
-8137.5635 8113.6289 -8148.0933 8117.9277 -8156.2778 8113.3145 c
-8160.6235 8110.8545 -8163.6982 8108.2656 -8165.2959 8103.0518 C
-8166.9092 8094.1104 -8157.2979 8092.9717 -8159.1396 8097.6416 C
-8160.8428 8097.9688 -8160.1772 8096.834 -8161.3354 8096.8418 C
-8165.2861 8100.5479 -8157.0244 8105.7314 -8153.1606 8102.4316 c
-8146.4497 8096.7031 -8151.2563 8088.332 -8158.0864 8086.0557 C
-8176.5703 8086.25 -8177 8108.8613 -8171.0474 8121.3594 c
-8155.2217 8154.585 -8121.1445 8142.582 -8093.5376 8135.5479 C
-8097.2817 8138.0732 -8099.8975 8141.6426 -8102.5747 8145.2158 c
-8107.2197 8151.416 -8109.6694 8160.8545 -8101.0024 8164.8613 C
-8100.1616 8168.9834 -8098.6392 8172.8857 -8094.5669 8174.7695 c
-8089.7471 8177 -8084.8457 8174.5586 -8083.5508 8169.4512 C
-8083.4766 8166.6729 -8084.1968 8164.8262 -8086.5938 8163.3887 c
-8088.1733 8162.4414 -8093.5176 8162.5313 -8090.8574 8165.5342 C
-8088.9663 8164.041 -8089.1323 8166.4873 -8090.0112 8167.6006 C
-8092.8823 8167.5693 -8093.5771 8165.4873 -8093.5156 8162.5186 c
-8093.5151 8162.4961 -8093.5142 8162.4697 -8093.5146 8162.4434 C
-8093.3574 8155.1367 -8092.1343 8149.3242 -8090.0718 8144.7285 C
-8090.0713 8144.7305 -8090.0708 8144.7314 -8090.0698 8144.7324 c
-8089.8242 8145.2158 -8089.4819 8145.5 -8089.2485 8145.8945 c
-8089.1729 8146.0234 -8089.2495 8146.1387 -8089.1753 8146.2334 c
-8088.8262 8146.6855 -8087.9971 8147.3701 -8087.5313 8147.7402 c
-8087.3135 8147.9121 -8087.0835 8147.998 -8086.8477 8148.1729 c
-8086.8125 8148.1973 -8086.8613 8148.3105 -8086.8115 8148.3418 c
-8085.7256 8149.0176 -8084.3638 8149.4277 -8082.7661 8149.6709 C
-8082.6699 8149.6816 -8082.6978 8149.543 -8082.5669 8149.5938 C
-8082.1035 8149.6406 -8081.6309 8149.6738 -8081.1982 8149.6387 c
-8078.8862 8149.4453 -8076.4316 8148.084 -8075.2129 8146.4668 c
-8074.0942 8144.9854 -8073.7095 8142.4854 -8074.3379 8140.7646 c
-8074.8774 8139.2949 -8076.4629 8137.9697 -8078.5684 8137.3906 c
-8080.4419 8136.873 -8082.4492 8137.084 -8083.3408 8138.3477 C
-8082.6875 8138.3535 -8082.1406 8138.4941 -8081.8545 8138.8477 C
-8081.7178 8139.2422 -8081.5859 8139.6387 -8081.7539 8140.2266 C
-8082.2002 8140.9541 -8083.0469 8141.5898 -8084.2178 8141.2129 c
-8085.4604 8140.8135 -8086.2119 8139.5781 -8086.0532 8138.3486 C
-8080.7505 8132.2031 -8073.0386 8129.6465 -8064.2539 8129.0537 C
-8064.2886 8129.0684 -8064.3218 8129.0801 -8064.3604 8129.0977 c
-8065.5015 8129.6064 -8066.3027 8130.1143 -8067.2437 8130.7832 c
-8067.5957 8131.0332 -8068.0439 8131.1914 -8068.3428 8131.4316 c
-8068.4492 8131.5166 -8068.4766 8131.7227 -8068.5913 8131.8301 c
-8068.9707 8132.1895 -8069.3975 8132.4688 -8069.7563 8132.9063 c
-8070.8945 8134.2891 -8071.8662 8136.4346 -8071.3809 8138.6016 C
-8070.6523 8140.0234 -8069.6162 8141.2441 -8067.4995 8141.8145 c
-8067.2788 8141.875 -8067.0542 8141.8633 -8066.8276 8141.918 C
-8063.8613 8142.0537 -8061.8369 8139.7021 -8062.3667 8136.875 C
-8062.5781 8136.6738 -8062.7471 8136.4434 -8062.8184 8136.1514 C
-8063.6582 8135.3105 -8065.9336 8135.0508 -8066.5996 8135.9521 C
-8066.1309 8135.9004 -8065.9199 8135.8848 -8065.6387 8136.2109 C
-8065.3105 8137.1475 -8066.4189 8137.7617 -8067.2759 8137.1045 C
-8067.8052 8136.1865 -8067.6587 8135.2695 -8067.1479 8134.2314 c
-8066.9409 8133.8105 -8066.5991 8133.5 -8066.2881 8133.1104 c
-8065.8735 8132.5938 -8065.5239 8132.041 -8065.0669 8131.6621 c
-8064.6563 8131.3232 -8064.1318 8131.1094 -8063.6899 8130.8369 c
-8063.5708 8130.7646 -8063.5039 8130.6641 -8063.4043 8130.6074 c
-8063.0596 8130.4121 -8062.7935 8130.2031 -8062.4438 8130.0469 c
-8061.9819 8129.8418 -8061.4561 8129.7373 -8060.9253 8129.5146 c
-8060.6636 8129.4063 -8060.4443 8129.1953 -8060.1709 8129.085 c
-8060.0063 8129.0215 -8059.8311 8128.9688 -8059.6592 8128.9141 C
-8058.2695 8128.918 -8056.8613 8128.957 -8055.4375 8129.0342 c
-8053.7285 8129.0801 -8051.4653 8129.0938 -8049.5728 8129.166 C
-8017.4688 8125.6533 -7984.98 8124.7305 -7952.4746 8124.2822 C
-7879.0664 8125.6152 -7788.8774 8127.248 -7787.3535 8127.248 c
-7784.7773 8127.248 -7782.6909 8125.1602 -7782.6909 8122.584 c
-7782.6909 8120.0078 -7784.7773 8117.9209 -7787.3535 8117.9209 c
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -
( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -
(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -
(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -
( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Chalk - Scribble/ A) -
(dobe ArtOnPath Brush Tool/ Floral Stem/ Adobe PatternOnPath Br) -
(ush Tool/ Decorative Border/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(15 pt. Round)
(1 15 15 100 100 15 15 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(2 pt. Oval)
(1 2 2 26 74 15 15 0 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(3 pt. Round)
(1 3 3 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Oval)
(1 5 5 10 90 -65 35 0 1 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(7 pt. Round)
(1 7 7 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Chalk - Scribble)
(1 / Unnamed 3/ / / / / 5 0 0 0 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Floral Stem)
(1 / Unnamed Brush Pat 40/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Decorative Border)
(1 / New Pattern 1/ / New Pattern 2/ / / 5 0 0.00392157 0.00392) -
(157 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.912474 0.787625 0.619837 0.97467 ([Registration]) 0 Xs
([Registration])
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
(White)
Pc
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 Xa
(Black)
Pc
0.001648 0.996399 0.976776 0.001984 0.890196 0.023529 0.07451 Xa
(CMYK Red)
Pc
0.045655 0.000031 0.888395 0.000031 1 0.929412 0 Xa
(CMYK Yellow)
Pc
0.838651 0.115511 0.962341 0.010986 0 0.588235 0.25098 Xa
(CMYK Green)
Pc
0.75079 0.216068 0.000031 0.000031 0 0.623529 0.890196 Xa
(CMYK Cyan)
Pc
0.996765 0.965789 0.0878 0.011505 0.192157 0.152941 0.513726 Xa
(CMYK Blue)
Pc
0.008942 0.971435 0.039033 0.000031 0.901961 0 0.494118 Xa
(CMYK Magenta)
Pc
0.17554 1 0.904204 0.07599 0.745098 0.086275 0.133333 Xa
(C=15 M=100 Y=90 K=10)
Pc
0.003632 0.899077 0.849912 0.000031 0.901961 0.2 0.164706 Xa
(C=0 M=90 Y=85 K=0)
Pc
0.000031 0.797818 0.941039 0.001312 0.913725 0.305882 0.105882 Xa
(C=0 M=80 Y=95 K=0)
Pc
0.001892 0.501549 0.97351 0.000214 0.952941 0.572549 0 Xa
(C=0 M=50 Y=100 K=0)
Pc
0.000031 0.348089 0.850645 0.000031 0.976471 0.698039 0.2 Xa
(C=0 M=35 Y=85 K=0)
Pc
0.054566 0.000031 0.886961 0.000031 0.988235 0.917647 0.062745 Xa
(C=5 M=0 Y=90 K=0)
Pc
0.198093 0.004028 0.946899 0.000031 0.870588 0.862745 0 Xa
(C=20 M=0 Y=100 K=0)
Pc
0.49955 0.000031 0.994995 0.000031 0.584314 0.756863 0.121569 Xa
(C=50 M=0 Y=100 K=0)
Pc
0.746487 0.000031 0.995239 0.000031 0.227451 0.666667 0.207843 Xa
(C=75 M=0 Y=100 K=0)
Pc
0.852354 0.169528 1 0.034516 0 0.552941 0.211765 Xa
(C=85 M=10 Y=100 K=10)
Pc
0.902007 0.328862 0.959106 0.261204 0 0.4 0.2 Xa
(C=90 M=30 Y=95 K=30)
Pc
0.748501 0.000031 0.747158 0.000031 0.184314 0.67451 0.4 Xa
(C=75 M=0 Y=75 K=0)
Pc
0.783505 0.110475 0.44947 0.004547 0 0.631373 0.603922 Xa
(C=80 M=10 Y=45 K=0)
Pc
0.698512 0.160403 0.000031 0.000031 0.211765 0.662745 0.882353 Xa
(C=70 M=15 Y=0 K=0)
Pc
0.84799 0.496101 0.001801 0.000031 0.113725 0.443137 0.721569 Xa
(C=85 M=50 Y=0 K=0)
Pc
1 0.932494 0.097414 0.010742 0.176471 0.180392 0.513726 Xa
(C=100 M=95 Y=5 K=0)
Pc
1 0.984619 0.300084 0.228214 0.160784 0.137255 0.360784 Xa
(C=100 M=100 Y=25 K=25)
Pc
0.754849 0.993286 0.022736 0.003998 0.4 0.141176 0.513726 Xa
(C=75 M=100 Y=0 K=0)
Pc
0.504448 0.995972 0.008453 0.00296 0.584314 0.105882 0.505882 Xa
(C=50 M=100 Y=0 K=0)
Pc
0.277195 0.983795 0.289403 0.177462 0.639216 0.098039 0.356863 Xa
(C=35 M=100 Y=35 K=10)
Pc
0.087526 0.996979 0.47953 0.017273 0.839216 0.043137 0.321569 Xa
(C=10 M=100 Y=50 K=0)
Pc
0.000031 0.945342 0.193301 0.00058 0.905882 0.113725 0.45098 Xa
(C=0 M=95 Y=20 K=0)
Pc
0.216587 0.233188 0.379309 0.044099 0.796078 0.733333 0.627451 Xa
(C=25 M=25 Y=40 K=0)
Pc
0.312474 0.397589 0.43888 0.187289 0.643137 0.541176 0.482353 Xa
(C=40 M=45 Y=50 K=5)
Pc
0.424475 0.449012 0.55465 0.344823 0.482353 0.415686 0.345098 Xa
(C=50 M=50 Y=60 K=25)
Pc
0.444495 0.53402 0.578546 0.504479 0.388235 0.305882 0.258824 Xa
(C=55 M=60 Y=65 K=40)
Pc
0.193301 0.373053 0.629145 0.074159 0.792157 0.619608 0.403922 Xa
(C=25 M=40 Y=65 K=0)
Pc
0.24979 0.475837 0.732998 0.162539 0.694118 0.498039 0.290196 Xa
(C=30 M=50 Y=75 K=10)
Pc
0.306889 0.577478 0.779446 0.294591 0.576471 0.376471 0.215686 Xa
(C=35 M=60 Y=80 K=25)
Pc
0.340551 0.624384 0.865385 0.409461 0.490196 0.305882 0.141176 Xa
(C=40 M=65 Y=90 K=35)
Pc
0.375372 0.678492 0.965057 0.525902 0.407843 0.235294 0.066667 Xa
(C=40 M=70 Y=100 K=50)
Pc
0.468452 0.683467 0.780606 0.716243 0.262745 0.160784 0.094118 Xa
(C=50 M=70 Y=80 K=70)
Pc
Bb
2 (Fade to Black) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Fade to Black)
Pc
Bb
0 0 0 0 Bh
2 (Super Soft Black Vignette) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Super Soft Black Vignette)
Pc
Bb
2 (Green, Yellow, Orange) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Green, Yellow, Orange)
Pc
Bb
0 0 0 0 Bh
2 (Purple Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Purple Radial)
Pc
(Laguna) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Laguna)
Pc
0.743221 0.648188 0.629023 0.813504 0.113725 0.113725 0.105882 Xa
(C=0 M=0 Y=0 K=100)
Pc
0.66363 0.566125 0.55111 0.600732 0.235294 0.235294 0.231373 Xa
(C=0 M=0 Y=0 K=90)
Pc
0.593744 0.492622 0.488838 0.418311 0.341176 0.341176 0.337255 Xa
(C=0 M=0 Y=0 K=80)
Pc
0.531518 0.433936 0.42591 0.279881 0.439216 0.435294 0.435294 Xa
(C=0 M=0 Y=0 K=70)
Pc
0.47129 0.36878 0.36878 0.174716 0.529412 0.529412 0.529412 Xa
(C=0 M=0 Y=0 K=60)
Pc
0.397436 0.307927 0.320073 0.100069 0.615686 0.615686 0.611765 Xa
(C=0 M=0 Y=0 K=50)
Pc
0.328893 0.24802 0.257694 0.045808 0.698039 0.698039 0.698039 Xa
(C=0 M=0 Y=0 K=40)
Pc
0.2551 0.187503 0.19794 0.016297 0.776471 0.776471 0.776471 Xa
(C=0 M=0 Y=0 K=30)
Pc
0.171847 0.120424 0.133059 0.001312 0.854902 0.854902 0.854902 Xa
(C=0 M=0 Y=0 K=20)
Pc
0.083955 0.058015 0.068391 0.000031 0.929412 0.929412 0.929412 Xa
(C=0 M=0 Y=0 K=10)
Pc
0.041901 0.031647 0.036683 0.000031 0.964706 0.964706 0.964706 Xa
(C=0 M=0 Y=0 K=5)
Pc
0.001648 0.996399 0.976776 0.001984 0.890196 0.023529 0.07451 Xa
(C=0 M=100 Y=100 K=0)
Pc
0.008301 0.746029 1 0.000031 0.917647 0.356863 0.047059 Xa
(C=0 M=75 Y=100 K=0)
Pc
0.022705 0.091249 0.917052 0.000031 1 0.870588 0 Xa
(C=0 M=10 Y=95 K=0)
Pc
0.834714 0.101381 1 0.007813 0 0.596078 0.227451 Xa
(C=85 M=10 Y=100 K=0)
Pc
1 0.87863 0.075715 0.005524 0.152941 0.203922 0.545098 Xa
(C=100 M=90 Y=0 K=0)
Pc
0.602258 0.894011 0.000031 0.000824 0.509804 0.211765 0.54902 Xa
(C=60 M=90 Y=0 K=0)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
*u
0 O
0.34757 0.264652 0.264439 0.055726 0.678431 0.678431 0.682353 Xa
0 J 0 j 1 w 10 M []0 d0 XR
21.2832 -20.3193 m
21.2832 -21.2744 20.7441 -21.9404 20.2578 -21.9404 C
7.33203 -21.9404 l
6.84521 -21.9404 6.30176 -21.2744 6.30176 -20.3193 C
6.30176 -4.04395 l
6.30176 -3.08789 6.84521 -2.41895 7.33203 -2.41895 C
20.2578 -2.41895 l
20.7441 -2.41895 21.2832 -3.08789 21.2832 -4.04395 c
21.2832 -20.3193 L
f
13.7935 -26.4063 m
12.9243 -26.4063 12.2188 -25.7051 12.2188 -24.832 c
12.2188 -23.9648 12.9243 -23.2578 13.7935 -23.2578 c
14.6641 -23.2578 15.3701 -23.9648 15.3701 -24.832 c
15.3701 -25.7051 14.6641 -26.4063 13.7935 -26.4063 C
F
1 D
20.2578 -0.319824 m
7.33203 -0.319824 l
5.60547 -0.319824 4.20654 -1.99023 4.20654 -4.04395 C
4.20654 -24.2832 l
4.20654 -26.335 5.60547 -28.0059 7.33203 -28.0059 C
20.2578 -28.0059 l
21.9805 -28.0059 23.3828 -26.335 23.3828 -24.2832 C
23.3828 -4.04395 l
23.3828 -1.99023 21.9805 -0.319824 20.2578 -0.319824 C
F
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
